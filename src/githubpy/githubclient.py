
import requests

from .githubclientbase import GitHubClientBase
from .githubclientclasses import *
from .githubclientexceptions import UnexpectedResult
class GitHubClient(GitHubClientBase):
    def __init__(self, token):
        GitHubClientBase.__init__(self, token)


    def MetaRoot(self, ):
        """Get Hypermedia links to resources accessible in GitHub's REST API
        
        https://docs.github.com/rest/overview/resources-in-the-rest-api#root-endpoint
        /
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return MetaRootSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MetaGet(self, ):
        """Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."

**Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
        
        https://docs.github.com/rest/reference/meta#get-github-meta-information
        /meta
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/meta", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ApiOverview(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MetaGetOctocat(self, s=None):
        """Get the octocat as ASCII art
        
        https://docs.github.com/rest/reference/meta#get-octocat
        /octocat
        
        arguments:
        s -- The words to show in Octocat's speech bubble
        
        """
        
        data = {}
        if s is not None:
            data['s'] = s
        
        
        r = requests.get(f"{self._url}/octocat", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return DataResponse(r.content)
            
        
        raise UnexpectedResult(r.status_code)

    def MetaGetZen(self, ):
        """Get a random sentence from the Zen of GitHub
        /zen
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/zen", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return DataResponse(r.content)
            
        
        raise UnexpectedResult(r.status_code)

    def AppsGetAuthenticated(self, ):
        """Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-the-authenticated-app
        /app
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/app", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GithubApp(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsCreateFromManifest(self, code:str,object:object):
        """Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
        
        https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest
        /app-manifests/{code}/conversions
        
        arguments:
        code -- 
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.post(f"{self._url}/app-manifests/{code}/conversions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GithubApp(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsGetWebhookConfigForApp(self, ):
        """Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-a-webhook-configuration-for-an-app
        /app/hook/config
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/app/hook/config", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WebhookConfiguration(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsUpdateWebhookConfigForApp(self, url:str=None, content_type:str=None, secret:str=None, insecure_ssl=None):
        """Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#update-a-webhook-configuration-for-an-app
        /app/hook/config
        
        arguments:
        url -- 
        content_type -- 
        secret -- 
        insecure_ssl -- 
        

        """
    
        data = {
        'url': url,
        'content_type': content_type,
        'secret': secret,
        'insecure_ssl': insecure_ssl,
        
        }
        
        
        r = requests.patch(f"{self._url}/app/hook/config", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return WebhookConfiguration(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsListWebhookDeliveries(self, per_page=30, cursor=None):
        """Returns a list of webhook deliveries for the webhook configured for a GitHub App.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#list-deliveries-for-an-app-webhook
        /app/hook/deliveries
        
        arguments:
        per_page -- Results per page (max 100)
        cursor -- Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if cursor is not None:
            data['cursor'] = cursor
        
        
        r = requests.get(f"{self._url}/app/hook/deliveries", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleWebhookDelivery(**entry) for entry in r.json() ]
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsGetWebhookDelivery(self, delivery_id:int):
        """Returns a delivery for the webhook configured for a GitHub App.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-a-delivery-for-an-app-webhook
        /app/hook/deliveries/{delivery_id}
        
        arguments:
        delivery_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/app/hook/deliveries/{delivery_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WebhookDelivery(**r.json())
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsRedeliverWebhookDelivery(self, delivery_id:int):
        """Redeliver a delivery for the webhook configured for a GitHub App.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#redeliver-a-delivery-for-an-app-webhook
        /app/hook/deliveries/{delivery_id}/attempts
        
        arguments:
        delivery_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/app/hook/deliveries/{delivery_id}/attempts", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return r.json()
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsListInstallations(self, per_page=30, page=1, since=None, outdated=None):
        """You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.

The permissions the installation has are included under the `permissions` key.
        
        https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app
        /app/installations
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        outdated -- 
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        if since is not None:
            data['since'] = since
        if outdated is not None:
            data['outdated'] = outdated
        
        
        r = requests.get(f"{self._url}/app/installations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Installation(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def AppsGetInstallation(self, installation_id:int):
        """Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-an-installation-for-the-authenticated-app
        /app/installations/{installation_id}
        
        arguments:
        installation_id -- installation_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/app/installations/{installation_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Installation(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsDeleteInstallation(self, installation_id:int):
        """Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#delete-an-installation-for-the-authenticated-app
        /app/installations/{installation_id}
        
        arguments:
        installation_id -- installation_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/app/installations/{installation_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsCreateInstallationAccessToken(self, installation_id:int,repositories:list=None, repository_ids:list=None, permissions:dict=None):
        """Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps/#create-an-installation-access-token-for-an-app
        /app/installations/{installation_id}/access_tokens
        
        arguments:
        installation_id -- installation_id parameter
        repositories -- List of repository names that the token should have access to
        repository_ids -- List of repository IDs that the token should have access to
        permissions -- 
        

        """
    
        data = {
        'repositories': repositories,
        'repository_ids': repository_ids,
        'permissions': permissions,
        
        }
        
        
        r = requests.post(f"{self._url}/app/installations/{installation_id}/access_tokens", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return InstallationToken(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsSuspendInstallation(self, installation_id:int):
        """Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#suspend-an-app-installation
        /app/installations/{installation_id}/suspended
        
        arguments:
        installation_id -- installation_id parameter
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/app/installations/{installation_id}/suspended", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsUnsuspendInstallation(self, installation_id:int):
        """Removes a GitHub App installation suspension.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#unsuspend-an-app-installation
        /app/installations/{installation_id}/suspended
        
        arguments:
        installation_id -- installation_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/app/installations/{installation_id}/suspended", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsDeleteAuthorization(self, client_id:str):
        """OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
        
        https://docs.github.com/rest/reference/apps#delete-an-app-authorization
        /applications/{client_id}/grant
        
        arguments:
        client_id -- The client ID of your GitHub app.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/applications/{client_id}/grant", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsRevokeGrantForApplication(self, client_id:str, access_token:str):
        """**Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.

Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
        
        https://docs.github.com/rest/reference/apps#revoke-a-grant-for-an-application
        /applications/{client_id}/grants/{access_token}
        
        arguments:
        client_id -- The client ID of your GitHub app.
        access_token -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/applications/{client_id}/grants/{access_token}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def AppsCheckToken(self, client_id:str,access_token:str):
        """OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
        
        https://docs.github.com/rest/reference/apps#check-a-token
        /applications/{client_id}/token
        
        arguments:
        client_id -- The client ID of your GitHub app.
        access_token -- The access_token of the OAuth application.
        

        """
    
        data = {
        'access_token': access_token,
        
        }
        
        
        r = requests.post(f"{self._url}/applications/{client_id}/token", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Authorization(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsResetToken(self, client_id:str,access_token:str):
        """OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
        
        https://docs.github.com/rest/reference/apps#reset-a-token
        /applications/{client_id}/token
        
        arguments:
        client_id -- The client ID of your GitHub app.
        access_token -- The access_token of the OAuth application.
        

        """
    
        data = {
        'access_token': access_token,
        
        }
        
        
        r = requests.patch(f"{self._url}/applications/{client_id}/token", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Authorization(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsDeleteToken(self, client_id:str):
        """OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
        
        https://docs.github.com/rest/reference/apps#delete-an-app-token
        /applications/{client_id}/token
        
        arguments:
        client_id -- The client ID of your GitHub app.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/applications/{client_id}/token", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsScopeToken(self, client_id:str,access_token:str, target:str=None, target_id:int=None, repositories:list=None, repository_ids:list=None, permissions:dict=None):
        """Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
        
        https://docs.github.com/rest/reference/apps#create-a-scoped-access-token
        /applications/{client_id}/token/scoped
        
        arguments:
        client_id -- The client ID of your GitHub app.
        access_token -- The OAuth access token used to authenticate to the GitHub API.
        target -- The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
        target_id -- The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
        repositories -- The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
        repository_ids -- The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
        permissions -- 
        

        """
    
        data = {
        'access_token': access_token,
        'target': target,
        'target_id': target_id,
        'repositories': repositories,
        'repository_ids': repository_ids,
        'permissions': permissions,
        
        }
        
        
        r = requests.post(f"{self._url}/applications/{client_id}/token/scoped", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Authorization(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsCheckAuthorization(self, client_id:str, access_token:str):
        """**Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
        
        https://docs.github.com/rest/reference/apps#check-an-authorization
        /applications/{client_id}/tokens/{access_token}
        
        arguments:
        client_id -- The client ID of your GitHub app.
        access_token -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/applications/{client_id}/tokens/{access_token}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Authorization(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsResetAuthorization(self, client_id:str, access_token:str):
        """**Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
        
        https://docs.github.com/rest/reference/apps#reset-an-authorization
        /applications/{client_id}/tokens/{access_token}
        
        arguments:
        client_id -- The client ID of your GitHub app.
        access_token -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/applications/{client_id}/tokens/{access_token}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Authorization(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsRevokeAuthorizationForApplication(self, client_id:str, access_token:str):
        """**Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
        
        https://docs.github.com/rest/reference/apps#revoke-an-authorization-for-an-application
        /applications/{client_id}/tokens/{access_token}
        
        arguments:
        client_id -- The client ID of your GitHub app.
        access_token -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/applications/{client_id}/tokens/{access_token}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def AppsGetBySlug(self, app_slug:str):
        """**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).

If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps/#get-an-app
        /apps/{app_slug}
        
        arguments:
        app_slug -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/apps/{app_slug}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GithubApp(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListReposAccessibleToInstallation(self, per_page=30, page=1):
        """List repositories that an app installation can access.

You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation
        /installation/repositories
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/installation/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return AppsListReposAccessibleToInstallationSuccess(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsRevokeInstallationAccessToken(self, ):
        """Revokes the installation token you're using to authenticate as an installation and access this endpoint.

Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.

You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token
        /installation/token
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/installation/token", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def AppsGetSubscriptionPlanForAccount(self, account_id:int):
        """Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account
        /marketplace_listing/accounts/{account_id}
        
        arguments:
        account_id -- account_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/marketplace_listing/accounts/{account_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return MarketplacePurchase(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListPlans(self, per_page=30, page=1):
        """Lists all plans that are part of your GitHub Marketplace listing.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#list-plans
        /marketplace_listing/plans
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/marketplace_listing/plans", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MarketplaceListingPlan(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListAccountsForPlan(self, plan_id:int,sort='created', direction='None', per_page=30, page=1):
        """Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan
        /marketplace_listing/plans/{plan_id}/accounts
        
        arguments:
        plan_id -- plan_id parameter
        sort -- One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
        direction -- To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/marketplace_listing/plans/{plan_id}/accounts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MarketplacePurchase(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsGetSubscriptionPlanForAccountStubbed(self, account_id:int):
        """Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account-stubbed
        /marketplace_listing/stubbed/accounts/{account_id}
        
        arguments:
        account_id -- account_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/marketplace_listing/stubbed/accounts/{account_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return MarketplacePurchase(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListPlansStubbed(self, per_page=30, page=1):
        """Lists all plans that are part of your GitHub Marketplace listing.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#list-plans-stubbed
        /marketplace_listing/stubbed/plans
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/marketplace_listing/stubbed/plans", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MarketplaceListingPlan(**entry) for entry in r.json() ]
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListAccountsForPlanStubbed(self, plan_id:int,sort='created', direction='None', per_page=30, page=1):
        """Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed
        /marketplace_listing/stubbed/plans/{plan_id}/accounts
        
        arguments:
        plan_id -- plan_id parameter
        sort -- One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
        direction -- To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/marketplace_listing/stubbed/plans/{plan_id}/accounts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MarketplacePurchase(**entry) for entry in r.json() ]
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsGetOrgInstallation(self, org:str):
        """Enables an authenticated GitHub App to find the organization's installation information.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app
        /orgs/{org}/installation
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/installation", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Installation(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsCreateContentAttachment(self, owner:str, repo:str, content_reference_id:int,body:str, title:str):
        """Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.

The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments.

You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#create-a-content-attachment
        /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments
        
        arguments:
        owner -- The owner of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
        repo -- The name of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
        content_reference_id -- The `id` of the `content_reference` event.
        body -- The body of the attachment
        title -- The title of the attachment
        

        """
    
        data = {
        'body': body,
        'title': title,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/content_references/{content_reference_id}/attachments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Contentreferenceattachment(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsGetRepoInstallation(self, owner:str, repo:str):
        """Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app
        /repos/{owner}/{repo}/installation
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/installation", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Installation(**r.json())
            
        if r.status_code == 301:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListInstallationsForAuthenticatedUser(self, per_page=30, page=1):
        """Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.

You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

You can find the permissions for the installation under the `permissions` key.
        
        https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token
        /user/installations
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/installations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return AppsListInstallationsForAuthenticatedUserSuccess(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListInstallationReposForAuthenticatedUser(self, installation_id:int,per_page=30, page=1):
        """List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.

The access the user has to each repository is included in the hash under the `permissions` key.
        
        https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token
        /user/installations/{installation_id}/repositories
        
        arguments:
        installation_id -- installation_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/installations/{installation_id}/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return AppsListInstallationReposForAuthenticatedUserSuccess(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsAddRepoToInstallation(self, installation_id:int, repository_id:int):
        """Add a single repository to an installation. The authenticated user must have admin access to the repository.

You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation
        /user/installations/{installation_id}/repositories/{repository_id}
        
        arguments:
        installation_id -- installation_id parameter
        repository_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/user/installations/{installation_id}/repositories/{repository_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def AppsRemoveRepoFromInstallation(self, installation_id:int, repository_id:int):
        """Remove a single repository from an installation. The authenticated user must have admin access to the repository.

You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation
        /user/installations/{installation_id}/repositories/{repository_id}
        
        arguments:
        installation_id -- installation_id parameter
        repository_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/installations/{installation_id}/repositories/{repository_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListSubscriptionsForAuthenticatedUser(self, per_page=30, page=1):
        """Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
        
        https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user
        /user/marketplace_purchases
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/marketplace_purchases", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and UserMarketplacePurchase(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsListSubscriptionsForAuthenticatedUserStubbed(self, per_page=30, page=1):
        """Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
        
        https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed
        /user/marketplace_purchases/stubbed
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/marketplace_purchases/stubbed", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and UserMarketplacePurchase(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def AppsGetUserInstallation(self, username:str):
        """Enables an authenticated GitHub App to find the user’s installation information.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
        
        https://docs.github.com/rest/reference/apps#get-a-user-installation-for-the-authenticated-app
        /users/{username}/installation
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}/installation", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Installation(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsListGrants(self, per_page=30, page=1, client_id=None):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
        
        https://docs.github.com/rest/reference/oauth-authorizations#list-your-grants
        /applications/grants
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        client_id -- The client ID of your GitHub app.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        if client_id is not None:
            data['client_id'] = client_id
        
        
        r = requests.get(f"{self._url}/applications/grants", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and ApplicationGrant(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsGetGrant(self, grant_id:int):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        
        https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-grant
        /applications/grants/{grant_id}
        
        arguments:
        grant_id -- grant_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/applications/grants/{grant_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ApplicationGrant(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsDeleteGrant(self, grant_id:int):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
        
        https://docs.github.com/rest/reference/oauth-authorizations#delete-a-grant
        /applications/grants/{grant_id}
        
        arguments:
        grant_id -- grant_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/applications/grants/{grant_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsListAuthorizations(self, per_page=30, page=1, client_id=None):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        
        https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations
        /authorizations
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        client_id -- The client ID of your GitHub app.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        if client_id is not None:
            data['client_id'] = client_id
        
        
        r = requests.get(f"{self._url}/authorizations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Authorization(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsCreateAuthorization(self, scopes:list=None, note:str=None, note_url:str=None, client_id:str=None, client_secret:str=None, fingerprint:str=None):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

**Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).

Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."

To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.

You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).

Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
        
        https://docs.github.com/rest/reference/oauth-authorizations#create-a-new-authorization
        /authorizations
        
        arguments:
        scopes -- A list of scopes that this authorization is in.
        note -- A note to remind you what the OAuth token is for.
        note_url -- A URL to remind you what app the OAuth token is for.
        client_id -- The OAuth app client key for which to create the token.
        client_secret -- The OAuth app client secret for which to create the token.
        fingerprint -- A unique string to distinguish an authorization from others created for the same client ID and user.
        

        """
    
        data = {
        'scopes': scopes,
        'note': note,
        'note_url': note_url,
        'client_id': client_id,
        'client_secret': client_secret,
        'fingerprint': fingerprint,
        
        }
        
        
        r = requests.post(f"{self._url}/authorizations", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Authorization(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsGetOrCreateAuthorizationForApp(self, client_id:str,client_secret:str, scopes:list=None, note:str=None, note_url:str=None, fingerprint:str=None):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

**Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).

Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.

If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."

**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        
        https://docs.github.com/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app
        /authorizations/clients/{client_id}
        
        arguments:
        client_id -- The client ID of your GitHub app.
        client_secret -- The OAuth app client secret for which to create the token.
        scopes -- A list of scopes that this authorization is in.
        note -- A note to remind you what the OAuth token is for.
        note_url -- A URL to remind you what app the OAuth token is for.
        fingerprint -- A unique string to distinguish an authorization from others created for the same client ID and user.
        

        """
    
        data = {
        'client_secret': client_secret,
        'scopes': scopes,
        'note': note,
        'note_url': note_url,
        'fingerprint': fingerprint,
        
        }
        
        
        r = requests.put(f"{self._url}/authorizations/clients/{client_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Authorization(**r.json())
            
        if r.status_code == 201:
            return Authorization(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint(self, client_id:str, fingerprint:str,client_secret:str, scopes:list=None, note:str=None, note_url:str=None):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

**Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).

This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.

If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
        
        https://docs.github.com/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app-and-fingerprint
        /authorizations/clients/{client_id}/{fingerprint}
        
        arguments:
        client_id -- The client ID of your GitHub app.
        fingerprint -- 
        client_secret -- The OAuth app client secret for which to create the token.
        scopes -- A list of scopes that this authorization is in.
        note -- A note to remind you what the OAuth token is for.
        note_url -- A URL to remind you what app the OAuth token is for.
        

        """
    
        data = {
        'client_secret': client_secret,
        'scopes': scopes,
        'note': note,
        'note_url': note_url,
        
        }
        
        
        r = requests.put(f"{self._url}/authorizations/clients/{client_id}/{fingerprint}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Authorization(**r.json())
            
        if r.status_code == 201:
            return Authorization(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsGetAuthorization(self, authorization_id:int):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        
        https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-authorization
        /authorizations/{authorization_id}
        
        arguments:
        authorization_id -- authorization_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/authorizations/{authorization_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Authorization(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsUpdateAuthorization(self, authorization_id:int,scopes:list=None, add_scopes:list=None, remove_scopes:list=None, note:str=None, note_url:str=None, fingerprint:str=None):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."

You can only send one of these scope keys at a time.
        
        https://docs.github.com/rest/reference/oauth-authorizations#update-an-existing-authorization
        /authorizations/{authorization_id}
        
        arguments:
        authorization_id -- authorization_id parameter
        scopes -- A list of scopes that this authorization is in.
        add_scopes -- A list of scopes to add to this authorization.
        remove_scopes -- A list of scopes to remove from this authorization.
        note -- A note to remind you what the OAuth token is for.
        note_url -- A URL to remind you what app the OAuth token is for.
        fingerprint -- A unique string to distinguish an authorization from others created for the same client ID and user.
        

        """
    
        data = {
        'scopes': scopes,
        'add_scopes': add_scopes,
        'remove_scopes': remove_scopes,
        'note': note,
        'note_url': note_url,
        'fingerprint': fingerprint,
        
        }
        
        
        r = requests.patch(f"{self._url}/authorizations/{authorization_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Authorization(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OauthAuthorizationsDeleteAuthorization(self, authorization_id:int):
        """**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
        
        https://docs.github.com/rest/reference/oauth-authorizations#delete-an-authorization
        /authorizations/{authorization_id}
        
        arguments:
        authorization_id -- authorization_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/authorizations/{authorization_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodesOfConductGetAllCodesOfConduct(self, ):
        """
        
        https://docs.github.com/rest/reference/codes-of-conduct#get-all-codes-of-conduct
        /codes_of_conduct
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/codes_of_conduct", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CodeOfConduct(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodesOfConductGetConductCode(self, key:str):
        """
        
        https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct
        /codes_of_conduct/{key}
        
        arguments:
        key -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/codes_of_conduct/{key}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CodeOfConduct(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodesOfConductGetForRepo(self, owner:str, repo:str):
        """Returns the contents of the repository's code of conduct file, if one is detected.

A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
        
        https://docs.github.com/rest/reference/codes-of-conduct#get-the-code-of-conduct-for-a-repository
        /repos/{owner}/{repo}/community/code_of_conduct
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/community/code_of_conduct", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CodeOfConduct(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EmojisGet(self, ):
        """Lists all the emojis available to use on GitHub.
        
        https://docs.github.com/rest/reference/emojis#get-emojis
        /emojis
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/emojis", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminGetGithubActionsPermissionsEnterprise(self, enterprise:str):
        """Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#get-github-actions-permissions-for-an-enterprise
        /enterprises/{enterprise}/actions/permissions
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/permissions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsEnterprisePermissions(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminSetGithubActionsPermissionsEnterprise(self, enterprise:str,enabled_organizations:str, allowed_actions:str=None):
        """Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#set-github-actions-permissions-for-an-enterprise
        /enterprises/{enterprise}/actions/permissions
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        enabled_organizations -- 
        allowed_actions -- 
        

        """
    
        data = {
        'enabled_organizations': enabled_organizations,
        'allowed_actions': allowed_actions,
        
        }
        
        
        r = requests.put(f"{self._url}/enterprises/{enterprise}/actions/permissions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(self, enterprise:str,per_page=30, page=1):
        """Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#list-selected-organizations-enabled-for-github-actions-in-an-enterprise
        /enterprises/{enterprise}/actions/permissions/organizations
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/permissions/organizations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(self, enterprise:str,selected_organization_ids:list):
        """Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#set-selected-organizations-enabled-for-github-actions-in-an-enterprise
        /enterprises/{enterprise}/actions/permissions/organizations
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        selected_organization_ids -- List of organization IDs to enable for GitHub Actions.
        

        """
    
        data = {
        'selected_organization_ids': selected_organization_ids,
        
        }
        
        
        r = requests.put(f"{self._url}/enterprises/{enterprise}/actions/permissions/organizations", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(self, enterprise:str, org_id:int):
        """Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#enable-a-selected-organization-for-github-actions-in-an-enterprise
        /enterprises/{enterprise}/actions/permissions/organizations/{org_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        org_id -- Unique identifier of an organization.
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/enterprises/{enterprise}/actions/permissions/organizations/{org_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(self, enterprise:str, org_id:int):
        """Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#disable-a-selected-organization-for-github-actions-in-an-enterprise
        /enterprises/{enterprise}/actions/permissions/organizations/{org_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        org_id -- Unique identifier of an organization.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/enterprises/{enterprise}/actions/permissions/organizations/{org_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminGetAllowedActionsEnterprise(self, enterprise:str):
        """Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#get-allowed-actions-for-an-enterprise
        /enterprises/{enterprise}/actions/permissions/selected-actions
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/permissions/selected-actions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SelectedActions(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminSetAllowedActionsEnterprise(self, enterprise:str,github_owned_allowed:bool=None, verified_allowed:bool=None, patterns_allowed:list=None):
        """Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#set-allowed-actions-for-an-enterprise
        /enterprises/{enterprise}/actions/permissions/selected-actions
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        github_owned_allowed -- Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
        verified_allowed -- Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators.
        patterns_allowed -- Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
        

        """
    
        data = {
        'github_owned_allowed': github_owned_allowed,
        'verified_allowed': verified_allowed,
        'patterns_allowed': patterns_allowed,
        
        }
        
        
        r = requests.put(f"{self._url}/enterprises/{enterprise}/actions/permissions/selected-actions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise(self, enterprise:str,per_page=30, page=1):
        """Lists all self-hosted runner groups for an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runner-groups-for-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/runner-groups", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(self, enterprise:str,name:str, visibility:str=None, selected_organization_ids:list=None, runners:list=None):
        """Creates a new self-hosted runner group for an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#create-self-hosted-runner-group-for-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        name -- Name of the runner group.
        visibility -- Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
        selected_organization_ids -- List of organization IDs that can access the runner group.
        runners -- List of runner IDs to add to the runner group.
        

        """
    
        data = {
        'name': name,
        'visibility': visibility,
        'selected_organization_ids': selected_organization_ids,
        'runners': runners,
        
        }
        
        
        r = requests.post(f"{self._url}/enterprises/{enterprise}/actions/runner-groups", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return RunnerGroupsEnterprise(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise(self, enterprise:str, runner_group_id:int):
        """Gets a specific self-hosted runner group for an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-group-for-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return RunnerGroupsEnterprise(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(self, enterprise:str, runner_group_id:int,name:str=None, visibility:str='all'):
        """Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#update-a-self-hosted-runner-group-for-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        name -- Name of the runner group.
        visibility -- Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
        

        """
    
        data = {
        'name': name,
        'visibility': visibility,
        
        }
        
        
        r = requests.patch(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return RunnerGroupsEnterprise(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(self, enterprise:str, runner_group_id:int):
        """Deletes a self-hosted runner group for an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#delete-a-self-hosted-runner-group-from-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(self, enterprise:str, runner_group_id:int,per_page=30, page=1):
        """Lists the organizations with access to a self-hosted runner group.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(self, enterprise:str, runner_group_id:int,selected_organization_ids:list):
        """Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        selected_organization_ids -- List of organization IDs that can access the runner group.
        

        """
    
        data = {
        'selected_organization_ids': selected_organization_ids,
        
        }
        
        
        r = requests.put(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(self, enterprise:str, runner_group_id:int, org_id:int):
        """Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        org_id -- Unique identifier of an organization.
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(self, enterprise:str, runner_group_id:int, org_id:int):
        """Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        org_id -- Unique identifier of an organization.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise(self, enterprise:str, runner_group_id:int,per_page=30, page=1):
        """Lists the self-hosted runners that are in a specific enterprise group.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-in-a-group-for-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(self, enterprise:str, runner_group_id:int,runners:list):
        """Replaces the list of self-hosted runners that are part of an enterprise runner group.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#set-self-hosted-runners-in-a-group-for-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        runners -- List of runner IDs to add to the runner group.
        

        """
    
        data = {
        'runners': runners,
        
        }
        
        
        r = requests.put(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(self, enterprise:str, runner_group_id:int, runner_id:int):
        """Adds a self-hosted runner to a runner group configured in an enterprise.

You must authenticate using an access token with the `admin:enterprise`
scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#add-a-self-hosted-runner-to-a-group-for-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        runner_id -- Unique identifier of the self-hosted runner.
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(self, enterprise:str, runner_group_id:int, runner_id:int):
        """Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#remove-a-self-hosted-runner-from-a-group-for-an-enterprise
        /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_group_id -- Unique identifier of the self-hosted runner group.
        runner_id -- Unique identifier of the self-hosted runner.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminListSelfHostedRunnersForEnterprise(self, enterprise:str,per_page=30, page=1):
        """Lists all self-hosted runners configured for an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-for-an-enterprise
        /enterprises/{enterprise}/actions/runners
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/runners", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return EnterpriseAdminListSelfHostedRunnersForEnterpriseSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminListRunnerApplicationsForEnterprise(self, enterprise:str):
        """Lists binaries for the runner application that you can download and run.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#list-runner-applications-for-an-enterprise
        /enterprises/{enterprise}/actions/runners/downloads
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/runners/downloads", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and RunnerApplication(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminCreateRegistrationTokenForEnterprise(self, enterprise:str):
        """Returns a token that you can pass to the `config` script. The token expires after one hour.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

#### Example using registration token

Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.

```
./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
```
        
        https://docs.github.com/rest/reference/enterprise-admin#create-a-registration-token-for-an-enterprise
        /enterprises/{enterprise}/actions/runners/registration-token
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/enterprises/{enterprise}/actions/runners/registration-token", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return AuthenticationToken(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminCreateRemoveTokenForEnterprise(self, enterprise:str):
        """Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

#### Example using remove token

To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
endpoint.

```
./config.sh remove --token TOKEN
```
        
        https://docs.github.com/rest/reference/enterprise-admin#create-a-remove-token-for-an-enterprise
        /enterprises/{enterprise}/actions/runners/remove-token
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/enterprises/{enterprise}/actions/runners/remove-token", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return AuthenticationToken(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminGetSelfHostedRunnerForEnterprise(self, enterprise:str, runner_id:int):
        """Gets a specific self-hosted runner configured in an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-for-an-enterprise
        /enterprises/{enterprise}/actions/runners/{runner_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_id -- Unique identifier of the self-hosted runner.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/actions/runners/{runner_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SelfHostedRunners(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise(self, enterprise:str, runner_id:int):
        """Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/enterprise-admin#delete-self-hosted-runner-from-an-enterprise
        /enterprises/{enterprise}/actions/runners/{runner_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        runner_id -- Unique identifier of the self-hosted runner.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/enterprises/{enterprise}/actions/runners/{runner_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminGetAuditLog(self, enterprise:str,phrase=None, include='None', after=None, before=None, order='None', page=1, per_page=30):
        """Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
        
        https://docs.github.com/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise
        /enterprises/{enterprise}/audit-log
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        phrase -- A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
        include -- The event types to include:

- `web` - returns web (non-Git) events
- `git` - returns Git events
- `all` - returns both web and Git events

The default is `web`.
        after -- A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
        before -- A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
        order -- The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.

The default is `desc`.
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if phrase is not None:
            data['phrase'] = phrase
        if include is not None:
            data['include'] = include
        if after is not None:
            data['after'] = after
        if before is not None:
            data['before'] = before
        if order is not None:
            data['order'] = order
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/audit-log", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            json = r.json()
            return json and [ entry and AuditLogEvent(**AuditLogEvent.patchEntry(entry)) for entry in json ]
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminListProvisionedGroupsEnterprise(self, enterprise:str,startIndex=None, count=None, filter=None, excludedAttributes=None):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        
        https://docs.github.com/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise
        /scim/v2/enterprises/{enterprise}/Groups
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        startIndex -- Used for pagination: the index of the first result to return.
        count -- Used for pagination: the number of results to return.
        filter -- filter results
        excludedAttributes -- attributes to exclude
        
        """
        
        data = {}
        if startIndex is not None:
            data['startIndex'] = startIndex
        if count is not None:
            data['count'] = count
        if filter is not None:
            data['filter'] = filter
        if excludedAttributes is not None:
            data['excludedAttributes'] = excludedAttributes
        
        
        r = requests.get(f"{self._url}/scim/v2/enterprises/{enterprise}/Groups", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ScimGroupListEnterprise(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminProvisionAndInviteEnterpriseGroup(self, enterprise:str,displayName:str, schemas:list, members:list=None):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
        
        https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-group-and-invite-users
        /scim/v2/enterprises/{enterprise}/Groups
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        displayName -- The name of the SCIM group. This must match the GitHub organization that the group maps to.
        schemas -- The SCIM schema URIs.
        members -- 
        

        """
    
        data = {
        'displayName': displayName,
        'schemas': schemas,
        'members': members,
        
        }
        
        
        r = requests.post(f"{self._url}/scim/v2/enterprises/{enterprise}/Groups", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ScimEnterpriseGroup(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminGetProvisioningInformationForEnterpriseGroup(self, enterprise:str, scim_group_id:str,excludedAttributes=None):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        
        https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group
        /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        scim_group_id -- Identifier generated by the GitHub SCIM endpoint.
        excludedAttributes -- Attributes to exclude.
        
        """
        
        data = {}
        if excludedAttributes is not None:
            data['excludedAttributes'] = excludedAttributes
        
        
        r = requests.get(f"{self._url}/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ScimEnterpriseGroup(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminSetInformationForProvisionedEnterpriseGroup(self, enterprise:str, scim_group_id:str,displayName:str, schemas:list, members:list=None):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
        
        https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-group
        /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        scim_group_id -- Identifier generated by the GitHub SCIM endpoint.
        displayName -- The name of the SCIM group. This must match the GitHub organization that the group maps to.
        schemas -- The SCIM schema URIs.
        members -- 
        

        """
    
        data = {
        'displayName': displayName,
        'schemas': schemas,
        'members': members,
        
        }
        
        
        r = requests.put(f"{self._url}/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ScimEnterpriseGroup(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminUpdateAttributeForEnterpriseGroup(self, enterprise:str, scim_group_id:str,Operations:list, schemas:list):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
        
        https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-group
        /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        scim_group_id -- Identifier generated by the GitHub SCIM endpoint.
        Operations -- Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
        schemas -- The SCIM schema URIs.
        

        """
    
        data = {
        'Operations': Operations,
        'schemas': schemas,
        
        }
        
        
        r = requests.patch(f"{self._url}/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ScimEnterpriseGroup(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminDeleteScimGroupFromEnterprise(self, enterprise:str, scim_group_id:str):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        
        https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-group-from-an-enterprise
        /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        scim_group_id -- Identifier generated by the GitHub SCIM endpoint.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminListProvisionedIdentitiesEnterprise(self, enterprise:str,startIndex=None, count=None, filter=None):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Retrieves a paginated list of all provisioned enterprise members, including pending invitations.

When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
  - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
  - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.

The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:

1. The user is granted access by the IdP and is not a member of the GitHub enterprise.

1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.

1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
   - If the user signs in, their GitHub account is linked to this entry.
   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
        
        https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise
        /scim/v2/enterprises/{enterprise}/Users
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        startIndex -- Used for pagination: the index of the first result to return.
        count -- Used for pagination: the number of results to return.
        filter -- filter results
        
        """
        
        data = {}
        if startIndex is not None:
            data['startIndex'] = startIndex
        if count is not None:
            data['count'] = count
        if filter is not None:
            data['filter'] = filter
        
        
        r = requests.get(f"{self._url}/scim/v2/enterprises/{enterprise}/Users", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ScimUserListEnterprise(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminProvisionAndInviteEnterpriseUser(self, enterprise:str,emails:list, name:dict, userName:str, schemas:list, groups:list=None):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Provision enterprise membership for a user, and send organization invitation emails to the email address.

You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
        
        https://docs.github.com/rest/reference/enterprise-admin#provision-and-invite-a-scim-enterprise-user
        /scim/v2/enterprises/{enterprise}/Users
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        emails -- List of user emails.
        name -- 
        userName -- The username for the user.
        schemas -- The SCIM schema URIs.
        groups -- List of SCIM group IDs the user is a member of.
        

        """
    
        data = {
        'emails': emails,
        'name': name,
        'userName': userName,
        'schemas': schemas,
        'groups': groups,
        
        }
        
        
        r = requests.post(f"{self._url}/scim/v2/enterprises/{enterprise}/Users", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ScimEnterpriseUser(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminGetProvisioningInformationForEnterpriseUser(self, enterprise:str, scim_user_id:str):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        
        https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user
        /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        scim_user_id -- scim_user_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ScimEnterpriseUser(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminSetInformationForProvisionedEnterpriseUser(self, enterprise:str, scim_user_id:str,emails:list, name:dict, userName:str, schemas:list, groups:list=None):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.

You must at least provide the required values for the user: `userName`, `name`, and `emails`.

**Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
        
        https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user
        /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        scim_user_id -- scim_user_id parameter
        emails -- List of user emails.
        name -- 
        userName -- The username for the user.
        schemas -- The SCIM schema URIs.
        groups -- List of SCIM group IDs the user is a member of.
        

        """
    
        data = {
        'emails': emails,
        'name': name,
        'userName': userName,
        'schemas': schemas,
        'groups': groups,
        
        }
        
        
        r = requests.put(f"{self._url}/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ScimEnterpriseUser(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminUpdateAttributeForEnterpriseUser(self, enterprise:str, scim_user_id:str,Operations:list, schemas:list):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).

**Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.

**Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.

```
{
  "Operations":[{
    "op":"replace",
    "value":{
      "active":false
    }
  }]
}
```
        
        https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-user
        /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        scim_user_id -- scim_user_id parameter
        Operations -- Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
        schemas -- The SCIM schema URIs.
        

        """
    
        data = {
        'Operations': Operations,
        'schemas': schemas,
        
        }
        
        
        r = requests.patch(f"{self._url}/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ScimEnterpriseUser(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def EnterpriseAdminDeleteUserFromEnterprise(self, enterprise:str, scim_user_id:str):
        """**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
        
        https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise
        /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        scim_user_id -- scim_user_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetGithubActionsBillingGhe(self, enterprise:str):
        """Gets the summary of the free and paid GitHub Actions minutes used.

Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".

The authenticated user must be an enterprise admin.
        
        https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-enterprise
        /enterprises/{enterprise}/settings/billing/actions
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/settings/billing/actions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetGithubPackagesBillingGhe(self, enterprise:str):
        """Gets the free and paid storage used for GitHub Packages in gigabytes.

Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."

The authenticated user must be an enterprise admin.
        
        https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise
        /enterprises/{enterprise}/settings/billing/packages
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/settings/billing/packages", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PackagesBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetSharedStorageBillingGhe(self, enterprise:str):
        """Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.

Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."

The authenticated user must be an enterprise admin.
        
        https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-enterprise
        /enterprises/{enterprise}/settings/billing/shared-storage
        
        arguments:
        enterprise -- The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/enterprises/{enterprise}/settings/billing/shared-storage", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CombinedBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetGithubActionsBillingOrg(self, org:str):
        """Gets the summary of the free and paid GitHub Actions minutes used.

Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".

Access tokens must have the `repo` or `admin:org` scope.
        
        https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization
        /orgs/{org}/settings/billing/actions
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/settings/billing/actions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetGithubPackagesBillingOrg(self, org:str):
        """Gets the free and paid storage used for GitHub Packages in gigabytes.

Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."

Access tokens must have the `repo` or `admin:org` scope.
        
        https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization
        /orgs/{org}/settings/billing/packages
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/settings/billing/packages", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PackagesBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetSharedStorageBillingOrg(self, org:str):
        """Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.

Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."

Access tokens must have the `repo` or `admin:org` scope.
        
        https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization
        /orgs/{org}/settings/billing/shared-storage
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/settings/billing/shared-storage", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CombinedBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetGithubActionsBillingUser(self, username:str):
        """Gets the summary of the free and paid GitHub Actions minutes used.

Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".

Access tokens must have the `user` scope.
        
        https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user
        /users/{username}/settings/billing/actions
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}/settings/billing/actions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetGithubPackagesBillingUser(self, username:str):
        """Gets the free and paid storage used for GitHub Packages in gigabytes.

Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."

Access tokens must have the `user` scope.
        
        https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user
        /users/{username}/settings/billing/packages
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}/settings/billing/packages", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PackagesBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def BillingGetSharedStorageBillingUser(self, username:str):
        """Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.

Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."

Access tokens must have the `user` scope.
        
        https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user
        /users/{username}/settings/billing/shared-storage
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}/settings/billing/shared-storage", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CombinedBillingUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListPublicEvents(self, per_page=30, page=1):
        """We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
        
        https://docs.github.com/rest/reference/activity#list-public-events
        /events
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/events", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityGetFeeds(self, ):
        """GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:

*   **Timeline**: The GitHub global public timeline
*   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
*   **Current user public**: The public timeline for the authenticated user
*   **Current user**: The private timeline for the authenticated user
*   **Current user actor**: The private timeline for activity created by the authenticated user
*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.

**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
        
        https://docs.github.com/rest/reference/activity#get-feeds
        /feeds
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/feeds", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Feed(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListPublicEventsForRepoNetwork(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories
        /networks/{owner}/{repo}/events
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/networks/{owner}/{repo}/events", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 301:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListNotificationsForAuthenticatedUser(self, all=None, participating=None, since=None, before=None, per_page=30, page=1):
        """List all notifications for the current user, sorted by most recently updated.
        
        https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user
        /notifications
        
        arguments:
        all -- If `true`, show notifications marked as read.
        participating -- If `true`, only shows notifications in which the user is directly participating or mentioned.
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        before -- Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if all is not None:
            data['all'] = all
        if participating is not None:
            data['participating'] = participating
        if since is not None:
            data['since'] = since
        if before is not None:
            data['before'] = before
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/notifications", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Thread(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityMarkNotificationsAsRead(self, last_read_at:datetime=None, read:bool=None):
        """Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
        
        https://docs.github.com/rest/reference/activity#mark-notifications-as-read
        /notifications
        
        arguments:
        last_read_at -- Describes the last point that notifications were checked.
        read -- Whether the notification has been read.
        

        """
    
        data = {
        'last_read_at': last_read_at,
        'read': read,
        
        }
        
        
        r = requests.put(f"{self._url}/notifications", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return ActivityMarkNotificationsAsRead202(**r.json())
            
        if r.status_code == 205:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActivityGetThread(self, thread_id:int):
        """
        
        https://docs.github.com/rest/reference/activity#get-a-thread
        /notifications/threads/{thread_id}
        
        arguments:
        thread_id -- thread_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/notifications/threads/{thread_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Thread(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityMarkThreadAsRead(self, thread_id:int):
        """
        
        https://docs.github.com/rest/reference/activity#mark-a-thread-as-read
        /notifications/threads/{thread_id}
        
        arguments:
        thread_id -- thread_id parameter
        

        """
    
        data = {
        
        }
        
        
        r = requests.patch(f"{self._url}/notifications/threads/{thread_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 205:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActivityGetThreadSubscriptionForAuthenticatedUser(self, thread_id:int):
        """This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).

Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
        
        https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user
        /notifications/threads/{thread_id}/subscription
        
        arguments:
        thread_id -- thread_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/notifications/threads/{thread_id}/subscription", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ThreadSubscription(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivitySetThreadSubscription(self, thread_id:int,ignored:bool=False):
        """If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.

You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.

Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
        
        https://docs.github.com/rest/reference/activity#set-a-thread-subscription
        /notifications/threads/{thread_id}/subscription
        
        arguments:
        thread_id -- thread_id parameter
        ignored -- Whether to block all notifications from a thread.
        

        """
    
        data = {
        'ignored': ignored,
        
        }
        
        
        r = requests.put(f"{self._url}/notifications/threads/{thread_id}/subscription", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ThreadSubscription(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActivityDeleteThreadSubscription(self, thread_id:int):
        """Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
        
        https://docs.github.com/rest/reference/activity#delete-a-thread-subscription
        /notifications/threads/{thread_id}/subscription
        
        arguments:
        thread_id -- thread_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/notifications/threads/{thread_id}/subscription", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListPublicOrgEvents(self, org:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/activity#list-public-organization-events
        /orgs/{org}/events
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/events", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListRepoEvents(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/activity#list-repository-events
        /repos/{owner}/{repo}/events
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/events", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListRepoNotificationsForAuthenticatedUser(self, owner:str, repo:str,all=None, participating=None, since=None, before=None, per_page=30, page=1):
        """List all notifications for the current user.
        
        https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user
        /repos/{owner}/{repo}/notifications
        
        arguments:
        owner -- 
        repo -- 
        all -- If `true`, show notifications marked as read.
        participating -- If `true`, only shows notifications in which the user is directly participating or mentioned.
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        before -- Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if all is not None:
            data['all'] = all
        if participating is not None:
            data['participating'] = participating
        if since is not None:
            data['since'] = since
        if before is not None:
            data['before'] = before
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/notifications", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Thread(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityMarkRepoNotificationsAsRead(self, owner:str, repo:str,last_read_at:datetime=None):
        """Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
        
        https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read
        /repos/{owner}/{repo}/notifications
        
        arguments:
        owner -- 
        repo -- 
        last_read_at -- Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
        

        """
    
        data = {
        'last_read_at': last_read_at,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/notifications", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return ActivityMarkRepoNotificationsAsRead202(**r.json())
            
        if r.status_code == 205:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActivityListStargazersForRepo(self, owner:str, repo:str,per_page=30, page=1):
        """Lists the people that have starred the repository.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        
        https://docs.github.com/rest/reference/activity#list-stargazers
        /repos/{owner}/{repo}/stargazers
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/stargazers", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListWatchersForRepo(self, owner:str, repo:str,per_page=30, page=1):
        """Lists the people watching the specified repository.
        
        https://docs.github.com/rest/reference/activity#list-watchers
        /repos/{owner}/{repo}/subscribers
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/subscribers", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityGetRepoSubscription(self, owner:str, repo:str):
        """
        
        https://docs.github.com/rest/reference/activity#get-a-repository-subscription
        /repos/{owner}/{repo}/subscription
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/subscription", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return RepositoryInvitation(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivitySetRepoSubscription(self, owner:str, repo:str,subscribed:bool=None, ignored:bool=None):
        """If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
        
        https://docs.github.com/rest/reference/activity#set-a-repository-subscription
        /repos/{owner}/{repo}/subscription
        
        arguments:
        owner -- 
        repo -- 
        subscribed -- Determines if notifications should be received from this repository.
        ignored -- Determines if all notifications should be blocked from this repository.
        

        """
    
        data = {
        'subscribed': subscribed,
        'ignored': ignored,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/subscription", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return RepositoryInvitation(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActivityDeleteRepoSubscription(self, owner:str, repo:str):
        """This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
        
        https://docs.github.com/rest/reference/activity#delete-a-repository-subscription
        /repos/{owner}/{repo}/subscription
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/subscription", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListReposStarredByAuthenticatedUser(self, sort='created', direction='desc', per_page=30, page=1):
        """Lists repositories the authenticated user has starred.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        
        https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user
        /user/starred
        
        arguments:
        sort -- One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
        direction -- One of `asc` (ascending) or `desc` (descending).
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/starred", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Repository(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityCheckRepoIsStarredByAuthenticatedUser(self, owner:str, repo:str):
        """
        
        https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user
        /user/starred/{owner}/{repo}
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/starred/{owner}/{repo}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityStarRepoForAuthenticatedUser(self, owner:str, repo:str):
        """Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        
        https://docs.github.com/rest/reference/activity#star-a-repository-for-the-authenticated-user
        /user/starred/{owner}/{repo}
        
        arguments:
        owner -- 
        repo -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/user/starred/{owner}/{repo}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActivityUnstarRepoForAuthenticatedUser(self, owner:str, repo:str):
        """
        
        https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user
        /user/starred/{owner}/{repo}
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/starred/{owner}/{repo}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListWatchedReposForAuthenticatedUser(self, per_page=30, page=1):
        """Lists repositories the authenticated user is watching.
        
        https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user
        /user/subscriptions
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/subscriptions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListEventsForAuthenticatedUser(self, username:str,per_page=30, page=1):
        """If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
        
        https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user
        /users/{username}/events
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/events", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListOrgEventsForAuthenticatedUser(self, username:str, org:str,per_page=30, page=1):
        """This is the user's organization dashboard. You must be authenticated as the user to view this.
        
        https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user
        /users/{username}/events/orgs/{org}
        
        arguments:
        username -- 
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/events/orgs/{org}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListPublicEventsForUser(self, username:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/activity#list-public-events-for-a-user
        /users/{username}/events/public
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/events/public", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListReceivedEventsForUser(self, username:str,per_page=30, page=1):
        """These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
        
        https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user
        /users/{username}/received_events
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/received_events", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListReceivedPublicEventsForUser(self, username:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user
        /users/{username}/received_events/public
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/received_events/public", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Event(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListReposStarredByUser(self, username:str,sort='created', direction='desc', per_page=30, page=1):
        """Lists repositories a user has starred.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        
        https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user
        /users/{username}/starred
        
        arguments:
        username -- 
        sort -- One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
        direction -- One of `asc` (ascending) or `desc` (descending).
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/starred", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        
        raise UnexpectedResult(r.status_code)

    def ActivityListReposWatchedByUser(self, username:str,per_page=30, page=1):
        """Lists repositories a user is watching.
        
        https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user
        /users/{username}/subscriptions
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/subscriptions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def GistsList(self, since=None, per_page=30, page=1):
        """Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
        
        https://docs.github.com/rest/reference/gists#list-gists-for-the-authenticated-user
        /gists
        
        arguments:
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/gists", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and BaseGist(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsCreate(self, files:object, description:str=None, public=None):
        """Allows you to add a new gist with one or more files.

**Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
        
        https://docs.github.com/rest/reference/gists#create-a-gist
        /gists
        
        arguments:
        files -- Names and content for the files that make up the gist
        description -- Description of the gist
        public -- 
        

        """
    
        data = {
        'files': files,
        'description': description,
        'public': public,
        
        }
        
        
        r = requests.post(f"{self._url}/gists", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GistSimple(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GistsListPublic(self, since=None, per_page=30, page=1):
        """List public gists sorted by most recently updated to least recently updated.

Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
        
        https://docs.github.com/rest/reference/gists#list-public-gists
        /gists/public
        
        arguments:
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/gists/public", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and BaseGist(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsListStarred(self, since=None, per_page=30, page=1):
        """List the authenticated user's starred gists:
        
        https://docs.github.com/rest/reference/gists#list-starred-gists
        /gists/starred
        
        arguments:
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/gists/starred", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and BaseGist(**entry) for entry in r.json() ]
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsGet(self, gist_id:str):
        """
        
        https://docs.github.com/rest/reference/gists#get-a-gist
        /gists/{gist_id}
        
        arguments:
        gist_id -- gist_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/gists/{gist_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GistSimple(**r.json())
            
        if r.status_code == 403:
            return Forbidden_gist(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsUpdate(self, gist_id:str,description:str=None, files:object=None):
        """Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
        
        https://docs.github.com/rest/reference/gists/#update-a-gist
        /gists/{gist_id}
        
        arguments:
        gist_id -- gist_id parameter
        description -- Description of the gist
        files -- Names of files to be updated
        

        """
    
        data = {
        'description': description,
        'files': files,
        
        }
        
        
        r = requests.patch(f"{self._url}/gists/{gist_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return GistSimple(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GistsDelete(self, gist_id:str):
        """
        
        https://docs.github.com/rest/reference/gists#delete-a-gist
        /gists/{gist_id}
        
        arguments:
        gist_id -- gist_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/gists/{gist_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsListComments(self, gist_id:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/gists#list-gist-comments
        /gists/{gist_id}/comments
        
        arguments:
        gist_id -- gist_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/gists/{gist_id}/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and GistComment(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsCreateComment(self, gist_id:str,body:str):
        """
        
        https://docs.github.com/rest/reference/gists#create-a-gist-comment
        /gists/{gist_id}/comments
        
        arguments:
        gist_id -- gist_id parameter
        body -- The comment text.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/gists/{gist_id}/comments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GistComment(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GistsGetComment(self, gist_id:str, comment_id:int):
        """
        
        https://docs.github.com/rest/reference/gists#get-a-gist-comment
        /gists/{gist_id}/comments/{comment_id}
        
        arguments:
        gist_id -- gist_id parameter
        comment_id -- comment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/gists/{gist_id}/comments/{comment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GistComment(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return Forbidden_gist(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsUpdateComment(self, gist_id:str, comment_id:int,body:str):
        """
        
        https://docs.github.com/rest/reference/gists#update-a-gist-comment
        /gists/{gist_id}/comments/{comment_id}
        
        arguments:
        gist_id -- gist_id parameter
        comment_id -- comment_id parameter
        body -- The comment text.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.patch(f"{self._url}/gists/{gist_id}/comments/{comment_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return GistComment(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GistsDeleteComment(self, gist_id:str, comment_id:int):
        """
        
        https://docs.github.com/rest/reference/gists#delete-a-gist-comment
        /gists/{gist_id}/comments/{comment_id}
        
        arguments:
        gist_id -- gist_id parameter
        comment_id -- comment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/gists/{gist_id}/comments/{comment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsListCommits(self, gist_id:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/gists#list-gist-commits
        /gists/{gist_id}/commits
        
        arguments:
        gist_id -- gist_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/gists/{gist_id}/commits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and GistCommit(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsListForks(self, gist_id:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/gists#list-gist-forks
        /gists/{gist_id}/forks
        
        arguments:
        gist_id -- gist_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/gists/{gist_id}/forks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and GistSimple(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsFork(self, gist_id:str):
        """**Note**: This was previously `/gists/:gist_id/fork`.
        
        https://docs.github.com/rest/reference/gists#fork-a-gist
        /gists/{gist_id}/forks
        
        arguments:
        gist_id -- gist_id parameter
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/gists/{gist_id}/forks", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return BaseGist(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GistsCheckIsStarred(self, gist_id:str):
        """
        
        https://docs.github.com/rest/reference/gists#check-if-a-gist-is-starred
        /gists/{gist_id}/star
        
        arguments:
        gist_id -- gist_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/gists/{gist_id}/star", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return GistsCheckIsStarredNotFound(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsStar(self, gist_id:str):
        """Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        
        https://docs.github.com/rest/reference/gists#star-a-gist
        /gists/{gist_id}/star
        
        arguments:
        gist_id -- gist_id parameter
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/gists/{gist_id}/star", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GistsUnstar(self, gist_id:str):
        """
        
        https://docs.github.com/rest/reference/gists#unstar-a-gist
        /gists/{gist_id}/star
        
        arguments:
        gist_id -- gist_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/gists/{gist_id}/star", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsGetRevision(self, gist_id:str, sha:str):
        """
        
        https://docs.github.com/rest/reference/gists#get-a-gist-revision
        /gists/{gist_id}/{sha}
        
        arguments:
        gist_id -- gist_id parameter
        sha -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/gists/{gist_id}/{sha}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GistSimple(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GistsListForUser(self, username:str,since=None, per_page=30, page=1):
        """Lists public gists for the specified user:
        
        https://docs.github.com/rest/reference/gists#list-gists-for-a-user
        /users/{username}/gists
        
        arguments:
        username -- 
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/gists", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and BaseGist(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GitignoreGetAllTemplates(self, ):
        """List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
        
        https://docs.github.com/rest/reference/gitignore#get-all-gitignore-templates
        /gitignore/templates
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/gitignore/templates", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GitignoreGetTemplate(self, name:str):
        """The API also allows fetching the source of a single template.
Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
        
        https://docs.github.com/rest/reference/gitignore#get-a-gitignore-template
        /gitignore/templates/{name}
        
        arguments:
        name -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/gitignore/templates/{name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GitignoreTemplate(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesList(self, filter='assigned', state='open', labels=None, sort='created', direction='desc', since=None, collab=None, orgs=None, owned=None, pulls=None, per_page=30, page=1):
        """List issues assigned to the authenticated user across all visible repositories including owned repositories, member
repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
necessarily assigned to you.


**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        
        https://docs.github.com/rest/reference/issues#list-issues-assigned-to-the-authenticated-user
        /issues
        
        arguments:
        filter -- Indicates which sorts of issues to return. Can be one of:  
\* `assigned`: Issues assigned to you  
\* `created`: Issues created by you  
\* `mentioned`: Issues mentioning you  
\* `subscribed`: Issues you're subscribed to updates for  
\* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
        state -- Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
        labels -- A list of comma separated label names. Example: `bug,ui,@high`
        sort -- What to sort results by. Can be either `created`, `updated`, `comments`.
        direction -- One of `asc` (ascending) or `desc` (descending).
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        collab -- 
        orgs -- 
        owned -- 
        pulls -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if filter is not None:
            data['filter'] = filter
        if state is not None:
            data['state'] = state
        if labels is not None:
            data['labels'] = labels
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if since is not None:
            data['since'] = since
        if collab is not None:
            data['collab'] = collab
        if orgs is not None:
            data['orgs'] = orgs
        if owned is not None:
            data['owned'] = owned
        if pulls is not None:
            data['pulls'] = pulls
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/issues", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Issue(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListForOrg(self, org:str,filter='assigned', state='open', labels=None, sort='created', direction='desc', since=None, per_page=30, page=1):
        """List issues in an organization assigned to the authenticated user.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        
        https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user
        /orgs/{org}/issues
        
        arguments:
        org -- 
        filter -- Indicates which sorts of issues to return. Can be one of:  
\* `assigned`: Issues assigned to you  
\* `created`: Issues created by you  
\* `mentioned`: Issues mentioning you  
\* `subscribed`: Issues you're subscribed to updates for  
\* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
        state -- Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
        labels -- A list of comma separated label names. Example: `bug,ui,@high`
        sort -- What to sort results by. Can be either `created`, `updated`, `comments`.
        direction -- One of `asc` (ascending) or `desc` (descending).
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if filter is not None:
            data['filter'] = filter
        if state is not None:
            data['state'] = state
        if labels is not None:
            data['labels'] = labels
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/issues", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Issue(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListAssignees(self, owner:str, repo:str,per_page=30, page=1):
        """Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
        
        https://docs.github.com/rest/reference/issues#list-assignees
        /repos/{owner}/{repo}/assignees
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/assignees", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesCheckUserCanBeAssigned(self, owner:str, repo:str, assignee:str):
        """Checks if a user has permission to be assigned to an issue in this repository.

If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.

Otherwise a `404` status code is returned.
        
        https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned
        /repos/{owner}/{repo}/assignees/{assignee}
        
        arguments:
        owner -- 
        repo -- 
        assignee -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/assignees/{assignee}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListForRepo(self, owner:str, repo:str,milestone=None, state='open', assignee=None, creator=None, mentioned=None, labels=None, sort='created', direction='desc', since=None, per_page=30, page=1):
        """List issues in a repository.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        
        https://docs.github.com/rest/reference/issues#list-repository-issues
        /repos/{owner}/{repo}/issues
        
        arguments:
        owner -- 
        repo -- 
        milestone -- If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
        state -- Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
        assignee -- Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
        creator -- The user that created the issue.
        mentioned -- A user that's mentioned in the issue.
        labels -- A list of comma separated label names. Example: `bug,ui,@high`
        sort -- What to sort results by. Can be either `created`, `updated`, `comments`.
        direction -- One of `asc` (ascending) or `desc` (descending).
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if milestone is not None:
            data['milestone'] = milestone
        if state is not None:
            data['state'] = state
        if assignee is not None:
            data['assignee'] = assignee
        if creator is not None:
            data['creator'] = creator
        if mentioned is not None:
            data['mentioned'] = mentioned
        if labels is not None:
            data['labels'] = labels
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and IssueSimple(**entry) for entry in r.json() ]
            
        if r.status_code == 301:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesCreate(self, owner:str, repo:str,title, body:str=None, assignee:str=None, milestone=None, labels=None, assignees:list=None):
        """Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/issues#create-an-issue
        /repos/{owner}/{repo}/issues
        
        arguments:
        owner -- 
        repo -- 
        title -- The title of the issue.
        body -- The contents of the issue.
        assignee -- Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
        milestone -- 
        labels -- Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
        assignees -- Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
        

        """
    
        data = {
        'title': title,
        'body': body,
        'assignee': assignee,
        'milestone': milestone,
        'labels': labels,
        'assignees': assignees,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/issues", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Issue(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesListCommentsForRepo(self, owner:str, repo:str,sort='created', direction='None', since=None, per_page=30, page=1):
        """By default, Issue Comments are ordered by ascending ID.
        
        https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository
        /repos/{owner}/{repo}/issues/comments
        
        arguments:
        owner -- 
        repo -- 
        sort -- One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
        direction -- Either `asc` or `desc`. Ignored without the `sort` parameter.
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and IssueComment(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesGetComment(self, owner:str, repo:str, comment_id:int):
        """
        
        https://docs.github.com/rest/reference/issues#get-an-issue-comment
        /repos/{owner}/{repo}/issues/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/comments/{comment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return IssueComment(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesUpdateComment(self, owner:str, repo:str, comment_id:int,body:str):
        """
        
        https://docs.github.com/rest/reference/issues#update-an-issue-comment
        /repos/{owner}/{repo}/issues/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        body -- The contents of the comment.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/issues/comments/{comment_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return IssueComment(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesDeleteComment(self, owner:str, repo:str, comment_id:int):
        """
        
        https://docs.github.com/rest/reference/issues#delete-an-issue-comment
        /repos/{owner}/{repo}/issues/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/issues/comments/{comment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListEventsForRepo(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository
        /repos/{owner}/{repo}/issues/events
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/events", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and IssueEvent(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesGetEvent(self, owner:str, repo:str, event_id:int):
        """
        
        https://docs.github.com/rest/reference/issues#get-an-issue-event
        /repos/{owner}/{repo}/issues/events/{event_id}
        
        arguments:
        owner -- 
        repo -- 
        event_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/events/{event_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return IssueEvent(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesGet(self, owner:str, repo:str, issue_number:int):
        """The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
[transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        
        https://docs.github.com/rest/reference/issues#get-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Issue(**r.json())
            
        if r.status_code == 301:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesUpdate(self, owner:str, repo:str, issue_number:int,title=None, body:str=None, assignee:str=None, state:str=None, milestone=None, labels=None, assignees:list=None):
        """Issue owners and users with push access can edit an issue.
        
        https://docs.github.com/rest/reference/issues/#update-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        title -- The title of the issue.
        body -- The contents of the issue.
        assignee -- Login for the user that this issue should be assigned to. **This field is deprecated.**
        state -- State of the issue. Either `open` or `closed`.
        milestone -- 
        labels -- Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
        assignees -- Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
        

        """
    
        data = {
        'title': title,
        'body': body,
        'assignee': assignee,
        'state': state,
        'milestone': milestone,
        'labels': labels,
        'assignees': assignees,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Issue(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 301:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesAddAssignees(self, owner:str, repo:str, issue_number:int,assignees:list=None):
        """Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
        
        https://docs.github.com/rest/reference/issues#add-assignees-to-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/assignees
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        assignees -- Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
        

        """
    
        data = {
        'assignees': assignees,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/assignees", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return IssueSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesRemoveAssignees(self, owner:str, repo:str, issue_number:int):
        """Removes one or more assignees from an issue.
        
        https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/assignees
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/assignees", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return IssueSimple(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListComments(self, owner:str, repo:str, issue_number:int,since=None, per_page=30, page=1):
        """Issue Comments are ordered by ascending ID.
        
        https://docs.github.com/rest/reference/issues#list-issue-comments
        /repos/{owner}/{repo}/issues/{issue_number}/comments
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and IssueComment(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesCreateComment(self, owner:str, repo:str, issue_number:int,body:str):
        """This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/issues#create-an-issue-comment
        /repos/{owner}/{repo}/issues/{issue_number}/comments
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        body -- The contents of the comment.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/comments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return IssueComment(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesListEvents(self, owner:str, repo:str, issue_number:int,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/issues#list-issue-events
        /repos/{owner}/{repo}/issues/{issue_number}/events
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/events", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry for entry in r.json() ]
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListLabelsOnIssue(self, owner:str, repo:str, issue_number:int,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/issues#list-labels-for-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/labels
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/labels", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Label(**entry) for entry in r.json() ]
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesAddLabels(self, owner:str, repo:str, issue_number:int,object:object):
        """
        
        https://docs.github.com/rest/reference/issues#add-labels-to-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/labels
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/labels", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and Label(**entry) for entry in r.json() ]
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesSetLabels(self, owner:str, repo:str, issue_number:int,object:object):
        """Removes any previous labels and sets the new labels for an issue.
        
        https://docs.github.com/rest/reference/issues#set-labels-for-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/labels
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/labels", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and Label(**entry) for entry in r.json() ]
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesRemoveAllLabels(self, owner:str, repo:str, issue_number:int):
        """
        
        https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/labels
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/labels", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesRemoveLabel(self, owner:str, repo:str, issue_number:int, name:str):
        """Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
        
        https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        name -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Label(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesLock(self, owner:str, repo:str, issue_number:int,lock_reason:str=None):
        """Users with push access can lock an issue or pull request's conversation.

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        
        https://docs.github.com/rest/reference/issues#lock-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/lock
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        lock_reason -- The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
\* `off-topic`  
\* `too heated`  
\* `resolved`  
\* `spam`
        

        """
    
        data = {
        'lock_reason': lock_reason,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/lock", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesUnlock(self, owner:str, repo:str, issue_number:int):
        """Users with push access can unlock an issue's conversation.
        
        https://docs.github.com/rest/reference/issues#unlock-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/lock
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/lock", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListEventsForTimeline(self, owner:str, repo:str, issue_number:int,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/timeline
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/timeline", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListLabelsForRepo(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/issues#list-labels-for-a-repository
        /repos/{owner}/{repo}/labels
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/labels", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Label(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesCreateLabel(self, owner:str, repo:str,name:str, color:str=None, description:str=None):
        """
        
        https://docs.github.com/rest/reference/issues#create-a-label
        /repos/{owner}/{repo}/labels
        
        arguments:
        owner -- 
        repo -- 
        name -- The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
        color -- The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
        description -- A short description of the label.
        

        """
    
        data = {
        'name': name,
        'color': color,
        'description': description,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/labels", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Label(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesGetLabel(self, owner:str, repo:str, name:str):
        """
        
        https://docs.github.com/rest/reference/issues#get-a-label
        /repos/{owner}/{repo}/labels/{name}
        
        arguments:
        owner -- 
        repo -- 
        name -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/labels/{name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Label(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesUpdateLabel(self, owner:str, repo:str, name:str,new_name:str=None, color:str=None, description:str=None):
        """
        
        https://docs.github.com/rest/reference/issues#update-a-label
        /repos/{owner}/{repo}/labels/{name}
        
        arguments:
        owner -- 
        repo -- 
        name -- 
        new_name -- The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
        color -- The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
        description -- A short description of the label.
        

        """
    
        data = {
        'new_name': new_name,
        'color': color,
        'description': description,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/labels/{name}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Label(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesDeleteLabel(self, owner:str, repo:str, name:str):
        """
        
        https://docs.github.com/rest/reference/issues#delete-a-label
        /repos/{owner}/{repo}/labels/{name}
        
        arguments:
        owner -- 
        repo -- 
        name -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/labels/{name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListMilestones(self, owner:str, repo:str,state='open', sort='due_on', direction='asc', per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/issues#list-milestones
        /repos/{owner}/{repo}/milestones
        
        arguments:
        owner -- 
        repo -- 
        state -- The state of the milestone. Either `open`, `closed`, or `all`.
        sort -- What to sort results by. Either `due_on` or `completeness`.
        direction -- The direction of the sort. Either `asc` or `desc`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if state is not None:
            data['state'] = state
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/milestones", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Milestone(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesCreateMilestone(self, owner:str, repo:str,title:str, state:str='open', description:str=None, due_on:datetime=None):
        """
        
        https://docs.github.com/rest/reference/issues#create-a-milestone
        /repos/{owner}/{repo}/milestones
        
        arguments:
        owner -- 
        repo -- 
        title -- The title of the milestone.
        state -- The state of the milestone. Either `open` or `closed`.
        description -- A description of the milestone.
        due_on -- The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        

        """
    
        data = {
        'title': title,
        'state': state,
        'description': description,
        'due_on': due_on,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/milestones", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Milestone(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesGetMilestone(self, owner:str, repo:str, milestone_number:int):
        """
        
        https://docs.github.com/rest/reference/issues#get-a-milestone
        /repos/{owner}/{repo}/milestones/{milestone_number}
        
        arguments:
        owner -- 
        repo -- 
        milestone_number -- milestone_number parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/milestones/{milestone_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Milestone(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesUpdateMilestone(self, owner:str, repo:str, milestone_number:int,title:str=None, state:str='open', description:str=None, due_on:datetime=None):
        """
        
        https://docs.github.com/rest/reference/issues#update-a-milestone
        /repos/{owner}/{repo}/milestones/{milestone_number}
        
        arguments:
        owner -- 
        repo -- 
        milestone_number -- milestone_number parameter
        title -- The title of the milestone.
        state -- The state of the milestone. Either `open` or `closed`.
        description -- A description of the milestone.
        due_on -- The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        

        """
    
        data = {
        'title': title,
        'state': state,
        'description': description,
        'due_on': due_on,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/milestones/{milestone_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Milestone(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def IssuesDeleteMilestone(self, owner:str, repo:str, milestone_number:int):
        """
        
        https://docs.github.com/rest/reference/issues#delete-a-milestone
        /repos/{owner}/{repo}/milestones/{milestone_number}
        
        arguments:
        owner -- 
        repo -- 
        milestone_number -- milestone_number parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/milestones/{milestone_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListLabelsForMilestone(self, owner:str, repo:str, milestone_number:int,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone
        /repos/{owner}/{repo}/milestones/{milestone_number}/labels
        
        arguments:
        owner -- 
        repo -- 
        milestone_number -- milestone_number parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/milestones/{milestone_number}/labels", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Label(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def IssuesListForAuthenticatedUser(self, filter='assigned', state='open', labels=None, sort='created', direction='desc', since=None, per_page=30, page=1):
        """List issues across owned and member repositories assigned to the authenticated user.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
        
        https://docs.github.com/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user
        /user/issues
        
        arguments:
        filter -- Indicates which sorts of issues to return. Can be one of:  
\* `assigned`: Issues assigned to you  
\* `created`: Issues created by you  
\* `mentioned`: Issues mentioning you  
\* `subscribed`: Issues you're subscribed to updates for  
\* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
        state -- Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
        labels -- A list of comma separated label names. Example: `bug,ui,@high`
        sort -- What to sort results by. Can be either `created`, `updated`, `comments`.
        direction -- One of `asc` (ascending) or `desc` (descending).
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if filter is not None:
            data['filter'] = filter
        if state is not None:
            data['state'] = state
        if labels is not None:
            data['labels'] = labels
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/issues", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Issue(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def LicensesGetAllCommonlyUsed(self, featured=None, per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/licenses#get-all-commonly-used-licenses
        /licenses
        
        arguments:
        featured -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if featured is not None:
            data['featured'] = featured
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/licenses", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and LicenseSimple(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def LicensesGet(self, license:str):
        """
        
        https://docs.github.com/rest/reference/licenses#get-a-license
        /licenses/{license}
        
        arguments:
        license -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/licenses/{license}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return License(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def LicensesGetForRepo(self, owner:str, repo:str):
        """This method returns the contents of the repository's license file, if one is detected.

Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
        
        https://docs.github.com/rest/reference/licenses/#get-the-license-for-a-repository
        /repos/{owner}/{repo}/license
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/license", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return LicenseContent(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MarkdownRender(self, text:str, mode:str='markdown', context:str=None):
        """
        
        https://docs.github.com/rest/reference/markdown#render-a-markdown-document
        /markdown
        
        arguments:
        text -- The Markdown text to render in HTML.
        mode -- The rendering mode.
        context -- The repository context to use when creating references in `gfm` mode.
        

        """
    
        data = {
        'text': text,
        'mode': mode,
        'context': context,
        
        }
        
        
        r = requests.post(f"{self._url}/markdown", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return DataResponse(r.content)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def MarkdownRenderRaw(self, text:str):
        """You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
        
        https://docs.github.com/rest/reference/markdown#render-a-markdown-document-in-raw-mode
        /markdown/raw
        
        arguments:
        text -- 
        

        """
    
        
        
        r = requests.post(f"{self._url}/markdown/raw", 
                          data=text,
                          headers=self._headers({'Content-Type':  'text/x-markdown'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return DataResponse(r.content)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsList(self, since=None, per_page=30):
        """Lists all organizations, in the order that they were created on GitHub.

**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
        
        https://docs.github.com/rest/reference/orgs#list-organizations
        /organizations
        
        arguments:
        since -- An organization ID. Only return organizations with an ID greater than this ID.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/organizations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrganizationSimple(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsGet(self, org:str):
        """To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).

GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
        
        https://docs.github.com/rest/reference/orgs#get-an-organization
        /orgs/{org}
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return OrganizationFull(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsUpdate(self, org:str,billing_email:str=None, company:str=None, email:str=None, twitter_username:str=None, location:str=None, name:str=None, description:str=None, has_organization_projects:bool=None, has_repository_projects:bool=None, default_repository_permission:str='read', members_can_create_repositories:bool=True, members_can_create_internal_repositories:bool=None, members_can_create_private_repositories:bool=None, members_can_create_public_repositories:bool=None, members_allowed_repository_creation_type:str=None, members_can_create_pages:bool=True, members_can_create_public_pages:bool=True, members_can_create_private_pages:bool=True, blog:str=None):
        """**Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).

Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
        
        https://docs.github.com/rest/reference/orgs/#update-an-organization
        /orgs/{org}
        
        arguments:
        org -- 
        billing_email -- Billing email address. This address is not publicized.
        company -- The company name.
        email -- The publicly visible email address.
        twitter_username -- The Twitter username of the company.
        location -- The location.
        name -- The shorthand name of the company.
        description -- The description of the company.
        has_organization_projects -- Toggles whether an organization can use organization projects.
        has_repository_projects -- Toggles whether repositories that belong to the organization can use repository projects.
        default_repository_permission -- Default permission level members have for organization repositories:  
\* `read` - can pull, but not push to or administer this repository.  
\* `write` - can pull and push, but not administer this repository.  
\* `admin` - can pull, push, and administer this repository.  
\* `none` - no permissions granted by default.
        members_can_create_repositories -- Toggles the ability of non-admin organization members to create repositories. Can be one of:  
\* `true` - all organization members can create repositories.  
\* `false` - only organization owners can create repositories.  
Default: `true`  
**Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
        members_can_create_internal_repositories -- Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  
\* `true` - all organization members can create internal repositories.  
\* `false` - only organization owners can create internal repositories.  
Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
        members_can_create_private_repositories -- Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  
\* `true` - all organization members can create private repositories.  
\* `false` - only organization owners can create private repositories.  
Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
        members_can_create_public_repositories -- Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  
\* `true` - all organization members can create public repositories.  
\* `false` - only organization owners can create public repositories.  
Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
        members_allowed_repository_creation_type -- Specifies which types of repositories non-admin organization members can create. Can be one of:  
\* `all` - all organization members can create public and private repositories.  
\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  
\* `none` - only admin members can create repositories.  
**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
        members_can_create_pages -- Toggles whether organization members can create GitHub Pages sites. Can be one of:  
\* `true` - all organization members can create GitHub Pages sites.  
\* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
        members_can_create_public_pages -- Toggles whether organization members can create public GitHub Pages sites. Can be one of:  
\* `true` - all organization members can create public GitHub Pages sites.  
\* `false` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
        members_can_create_private_pages -- Toggles whether organization members can create private GitHub Pages sites. Can be one of:  
\* `true` - all organization members can create private GitHub Pages sites.  
\* `false` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
        blog -- 
        

        """
    
        data = {
        'billing_email': billing_email,
        'company': company,
        'email': email,
        'twitter_username': twitter_username,
        'location': location,
        'name': name,
        'description': description,
        'has_organization_projects': has_organization_projects,
        'has_repository_projects': has_repository_projects,
        'default_repository_permission': default_repository_permission,
        'members_can_create_repositories': members_can_create_repositories,
        'members_can_create_internal_repositories': members_can_create_internal_repositories,
        'members_can_create_private_repositories': members_can_create_private_repositories,
        'members_can_create_public_repositories': members_can_create_public_repositories,
        'members_allowed_repository_creation_type': members_allowed_repository_creation_type,
        'members_can_create_pages': members_can_create_pages,
        'members_can_create_public_pages': members_can_create_public_pages,
        'members_can_create_private_pages': members_can_create_private_pages,
        'blog': blog,
        
        }
        
        
        r = requests.patch(f"{self._url}/orgs/{org}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return OrganizationFull(**r.json())
            
        if r.status_code == 422:
            return r.json()
            
        if r.status_code == 409:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsGetAuditLog(self, org:str,phrase=None, include='None', after=None, before=None, order='None', per_page=30, page=1):
        """Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."

To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
        
        https://docs.github.com/rest/reference/orgs#get-audit-log
        /orgs/{org}/audit-log
        
        arguments:
        org -- 
        phrase -- A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
        include -- The event types to include:

- `web` - returns web (non-Git) events
- `git` - returns Git events
- `all` - returns both web and Git events

The default is `web`.
        after -- A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
        before -- A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
        order -- The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.

The default is `desc`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if phrase is not None:
            data['phrase'] = phrase
        if include is not None:
            data['include'] = include
        if after is not None:
            data['after'] = after
        if before is not None:
            data['before'] = before
        if order is not None:
            data['order'] = order
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/audit-log", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            json = r.json()
            return json and [ entry and AuditLogEvent(**AuditLogEvent.patchEntry(entry)) for entry in json ]
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListBlockedUsers(self, org:str):
        """List the users blocked by an organization.
        
        https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization
        /orgs/{org}/blocks
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/blocks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsCheckBlockedUser(self, org:str, username:str):
        """
        
        https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization
        /orgs/{org}/blocks/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/blocks/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsBlockUser(self, org:str, username:str):
        """
        
        https://docs.github.com/rest/reference/orgs#block-a-user-from-an-organization
        /orgs/{org}/blocks/{username}
        
        arguments:
        org -- 
        username -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/blocks/{username}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsUnblockUser(self, org:str, username:str):
        """
        
        https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization
        /orgs/{org}/blocks/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/blocks/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListSamlSsoAuthorizations(self, org:str):
        """Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).

An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
        
        https://docs.github.com/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization
        /orgs/{org}/credential-authorizations
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/credential-authorizations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CredentialAuthorization(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsRemoveSamlSsoAuthorization(self, org:str, credential_id:int):
        """Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).

An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
        
        https://docs.github.com/rest/reference/orgs#remove-a-saml-sso-authorization-for-an-organization
        /orgs/{org}/credential-authorizations/{credential_id}
        
        arguments:
        org -- 
        credential_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/credential-authorizations/{credential_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListFailedInvitations(self, org:str,per_page=30, page=1):
        """The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
        
        https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations
        /orgs/{org}/failed_invitations
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/failed_invitations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrganizationInvitation(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListWebhooks(self, org:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/orgs#list-organization-webhooks
        /orgs/{org}/hooks
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/hooks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrgHook(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsCreateWebhook(self, org:str,config:dict, name:str, events:list=['push'], active:bool=True):
        """Here's how you can create a hook that posts payloads in JSON format:
        
        https://docs.github.com/rest/reference/orgs#create-an-organization-webhook
        /orgs/{org}/hooks
        
        arguments:
        org -- 
        config -- Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
        name -- Must be passed as "web".
        events -- Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
        active -- Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
        

        """
    
        data = {
        'config': config,
        'name': name,
        'events': events,
        'active': active,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/hooks", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return OrgHook(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsGetWebhook(self, org:str, hook_id:int):
        """Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
        
        https://docs.github.com/rest/reference/orgs#get-an-organization-webhook
        /orgs/{org}/hooks/{hook_id}
        
        arguments:
        org -- 
        hook_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/hooks/{hook_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return OrgHook(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsUpdateWebhook(self, org:str, hook_id:int,config:dict=None, events:list=['push'], active:bool=True, name:str=None):
        """Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
        
        https://docs.github.com/rest/reference/orgs#update-an-organization-webhook
        /orgs/{org}/hooks/{hook_id}
        
        arguments:
        org -- 
        hook_id -- 
        config -- Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
        events -- Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
        active -- Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
        name -- 
        

        """
    
        data = {
        'config': config,
        'events': events,
        'active': active,
        'name': name,
        
        }
        
        
        r = requests.patch(f"{self._url}/orgs/{org}/hooks/{hook_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return OrgHook(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsDeleteWebhook(self, org:str, hook_id:int):
        """
        
        https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook
        /orgs/{org}/hooks/{hook_id}
        
        arguments:
        org -- 
        hook_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/hooks/{hook_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsGetWebhookConfigForOrg(self, org:str, hook_id:int):
        """Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."

Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
        
        https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization
        /orgs/{org}/hooks/{hook_id}/config
        
        arguments:
        org -- 
        hook_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/hooks/{hook_id}/config", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WebhookConfiguration(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsUpdateWebhookConfigForOrg(self, org:str, hook_id:int,url:str=None, content_type:str=None, secret:str=None, insecure_ssl=None):
        """Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."

Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
        
        https://docs.github.com/rest/reference/orgs#update-a-webhook-configuration-for-an-organization
        /orgs/{org}/hooks/{hook_id}/config
        
        arguments:
        org -- 
        hook_id -- 
        url -- 
        content_type -- 
        secret -- 
        insecure_ssl -- 
        

        """
    
        data = {
        'url': url,
        'content_type': content_type,
        'secret': secret,
        'insecure_ssl': insecure_ssl,
        
        }
        
        
        r = requests.patch(f"{self._url}/orgs/{org}/hooks/{hook_id}/config", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return WebhookConfiguration(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsListWebhookDeliveries(self, org:str, hook_id:int,per_page=30, cursor=None):
        """Returns a list of webhook deliveries for a webhook configured in an organization.
        
        https://docs.github.com/rest/reference/orgs#list-deliveries-for-an-organization-webhook
        /orgs/{org}/hooks/{hook_id}/deliveries
        
        arguments:
        org -- 
        hook_id -- 
        per_page -- Results per page (max 100)
        cursor -- Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if cursor is not None:
            data['cursor'] = cursor
        
        
        r = requests.get(f"{self._url}/orgs/{org}/hooks/{hook_id}/deliveries", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleWebhookDelivery(**entry) for entry in r.json() ]
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsGetWebhookDelivery(self, org:str, hook_id:int, delivery_id:int):
        """Returns a delivery for a webhook configured in an organization.
        
        https://docs.github.com/rest/reference/orgs#get-a-webhook-delivery-for-an-organization-webhook
        /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}
        
        arguments:
        org -- 
        hook_id -- 
        delivery_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WebhookDelivery(**r.json())
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsRedeliverWebhookDelivery(self, org:str, hook_id:int, delivery_id:int):
        """Redeliver a delivery for a webhook configured in an organization.
        
        https://docs.github.com/rest/reference/orgs#redeliver-a-delivery-for-an-organization-webhook
        /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
        
        arguments:
        org -- 
        hook_id -- 
        delivery_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return r.json()
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsPingWebhook(self, org:str, hook_id:int):
        """This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
        
        https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook
        /orgs/{org}/hooks/{hook_id}/pings
        
        arguments:
        org -- 
        hook_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/hooks/{hook_id}/pings", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsListAppInstallations(self, org:str,per_page=30, page=1):
        """Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization
        /orgs/{org}/installations
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/installations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return OrgsListAppInstallationsSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListPendingInvitations(self, org:str,per_page=30, page=1):
        """The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
        
        https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations
        /orgs/{org}/invitations
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/invitations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrganizationInvitation(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsCreateInvitation(self, org:str,invitee_id:int=None, email:str=None, role:str='direct_member', team_ids:list=None):
        """Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/orgs#create-an-organization-invitation
        /orgs/{org}/invitations
        
        arguments:
        org -- 
        invitee_id -- **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
        email -- **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
        role -- Specify role for new member. Can be one of:  
\* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
\* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
\* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
        team_ids -- Specify IDs for the teams you want to invite new members to.
        

        """
    
        data = {
        'invitee_id': invitee_id,
        'email': email,
        'role': role,
        'team_ids': team_ids,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/invitations", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return OrganizationInvitation(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsCancelInvitation(self, org:str, invitation_id:int):
        """Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
        
        https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation
        /orgs/{org}/invitations/{invitation_id}
        
        arguments:
        org -- 
        invitation_id -- invitation_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/invitations/{invitation_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListInvitationTeams(self, org:str, invitation_id:int,per_page=30, page=1):
        """List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
        
        https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams
        /orgs/{org}/invitations/{invitation_id}/teams
        
        arguments:
        org -- 
        invitation_id -- invitation_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/invitations/{invitation_id}/teams", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListMembers(self, org:str,filter='all', role='all', per_page=30, page=1):
        """List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
        
        https://docs.github.com/rest/reference/orgs#list-organization-members
        /orgs/{org}/members
        
        arguments:
        org -- 
        filter -- Filter members returned in the list. Can be one of:  
\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  
\* `all` - All members the authenticated user can see.
        role -- Filter members returned by their role. Can be one of:  
\* `all` - All members of the organization, regardless of role.  
\* `admin` - Organization owners.  
\* `member` - Non-owner organization members.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if filter is not None:
            data['filter'] = filter
        if role is not None:
            data['role'] = role
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/members", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsCheckMembershipForUser(self, org:str, username:str):
        """Check if a user is, publicly or privately, a member of the organization.
        
        https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user
        /orgs/{org}/members/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/members/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsRemoveMember(self, org:str, username:str):
        """Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
        
        https://docs.github.com/rest/reference/orgs#remove-an-organization-member
        /orgs/{org}/members/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/members/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsGetMembershipForUser(self, org:str, username:str):
        """In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
        
        https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user
        /orgs/{org}/memberships/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/memberships/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return OrgMembership(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsSetMembershipForUser(self, org:str, username:str,role:str='member'):
        """Only authenticated organization owners can add a member to the organization or update the member's role.

*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
    
*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.

**Rate limits**

To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
        
        https://docs.github.com/rest/reference/orgs#set-organization-membership-for-a-user
        /orgs/{org}/memberships/{username}
        
        arguments:
        org -- 
        username -- 
        role -- The role to give the user in the organization. Can be one of:  
\* `admin` - The user will become an owner of the organization.  
\* `member` - The user will become a non-owner member of the organization.
        

        """
    
        data = {
        'role': role,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/memberships/{username}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return OrgMembership(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsRemoveMembershipForUser(self, org:str, username:str):
        """In order to remove a user's membership with an organization, the authenticated user must be an organization owner.

If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
        
        https://docs.github.com/rest/reference/orgs#remove-organization-membership-for-a-user
        /orgs/{org}/memberships/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/memberships/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListOutsideCollaborators(self, org:str,filter='all', per_page=30, page=1):
        """List all users who are outside collaborators of an organization.
        
        https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization
        /orgs/{org}/outside_collaborators
        
        arguments:
        org -- 
        filter -- Filter the list of outside collaborators. Can be one of:  
\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  
\* `all`: All outside collaborators.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if filter is not None:
            data['filter'] = filter
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/outside_collaborators", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsConvertMemberToOutsideCollaborator(self, org:str, username:str):
        """When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
        
        https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator
        /orgs/{org}/outside_collaborators/{username}
        
        arguments:
        org -- 
        username -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/outside_collaborators/{username}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return OrgsConvertMemberToOutsideCollaborator202(**r.json())
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsRemoveOutsideCollaborator(self, org:str, username:str):
        """Removing a user from this list will remove them from all the organization's repositories.
        
        https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization
        /orgs/{org}/outside_collaborators/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/outside_collaborators/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return OrgsRemoveOutsideCollaborator422(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListPublicMembers(self, org:str,per_page=30, page=1):
        """Members of an organization can choose to have their membership publicized or not.
        
        https://docs.github.com/rest/reference/orgs#list-public-organization-members
        /orgs/{org}/public_members
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/public_members", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsCheckPublicMembershipForUser(self, org:str, username:str):
        """
        
        https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user
        /orgs/{org}/public_members/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/public_members/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsSetPublicMembershipForAuthenticatedUser(self, org:str, username:str):
        """The user can publicize their own membership. (A user cannot publicize the membership for another user.)

Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        
        https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user
        /orgs/{org}/public_members/{username}
        
        arguments:
        org -- 
        username -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/public_members/{username}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsRemovePublicMembershipForAuthenticatedUser(self, org:str, username:str):
        """
        
        https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user
        /orgs/{org}/public_members/{username}
        
        arguments:
        org -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/public_members/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListMembershipsForAuthenticatedUser(self, state='None', per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user
        /user/memberships/orgs
        
        arguments:
        state -- Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if state is not None:
            data['state'] = state
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/memberships/orgs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrgMembership(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsGetMembershipForAuthenticatedUser(self, org:str):
        """
        
        https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user
        /user/memberships/orgs/{org}
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/memberships/orgs/{org}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return OrgMembership(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsUpdateMembershipForAuthenticatedUser(self, org:str,state:str):
        """
        
        https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user
        /user/memberships/orgs/{org}
        
        arguments:
        org -- 
        state -- The state that the membership should be in. Only `"active"` will be accepted.
        

        """
    
        data = {
        'state': state,
        
        }
        
        
        r = requests.patch(f"{self._url}/user/memberships/orgs/{org}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return OrgMembership(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def OrgsListForAuthenticatedUser(self, per_page=30, page=1):
        """List organizations for the authenticated user.

**OAuth scope requirements**

This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
        
        https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user
        /user/orgs
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/orgs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrganizationSimple(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def OrgsListForUser(self, username:str,per_page=30, page=1):
        """List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.

This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
        
        https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user
        /users/{username}/orgs
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/orgs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrganizationSimple(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetGithubActionsPermissionsOrganization(self, org:str):
        """Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        
        https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization
        /orgs/{org}/actions/permissions
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/permissions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsOrganizationPermissions(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsSetGithubActionsPermissionsOrganization(self, org:str,enabled_repositories:str, allowed_actions:str=None):
        """Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.

If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        
        https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization
        /orgs/{org}/actions/permissions
        
        arguments:
        org -- 
        enabled_repositories -- 
        allowed_actions -- 
        

        """
    
        data = {
        'enabled_repositories': enabled_repositories,
        'allowed_actions': allowed_actions,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/permissions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsListSelectedRepositoriesEnabledGithubActionsOrganization(self, org:str,per_page=30, page=1):
        """Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        
        https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization
        /orgs/{org}/actions/permissions/repositories
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/permissions/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization(self, org:str,selected_repository_ids:list):
        """Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        
        https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization
        /orgs/{org}/actions/permissions/repositories
        
        arguments:
        org -- 
        selected_repository_ids -- List of repository IDs to enable for GitHub Actions.
        

        """
    
        data = {
        'selected_repository_ids': selected_repository_ids,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/permissions/repositories", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsEnableSelectedRepositoryGithubActionsOrganization(self, org:str, repository_id:int):
        """Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        
        https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization
        /orgs/{org}/actions/permissions/repositories/{repository_id}
        
        arguments:
        org -- 
        repository_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/permissions/repositories/{repository_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsDisableSelectedRepositoryGithubActionsOrganization(self, org:str, repository_id:int):
        """Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        
        https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization
        /orgs/{org}/actions/permissions/repositories/{repository_id}
        
        arguments:
        org -- 
        repository_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/actions/permissions/repositories/{repository_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetAllowedActionsOrganization(self, org:str):
        """Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        
        https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization
        /orgs/{org}/actions/permissions/selected-actions
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/permissions/selected-actions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SelectedActions(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsSetAllowedActionsOrganization(self, org:str,github_owned_allowed:bool=None, verified_allowed:bool=None, patterns_allowed:list=None):
        """Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.

To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
        
        https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization
        /orgs/{org}/actions/permissions/selected-actions
        
        arguments:
        org -- 
        github_owned_allowed -- Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
        verified_allowed -- Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators.
        patterns_allowed -- Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
        

        """
    
        data = {
        'github_owned_allowed': github_owned_allowed,
        'verified_allowed': verified_allowed,
        'patterns_allowed': patterns_allowed,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/permissions/selected-actions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsListSelfHostedRunnerGroupsForOrg(self, org:str,per_page=30, page=1):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization
        /orgs/{org}/actions/runner-groups
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/runner-groups", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListSelfHostedRunnerGroupsForOrgSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsCreateSelfHostedRunnerGroupForOrg(self, org:str,name:str, visibility:str='all', selected_repository_ids:list=None, runners:list=None):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Creates a new self-hosted runner group for an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization
        /orgs/{org}/actions/runner-groups
        
        arguments:
        org -- 
        name -- Name of the runner group.
        visibility -- Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
        selected_repository_ids -- List of repository IDs that can access the runner group.
        runners -- List of runner IDs to add to the runner group.
        

        """
    
        data = {
        'name': name,
        'visibility': visibility,
        'selected_repository_ids': selected_repository_ids,
        'runners': runners,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/actions/runner-groups", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return RunnerGroupsOrg(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsGetSelfHostedRunnerGroupForOrg(self, org:str, runner_group_id:int):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Gets a specific self-hosted runner group for an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return RunnerGroupsOrg(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsUpdateSelfHostedRunnerGroupForOrg(self, org:str, runner_group_id:int,name:str=None, visibility:str=None):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Updates the `name` and `visibility` of a self-hosted runner group in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        name -- Name of the runner group.
        visibility -- Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
        

        """
    
        data = {
        'name': name,
        'visibility': visibility,
        
        }
        
        
        r = requests.patch(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return RunnerGroupsOrg(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsDeleteSelfHostedRunnerGroupFromOrg(self, org:str, runner_group_id:int):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Deletes a self-hosted runner group for an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListRepoAccessToSelfHostedRunnerGroupInOrg(self, org:str, runner_group_id:int,page=1, per_page=30):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Lists the repositories with access to a self-hosted runner group configured in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListRepoAccessToSelfHostedRunnerGroupInOrgSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg(self, org:str, runner_group_id:int,selected_repository_ids:list):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        selected_repository_ids -- List of repository IDs that can access the runner group.
        

        """
    
        data = {
        'selected_repository_ids': selected_repository_ids,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg(self, org:str, runner_group_id:int, repository_id:int):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."


Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."

You must authenticate using an access token with the `admin:org`
scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        repository_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(self, org:str, runner_group_id:int, repository_id:int):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."


Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        repository_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListSelfHostedRunnersInGroupForOrg(self, org:str, runner_group_id:int,per_page=30, page=1):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Lists self-hosted runners that are in a specific organization group.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}/runners
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}/runners", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListSelfHostedRunnersInGroupForOrgSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsSetSelfHostedRunnersInGroupForOrg(self, org:str, runner_group_id:int,runners:list):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Replaces the list of self-hosted runners that are part of an organization runner group.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}/runners
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        runners -- List of runner IDs to add to the runner group.
        

        """
    
        data = {
        'runners': runners,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}/runners", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsAddSelfHostedRunnerToGroupForOrg(self, org:str, runner_group_id:int, runner_id:int):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."


Adds a self-hosted runner to a runner group configured in an organization.

You must authenticate using an access token with the `admin:org`
scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        runner_id -- Unique identifier of the self-hosted runner.
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsRemoveSelfHostedRunnerFromGroupForOrg(self, org:str, runner_group_id:int, runner_id:int):
        """The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."


Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization
        /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
        
        arguments:
        org -- 
        runner_group_id -- Unique identifier of the self-hosted runner group.
        runner_id -- Unique identifier of the self-hosted runner.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListSelfHostedRunnersForOrg(self, org:str,per_page=30, page=1):
        """Lists all self-hosted runners configured in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization
        /orgs/{org}/actions/runners
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/runners", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListSelfHostedRunnersForOrgSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListRunnerApplicationsForOrg(self, org:str):
        """Lists binaries for the runner application that you can download and run.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization
        /orgs/{org}/actions/runners/downloads
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/runners/downloads", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and RunnerApplication(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsCreateRegistrationTokenForOrg(self, org:str):
        """Returns a token that you can pass to the `config` script. The token expires after one hour.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.

#### Example using registration token

Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.

```
./config.sh --url https://github.com/octo-org --token TOKEN
```
        
        https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization
        /orgs/{org}/actions/runners/registration-token
        
        arguments:
        org -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/actions/runners/registration-token", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return AuthenticationToken(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsCreateRemoveTokenForOrg(self, org:str):
        """Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.

#### Example using remove token

To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
endpoint.

```
./config.sh remove --token TOKEN
```
        
        https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization
        /orgs/{org}/actions/runners/remove-token
        
        arguments:
        org -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/actions/runners/remove-token", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return AuthenticationToken(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsGetSelfHostedRunnerForOrg(self, org:str, runner_id:int):
        """Gets a specific self-hosted runner configured in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization
        /orgs/{org}/actions/runners/{runner_id}
        
        arguments:
        org -- 
        runner_id -- Unique identifier of the self-hosted runner.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/runners/{runner_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SelfHostedRunners(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDeleteSelfHostedRunnerFromOrg(self, org:str, runner_id:int):
        """Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization
        /orgs/{org}/actions/runners/{runner_id}
        
        arguments:
        org -- 
        runner_id -- Unique identifier of the self-hosted runner.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/actions/runners/{runner_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListOrgSecrets(self, org:str,per_page=30, page=1):
        """Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-organization-secrets
        /orgs/{org}/actions/secrets
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/secrets", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListOrgSecretsSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetOrgPublicKey(self, org:str):
        """Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-an-organization-public-key
        /orgs/{org}/actions/secrets/public-key
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/secrets/public-key", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Actionspublickey(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetOrgSecret(self, org:str, secret_name:str):
        """Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-an-organization-secret
        /orgs/{org}/actions/secrets/{secret_name}
        
        arguments:
        org -- 
        secret_name -- secret_name parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/secrets/{secret_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsSecretForAnOrganization(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsCreateOrUpdateOrgSecret(self, org:str, secret_name:str,visibility:str, encrypted_value:str=None, key_id:str=None, selected_repository_ids:list=None):
        """Creates or updates an organization secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
use this endpoint.

#### Example encrypting a secret using Node.js

Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.

```
const sodium = require('tweetsodium');

const key = "base64-encoded-public-key";
const value = "plain-text-secret";

// Convert the message and key to Uint8Array's (Buffer implements that interface)
const messageBytes = Buffer.from(value);
const keyBytes = Buffer.from(key, 'base64');

// Encrypt using LibSodium.
const encryptedBytes = sodium.seal(messageBytes, keyBytes);

// Base64 the encrypted secret
const encrypted = Buffer.from(encryptedBytes).toString('base64');

console.log(encrypted);
```


#### Example encrypting a secret using Python

Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.

```
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
  \"""Encrypt a Unicode string using the public key.\"""
  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
  sealed_box = public.SealedBox(public_key)
  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
  return b64encode(encrypted).decode("utf-8")
```

#### Example encrypting a secret using C#

Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.

```
var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");

var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);

Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
```

#### Example encrypting a secret using Ruby

Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.

```ruby
require "rbnacl"
require "base64"

key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
public_key = RbNaCl::PublicKey.new(key)

box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
encrypted_secret = box.encrypt("my_secret")

# Print the base64 encoded secret
puts Base64.strict_encode64(encrypted_secret)
```
        
        https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret
        /orgs/{org}/actions/secrets/{secret_name}
        
        arguments:
        org -- 
        secret_name -- secret_name parameter
        visibility -- Configures the access that repositories have to the organization secret. Can be one of:  
\- `all` - All repositories in an organization can access the secret.  
\- `private` - Private repositories in an organization can access the secret.  
\- `selected` - Only specific repositories can access the secret.
        encrypted_value -- Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
        key_id -- ID of the key you used to encrypt the secret.
        selected_repository_ids -- An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
        

        """
    
        data = {
        'visibility': visibility,
        'encrypted_value': encrypted_value,
        'key_id': key_id,
        'selected_repository_ids': selected_repository_ids,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/secrets/{secret_name}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return EmptyObject(**r.json())
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsDeleteOrgSecret(self, org:str, secret_name:str):
        """Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-an-organization-secret
        /orgs/{org}/actions/secrets/{secret_name}
        
        arguments:
        org -- 
        secret_name -- secret_name parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/actions/secrets/{secret_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListSelectedReposForOrgSecret(self, org:str, secret_name:str,page=1, per_page=30):
        """Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret
        /orgs/{org}/actions/secrets/{secret_name}/repositories
        
        arguments:
        org -- 
        secret_name -- secret_name parameter
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/actions/secrets/{secret_name}/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListSelectedReposForOrgSecretSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsSetSelectedReposForOrgSecret(self, org:str, secret_name:str,selected_repository_ids:list=None):
        """Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret
        /orgs/{org}/actions/secrets/{secret_name}/repositories
        
        arguments:
        org -- 
        secret_name -- secret_name parameter
        selected_repository_ids -- An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
        

        """
    
        data = {
        'selected_repository_ids': selected_repository_ids,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/secrets/{secret_name}/repositories", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsAddSelectedRepoToOrgSecret(self, org:str, secret_name:str, repository_id:int):
        """Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret
        /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
        
        arguments:
        org -- 
        secret_name -- secret_name parameter
        repository_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 409:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsRemoveSelectedRepoFromOrgSecret(self, org:str, secret_name:str, repository_id:int):
        """Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret
        /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
        
        arguments:
        org -- 
        secret_name -- secret_name parameter
        repository_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 409:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListArtifactsForRepo(self, owner:str, repo:str,per_page=30, page=1):
        """Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository
        /repos/{owner}/{repo}/actions/artifacts
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/artifacts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListArtifactsForRepoSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetArtifact(self, owner:str, repo:str, artifact_id:int):
        """Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-an-artifact
        /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
        
        arguments:
        owner -- 
        repo -- 
        artifact_id -- artifact_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Artifact(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDeleteArtifact(self, owner:str, repo:str, artifact_id:int):
        """Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-an-artifact
        /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
        
        arguments:
        owner -- 
        repo -- 
        artifact_id -- artifact_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDownloadArtifact(self, owner:str, repo:str, artifact_id:int, archive_format:str):
        """Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#download-an-artifact
        /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
        
        arguments:
        owner -- 
        repo -- 
        artifact_id -- artifact_id parameter
        archive_format -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetJobForWorkflowRun(self, owner:str, repo:str, job_id:int):
        """Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run
        /repos/{owner}/{repo}/actions/jobs/{job_id}
        
        arguments:
        owner -- 
        repo -- 
        job_id -- job_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/jobs/{job_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Job(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDownloadJobLogsForWorkflowRun(self, owner:str, repo:str, job_id:int):
        """Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run
        /repos/{owner}/{repo}/actions/jobs/{job_id}/logs
        
        arguments:
        owner -- 
        repo -- 
        job_id -- job_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/jobs/{job_id}/logs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetGithubActionsPermissionsRepository(self, owner:str, repo:str):
        """Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.

You must authenticate using an access token with the `repo` scope to use this
endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        
        https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository
        /repos/{owner}/{repo}/actions/permissions
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/permissions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsRepositoryPermissions(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsSetGithubActionsPermissionsRepository(self, owner:str, repo:str,enabled:bool, allowed_actions:str=None):
        """Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.

If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        
        https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository
        /repos/{owner}/{repo}/actions/permissions
        
        arguments:
        owner -- 
        repo -- 
        enabled -- 
        allowed_actions -- 
        

        """
    
        data = {
        'enabled': enabled,
        'allowed_actions': allowed_actions,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/actions/permissions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsGetAllowedActionsRepository(self, owner:str, repo:str):
        """Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        
        https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository
        /repos/{owner}/{repo}/actions/permissions/selected-actions
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/permissions/selected-actions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SelectedActions(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsSetAllowedActionsRepository(self, owner:str, repo:str,github_owned_allowed:bool=None, verified_allowed:bool=None, patterns_allowed:list=None):
        """Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."

If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.

To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
        
        https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository
        /repos/{owner}/{repo}/actions/permissions/selected-actions
        
        arguments:
        owner -- 
        repo -- 
        github_owned_allowed -- Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
        verified_allowed -- Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators.
        patterns_allowed -- Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
        

        """
    
        data = {
        'github_owned_allowed': github_owned_allowed,
        'verified_allowed': verified_allowed,
        'patterns_allowed': patterns_allowed,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/actions/permissions/selected-actions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsListSelfHostedRunnersForRepo(self, owner:str, repo:str,per_page=30, page=1):
        """Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository
        /repos/{owner}/{repo}/actions/runners
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runners", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListSelfHostedRunnersForRepoSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListRunnerApplicationsForRepo(self, owner:str, repo:str):
        """Lists binaries for the runner application that you can download and run.

You must authenticate using an access token with the `repo` scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository
        /repos/{owner}/{repo}/actions/runners/downloads
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runners/downloads", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and RunnerApplication(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsCreateRegistrationTokenForRepo(self, owner:str, repo:str):
        """Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
using an access token with the `repo` scope to use this endpoint.

#### Example using registration token
 
Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.

```
./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
```
        
        https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository
        /repos/{owner}/{repo}/actions/runners/registration-token
        
        arguments:
        owner -- 
        repo -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/actions/runners/registration-token", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return AuthenticationToken(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsCreateRemoveTokenForRepo(self, owner:str, repo:str):
        """Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
You must authenticate using an access token with the `repo` scope to use this endpoint.

#### Example using remove token
 
To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.

```
./config.sh remove --token TOKEN
```
        
        https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository
        /repos/{owner}/{repo}/actions/runners/remove-token
        
        arguments:
        owner -- 
        repo -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/actions/runners/remove-token", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return AuthenticationToken(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsGetSelfHostedRunnerForRepo(self, owner:str, repo:str, runner_id:int):
        """Gets a specific self-hosted runner configured in a repository.

You must authenticate using an access token with the `repo` scope to use this
endpoint.
        
        https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository
        /repos/{owner}/{repo}/actions/runners/{runner_id}
        
        arguments:
        owner -- 
        repo -- 
        runner_id -- Unique identifier of the self-hosted runner.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runners/{runner_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SelfHostedRunners(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDeleteSelfHostedRunnerFromRepo(self, owner:str, repo:str, runner_id:int):
        """Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.

You must authenticate using an access token with the `repo`
scope to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository
        /repos/{owner}/{repo}/actions/runners/{runner_id}
        
        arguments:
        owner -- 
        repo -- 
        runner_id -- Unique identifier of the self-hosted runner.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/actions/runners/{runner_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListWorkflowRunsForRepo(self, owner:str, repo:str,actor=None, branch=None, event=None, status='None', per_page=30, page=1, created=None):
        """Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).

Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository
        /repos/{owner}/{repo}/actions/runs
        
        arguments:
        owner -- 
        repo -- 
        actor -- Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
        branch -- Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
        event -- Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
        status -- Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)."
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        created -- 
        
        """
        
        data = {}
        if actor is not None:
            data['actor'] = actor
        if branch is not None:
            data['branch'] = branch
        if event is not None:
            data['event'] = event
        if status is not None:
            data['status'] = status
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        if created is not None:
            data['created'] = created
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListWorkflowRunsForRepoSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetWorkflowRun(self, owner:str, repo:str, run_id:int):
        """Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-a-workflow-run
        /repos/{owner}/{repo}/actions/runs/{run_id}
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WorkflowRun(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDeleteWorkflowRun(self, owner:str, repo:str, run_id:int):
        """Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-a-workflow-run
        /repos/{owner}/{repo}/actions/runs/{run_id}
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetReviewsForRun(self, owner:str, repo:str, run_id:int):
        """Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run
        /repos/{owner}/{repo}/actions/runs/{run_id}/approvals
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/approvals", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and EnvironmentApproval(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsApproveWorkflowRun(self, owner:str, repo:str, run_id:int):
        """Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request
        /repos/{owner}/{repo}/actions/runs/{run_id}/approve
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/approve", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return EmptyObject(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsListWorkflowRunArtifacts(self, owner:str, repo:str, run_id:int,per_page=30, page=1):
        """Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts
        /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListWorkflowRunArtifactsSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsCancelWorkflowRun(self, owner:str, repo:str, run_id:int):
        """Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#cancel-a-workflow-run
        /repos/{owner}/{repo}/actions/runs/{run_id}/cancel
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/cancel", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return ActionsCancelWorkflowRun202(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsListJobsForWorkflowRun(self, owner:str, repo:str, run_id:int,filter='latest', per_page=30, page=1):
        """Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
        
        https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run
        /repos/{owner}/{repo}/actions/runs/{run_id}/jobs
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        filter -- Filters jobs by their `completed_at` timestamp. Can be one of:  
\* `latest`: Returns jobs from the most recent execution of the workflow run.  
\* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if filter is not None:
            data['filter'] = filter
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/jobs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListJobsForWorkflowRunSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDownloadWorkflowRunLogs(self, owner:str, repo:str, run_id:int):
        """Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
`Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#download-workflow-run-logs
        /repos/{owner}/{repo}/actions/runs/{run_id}/logs
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/logs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDeleteWorkflowRunLogs(self, owner:str, repo:str, run_id:int):
        """Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-workflow-run-logs
        /repos/{owner}/{repo}/actions/runs/{run_id}/logs
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/logs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetPendingDeploymentsForRun(self, owner:str, repo:str, run_id:int):
        """Get all deployment environments for a workflow run that are waiting for protection rules to pass.

Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run
        /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PendingDeployment(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsReviewPendingDeploymentsForRun(self, owner:str, repo:str, run_id:int,comment:str, state:str, environment_ids:list):
        """Approve or reject pending deployments that are waiting on approval by a required reviewer.

Anyone with read access to the repository contents and deployments can use this endpoint.
        
        https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run
        /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        comment -- A comment to accompany the deployment review
        state -- Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected`
        environment_ids -- The list of environment ids to approve or reject
        

        """
    
        data = {
        'comment': comment,
        'state': state,
        'environment_ids': environment_ids,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and Deployment(**entry) for entry in r.json() ]
            

        raise UnexpectedResult(r.status_code)

    def ActionsReRunWorkflow(self, owner:str, repo:str, run_id:int):
        """Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#re-run-a-workflow
        /repos/{owner}/{repo}/actions/runs/{run_id}/rerun
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/rerun", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ActionsReRunWorkflowSuccess(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ActionsGetWorkflowRunUsage(self, owner:str, repo:str, run_id:int):
        """Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".

Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-workflow-run-usage
        /repos/{owner}/{repo}/actions/runs/{run_id}/timing
        
        arguments:
        owner -- 
        repo -- 
        run_id -- The id of the workflow run.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/runs/{run_id}/timing", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WorkflowRunUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListRepoSecrets(self, owner:str, repo:str,per_page=30, page=1):
        """Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-repository-secrets
        /repos/{owner}/{repo}/actions/secrets
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/secrets", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListRepoSecretsSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetRepoPublicKey(self, owner:str, repo:str):
        """Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-a-repository-public-key
        /repos/{owner}/{repo}/actions/secrets/public-key
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/secrets/public-key", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Actionspublickey(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetRepoSecret(self, owner:str, repo:str, secret_name:str):
        """Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-a-repository-secret
        /repos/{owner}/{repo}/actions/secrets/{secret_name}
        
        arguments:
        owner -- 
        repo -- 
        secret_name -- secret_name parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/secrets/{secret_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsSecret(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsCreateOrUpdateRepoSecret(self, owner:str, repo:str, secret_name:str,encrypted_value:str=None, key_id:str=None):
        """Creates or updates a repository secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
this endpoint.

#### Example encrypting a secret using Node.js

Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.

```
const sodium = require('tweetsodium');

const key = "base64-encoded-public-key";
const value = "plain-text-secret";

// Convert the message and key to Uint8Array's (Buffer implements that interface)
const messageBytes = Buffer.from(value);
const keyBytes = Buffer.from(key, 'base64');

// Encrypt using LibSodium.
const encryptedBytes = sodium.seal(messageBytes, keyBytes);

// Base64 the encrypted secret
const encrypted = Buffer.from(encryptedBytes).toString('base64');

console.log(encrypted);
```


#### Example encrypting a secret using Python

Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.

```
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
  \"""Encrypt a Unicode string using the public key.\"""
  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
  sealed_box = public.SealedBox(public_key)
  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
  return b64encode(encrypted).decode("utf-8")
```

#### Example encrypting a secret using C#

Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.

```
var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");

var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);

Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
```

#### Example encrypting a secret using Ruby

Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.

```ruby
require "rbnacl"
require "base64"

key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
public_key = RbNaCl::PublicKey.new(key)

box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
encrypted_secret = box.encrypt("my_secret")

# Print the base64 encoded secret
puts Base64.strict_encode64(encrypted_secret)
```
        
        https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret
        /repos/{owner}/{repo}/actions/secrets/{secret_name}
        
        arguments:
        owner -- 
        repo -- 
        secret_name -- secret_name parameter
        encrypted_value -- Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
        key_id -- ID of the key you used to encrypt the secret.
        

        """
    
        data = {
        'encrypted_value': encrypted_value,
        'key_id': key_id,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/actions/secrets/{secret_name}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ActionsCreateOrUpdateRepoSecretSuccess(**r.json())
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsDeleteRepoSecret(self, owner:str, repo:str, secret_name:str):
        """Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-a-repository-secret
        /repos/{owner}/{repo}/actions/secrets/{secret_name}
        
        arguments:
        owner -- 
        repo -- 
        secret_name -- secret_name parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/actions/secrets/{secret_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListRepoWorkflows(self, owner:str, repo:str,per_page=30, page=1):
        """Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-repository-workflows
        /repos/{owner}/{repo}/actions/workflows
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/workflows", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListRepoWorkflowsSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetWorkflow(self, owner:str, repo:str, workflow_id:('integer', 'string')):
        """Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-a-workflow
        /repos/{owner}/{repo}/actions/workflows/{workflow_id}
        
        arguments:
        owner -- 
        repo -- 
        workflow_id -- The ID of the workflow. You can also pass the workflow file name as a string.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/workflows/{workflow_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Workflow(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsDisableWorkflow(self, owner:str, repo:str, workflow_id:('integer', 'string')):
        """Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#disable-a-workflow
        /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable
        
        arguments:
        owner -- 
        repo -- 
        workflow_id -- The ID of the workflow. You can also pass the workflow file name as a string.
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsCreateWorkflowDispatch(self, owner:str, repo:str, workflow_id:('integer', 'string'),ref:str, inputs:object=None):
        """You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.

You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
        
        https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event
        /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches
        
        arguments:
        owner -- 
        repo -- 
        workflow_id -- The ID of the workflow. You can also pass the workflow file name as a string.
        ref -- The git reference for the workflow. The reference can be a branch or tag name.
        inputs -- Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
        

        """
    
        data = {
        'ref': ref,
        'inputs': inputs,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsEnableWorkflow(self, owner:str, repo:str, workflow_id:('integer', 'string')):
        """Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#enable-a-workflow
        /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable
        
        arguments:
        owner -- 
        repo -- 
        workflow_id -- The ID of the workflow. You can also pass the workflow file name as a string.
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsListWorkflowRuns(self, owner:str, repo:str, workflow_id:('integer', 'string'),actor=None, branch=None, event=None, status='None', per_page=30, page=1, created=None):
        """List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).

Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
        
        https://docs.github.com/rest/reference/actions#list-workflow-runs
        /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
        
        arguments:
        owner -- 
        repo -- 
        workflow_id -- The ID of the workflow. You can also pass the workflow file name as a string.
        actor -- Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
        branch -- Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
        event -- Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
        status -- Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)."
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        created -- 
        
        """
        
        data = {}
        if actor is not None:
            data['actor'] = actor
        if branch is not None:
            data['branch'] = branch
        if event is not None:
            data['event'] = event
        if status is not None:
            data['status'] = status
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        if created is not None:
            data['created'] = created
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListWorkflowRunsSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetWorkflowUsage(self, owner:str, repo:str, workflow_id:('integer', 'string')):
        """Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".

You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-workflow-usage
        /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing
        
        arguments:
        owner -- 
        repo -- 
        workflow_id -- The ID of the workflow. You can also pass the workflow file name as a string.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WorkflowUsage(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsListEnvironmentSecrets(self, repository_id:int, environment_name:str,per_page=30, page=1):
        """Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#list-environment-secrets
        /repositories/{repository_id}/environments/{environment_name}/secrets
        
        arguments:
        repository_id -- 
        environment_name -- The name of the environment
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repositories/{repository_id}/environments/{environment_name}/secrets", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsListEnvironmentSecretsSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetEnvironmentPublicKey(self, repository_id:int, environment_name:str):
        """Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-an-environment-public-key
        /repositories/{repository_id}/environments/{environment_name}/secrets/public-key
        
        arguments:
        repository_id -- 
        environment_name -- The name of the environment
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repositories/{repository_id}/environments/{environment_name}/secrets/public-key", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Actionspublickey(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsGetEnvironmentSecret(self, repository_id:int, environment_name:str, secret_name:str):
        """Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#get-an-environment-secret
        /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
        
        arguments:
        repository_id -- 
        environment_name -- The name of the environment
        secret_name -- secret_name parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ActionsSecret(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ActionsCreateOrUpdateEnvironmentSecret(self, repository_id:int, environment_name:str, secret_name:str,encrypted_value:str=None, key_id:str=None):
        """Creates or updates an environment secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
this endpoint.

#### Example encrypting a secret using Node.js

Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.

```
const sodium = require('tweetsodium');

const key = "base64-encoded-public-key";
const value = "plain-text-secret";

// Convert the message and key to Uint8Array's (Buffer implements that interface)
const messageBytes = Buffer.from(value);
const keyBytes = Buffer.from(key, 'base64');

// Encrypt using LibSodium.
const encryptedBytes = sodium.seal(messageBytes, keyBytes);

// Base64 the encrypted secret
const encrypted = Buffer.from(encryptedBytes).toString('base64');

console.log(encrypted);
```


#### Example encrypting a secret using Python

Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.

```
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
  \"""Encrypt a Unicode string using the public key.\"""
  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
  sealed_box = public.SealedBox(public_key)
  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
  return b64encode(encrypted).decode("utf-8")
```

#### Example encrypting a secret using C#

Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.

```
var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");

var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);

Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
```

#### Example encrypting a secret using Ruby

Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.

```ruby
require "rbnacl"
require "base64"

key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
public_key = RbNaCl::PublicKey.new(key)

box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
encrypted_secret = box.encrypt("my_secret")

# Print the base64 encoded secret
puts Base64.strict_encode64(encrypted_secret)
```
        
        https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret
        /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
        
        arguments:
        repository_id -- 
        environment_name -- The name of the environment
        secret_name -- secret_name parameter
        encrypted_value -- Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
        key_id -- ID of the key you used to encrypt the secret.
        

        """
    
        data = {
        'encrypted_value': encrypted_value,
        'key_id': key_id,
        
        }
        
        
        r = requests.put(f"{self._url}/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return EmptyObject(**r.json())
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ActionsDeleteEnvironmentSecret(self, repository_id:int, environment_name:str, secret_name:str):
        """Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
        
        https://docs.github.com/rest/reference/actions#delete-an-environment-secret
        /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
        
        arguments:
        repository_id -- 
        environment_name -- The name of the environment
        secret_name -- secret_name parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def InteractionsGetRestrictionsForOrg(self, org:str):
        """Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
        
        https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization
        /orgs/{org}/interaction-limits
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/interaction-limits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        
        raise UnexpectedResult(r.status_code)

    def InteractionsSetRestrictionsForOrg(self, org:str,limit:str, expiry:str=None):
        """Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
        
        https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization
        /orgs/{org}/interaction-limits
        
        arguments:
        org -- 
        limit -- 
        expiry -- 
        

        """
    
        data = {
        'limit': limit,
        'expiry': expiry,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/interaction-limits", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return InteractionLimits(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def InteractionsRemoveRestrictionsForOrg(self, org:str):
        """Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
        
        https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization
        /orgs/{org}/interaction-limits
        
        arguments:
        org -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/interaction-limits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def InteractionsGetRestrictionsForRepo(self, owner:str, repo:str):
        """Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
        
        https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository
        /repos/{owner}/{repo}/interaction-limits
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/interaction-limits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        
        raise UnexpectedResult(r.status_code)

    def InteractionsSetRestrictionsForRepo(self, owner:str, repo:str,limit:str, expiry:str=None):
        """Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
        
        https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository
        /repos/{owner}/{repo}/interaction-limits
        
        arguments:
        owner -- 
        repo -- 
        limit -- 
        expiry -- 
        

        """
    
        data = {
        'limit': limit,
        'expiry': expiry,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/interaction-limits", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return InteractionLimits(**r.json())
            
        if r.status_code == 409:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def InteractionsRemoveRestrictionsForRepo(self, owner:str, repo:str):
        """Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
        
        https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository
        /repos/{owner}/{repo}/interaction-limits
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/interaction-limits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 409:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def InteractionsGetRestrictionsForAuthenticatedUser(self, ):
        """Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
        
        https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories
        /user/interaction-limits
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/interaction-limits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def InteractionsSetRestrictionsForAuthenticatedUser(self, limit:str, expiry:str=None):
        """Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
        
        https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories
        /user/interaction-limits
        
        arguments:
        limit -- 
        expiry -- 
        

        """
    
        data = {
        'limit': limit,
        'expiry': expiry,
        
        }
        
        
        r = requests.put(f"{self._url}/user/interaction-limits", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return InteractionLimits(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def InteractionsRemoveRestrictionsForAuthenticatedUser(self, ):
        """Removes any interaction restrictions from your public repositories.
        
        https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories
        /user/interaction-limits
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/interaction-limits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsListForOrg(self, org:str,exclude:list, per_page=30, page=1):
        """Lists the most recent migrations.
        
        https://docs.github.com/rest/reference/migrations#list-organization-migrations
        /orgs/{org}/migrations
        
        arguments:
        org -- 
        exclude -- Exclude attributes from the API response to improve performance
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if exclude is not None:
            data['exclude'] = exclude
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/migrations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Migration(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsStartForOrg(self, org:str,repositories:list, lock_repositories:bool=False, exclude_attachments:bool=False, exclude:list=None):
        """Initiates the generation of a migration archive.
        
        https://docs.github.com/rest/reference/migrations#start-an-organization-migration
        /orgs/{org}/migrations
        
        arguments:
        org -- 
        repositories -- A list of arrays indicating which repositories should be migrated.
        lock_repositories -- Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
        exclude_attachments -- Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
        exclude -- 
        

        """
    
        data = {
        'repositories': repositories,
        'lock_repositories': lock_repositories,
        'exclude_attachments': exclude_attachments,
        'exclude': exclude,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/migrations", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Migration(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def MigrationsGetStatusForOrg(self, org:str, migration_id:int,exclude:list):
        """Fetches the status of a migration.

The `state` of a migration can be one of the following values:

*   `pending`, which means the migration hasn't started yet.
*   `exporting`, which means the migration is in progress.
*   `exported`, which means the migration finished successfully.
*   `failed`, which means the migration failed.
        
        https://docs.github.com/rest/reference/migrations#get-an-organization-migration-status
        /orgs/{org}/migrations/{migration_id}
        
        arguments:
        org -- 
        migration_id -- migration_id parameter
        exclude -- Exclude attributes from the API response to improve performance
        
        """
        
        data = {}
        if exclude is not None:
            data['exclude'] = exclude
        
        
        r = requests.get(f"{self._url}/orgs/{org}/migrations/{migration_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Migration(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsDownloadArchiveForOrg(self, org:str, migration_id:int):
        """Fetches the URL to a migration archive.
        
        https://docs.github.com/rest/reference/migrations#download-an-organization-migration-archive
        /orgs/{org}/migrations/{migration_id}/archive
        
        arguments:
        org -- 
        migration_id -- migration_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/migrations/{migration_id}/archive", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsDeleteArchiveForOrg(self, org:str, migration_id:int):
        """Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
        
        https://docs.github.com/rest/reference/migrations#delete-an-organization-migration-archive
        /orgs/{org}/migrations/{migration_id}/archive
        
        arguments:
        org -- 
        migration_id -- migration_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/migrations/{migration_id}/archive", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsUnlockRepoForOrg(self, org:str, migration_id:int, repo_name:str):
        """Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
        
        https://docs.github.com/rest/reference/migrations#unlock-an-organization-repository
        /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock
        
        arguments:
        org -- 
        migration_id -- migration_id parameter
        repo_name -- repo_name parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsListReposForOrg(self, org:str, migration_id:int,per_page=30, page=1):
        """List all the repositories for this organization migration.
        
        https://docs.github.com/rest/reference/migrations#list-repositories-in-an-organization-migration
        /orgs/{org}/migrations/{migration_id}/repositories
        
        arguments:
        org -- 
        migration_id -- migration_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/migrations/{migration_id}/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsGetImportStatus(self, owner:str, repo:str):
        """View the progress of an import.

**Import status**

This section includes details about the possible values of the `status` field of the Import Progress response.

An import that does not have errors will progress through these steps:

*   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
*   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
*   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
*   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
*   `complete` - the import is complete, and the repository is ready on GitHub.

If there are problems, you will see one of these in the `status` field:

*   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
*   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=rest-api) for more information.
*   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
*   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
*   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.

**The project_choices field**

When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.

**Git LFS related fields**

This section includes details about Git LFS related fields that may be present in the Import Progress response.

*   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
*   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
*   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
*   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
        
        https://docs.github.com/rest/reference/migrations#get-an-import-status
        /repos/{owner}/{repo}/import
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/import", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Import(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsStartImport(self, owner:str, repo:str,vcs_url:str, vcs:str=None, vcs_username:str=None, vcs_password:str=None, tfvc_project:str=None):
        """Start a source import to a GitHub repository using GitHub Importer.
        
        https://docs.github.com/rest/reference/migrations#start-an-import
        /repos/{owner}/{repo}/import
        
        arguments:
        owner -- 
        repo -- 
        vcs_url -- The URL of the originating repository.
        vcs -- The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
        vcs_username -- If authentication is required, the username to provide to `vcs_url`.
        vcs_password -- If authentication is required, the password to provide to `vcs_url`.
        tfvc_project -- For a tfvc import, the name of the project that is being imported.
        

        """
    
        data = {
        'vcs_url': vcs_url,
        'vcs': vcs,
        'vcs_username': vcs_username,
        'vcs_password': vcs_password,
        'tfvc_project': tfvc_project,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/import", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Import(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def MigrationsUpdateImport(self, owner:str, repo:str,vcs_username:str=None, vcs_password:str=None, vcs:str=None, tfvc_project:str=None):
        """An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
request. If no parameters are provided, the import will be restarted.
        
        https://docs.github.com/rest/reference/migrations#update-an-import
        /repos/{owner}/{repo}/import
        
        arguments:
        owner -- 
        repo -- 
        vcs_username -- The username to provide to the originating repository.
        vcs_password -- The password to provide to the originating repository.
        vcs -- 
        tfvc_project -- 
        

        """
    
        data = {
        'vcs_username': vcs_username,
        'vcs_password': vcs_password,
        'vcs': vcs,
        'tfvc_project': tfvc_project,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/import", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Import(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def MigrationsCancelImport(self, owner:str, repo:str):
        """Stop an import for a repository.
        
        https://docs.github.com/rest/reference/migrations#cancel-an-import
        /repos/{owner}/{repo}/import
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/import", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsGetCommitAuthors(self, owner:str, repo:str,since=None):
        """Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.

This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
        
        https://docs.github.com/rest/reference/migrations#get-commit-authors
        /repos/{owner}/{repo}/import/authors
        
        arguments:
        owner -- 
        repo -- 
        since -- A user ID. Only return users with an ID greater than this ID.
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/import/authors", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PorterAuthor(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsMapCommitAuthor(self, owner:str, repo:str, author_id:int,email:str=None, name:str=None):
        """Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
        
        https://docs.github.com/rest/reference/migrations#map-a-commit-author
        /repos/{owner}/{repo}/import/authors/{author_id}
        
        arguments:
        owner -- 
        repo -- 
        author_id -- 
        email -- The new Git author email.
        name -- The new Git author name.
        

        """
    
        data = {
        'email': email,
        'name': name,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/import/authors/{author_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PorterAuthor(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def MigrationsGetLargeFiles(self, owner:str, repo:str):
        """List files larger than 100MB found during the import
        
        https://docs.github.com/rest/reference/migrations#get-large-files
        /repos/{owner}/{repo}/import/large_files
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/import/large_files", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PorterLargeFile(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsSetLfsPreference(self, owner:str, repo:str,use_lfs:str):
        """You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
        
        https://docs.github.com/rest/reference/migrations#update-git-lfs-preference
        /repos/{owner}/{repo}/import/lfs
        
        arguments:
        owner -- 
        repo -- 
        use_lfs -- Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).
        

        """
    
        data = {
        'use_lfs': use_lfs,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/import/lfs", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Import(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def MigrationsListForAuthenticatedUser(self, per_page=30, page=1):
        """Lists all migrations a user has started.
        
        https://docs.github.com/rest/reference/migrations#list-user-migrations
        /user/migrations
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/migrations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Migration(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsStartForAuthenticatedUser(self, repositories:list, lock_repositories:bool=None, exclude_attachments:bool=None, exclude:list=None):
        """Initiates the generation of a user migration archive.
        
        https://docs.github.com/rest/reference/migrations#start-a-user-migration
        /user/migrations
        
        arguments:
        repositories -- 
        lock_repositories -- Lock the repositories being migrated at the start of the migration
        exclude_attachments -- Do not include attachments in the migration
        exclude -- Exclude attributes from the API response to improve performance
        

        """
    
        data = {
        'repositories': repositories,
        'lock_repositories': lock_repositories,
        'exclude_attachments': exclude_attachments,
        'exclude': exclude,
        
        }
        
        
        r = requests.post(f"{self._url}/user/migrations", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Migration(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def MigrationsGetStatusForAuthenticatedUser(self, migration_id:int,exclude=None):
        """Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:

*   `pending` - the migration hasn't started yet.
*   `exporting` - the migration is in progress.
*   `exported` - the migration finished successfully.
*   `failed` - the migration failed.

Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
        
        https://docs.github.com/rest/reference/migrations#get-a-user-migration-status
        /user/migrations/{migration_id}
        
        arguments:
        migration_id -- migration_id parameter
        exclude -- 
        
        """
        
        data = {}
        if exclude is not None:
            data['exclude'] = exclude
        
        
        r = requests.get(f"{self._url}/user/migrations/{migration_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Migration(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsGetArchiveForAuthenticatedUser(self, migration_id:int):
        """Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:

*   attachments
*   bases
*   commit\_comments
*   issue\_comments
*   issue\_events
*   issues
*   milestones
*   organizations
*   projects
*   protected\_branches
*   pull\_request\_reviews
*   pull\_requests
*   releases
*   repositories
*   review\_comments
*   schema
*   users

The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
        
        https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive
        /user/migrations/{migration_id}/archive
        
        arguments:
        migration_id -- migration_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/migrations/{migration_id}/archive", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsDeleteArchiveForAuthenticatedUser(self, migration_id:int):
        """Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
        
        https://docs.github.com/rest/reference/migrations#delete-a-user-migration-archive
        /user/migrations/{migration_id}/archive
        
        arguments:
        migration_id -- migration_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/migrations/{migration_id}/archive", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsUnlockRepoForAuthenticatedUser(self, migration_id:int, repo_name:str):
        """Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
        
        https://docs.github.com/rest/reference/migrations#unlock-a-user-repository
        /user/migrations/{migration_id}/repos/{repo_name}/lock
        
        arguments:
        migration_id -- migration_id parameter
        repo_name -- repo_name parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/migrations/{migration_id}/repos/{repo_name}/lock", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def MigrationsListReposForUser(self, migration_id:int,per_page=30, page=1):
        """Lists all the repositories for this user migration.
        
        https://docs.github.com/rest/reference/migrations#list-repositories-for-a-user-migration
        /user/migrations/{migration_id}/repositories
        
        arguments:
        migration_id -- migration_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/migrations/{migration_id}/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesGetPackageForOrganization(self, org:str, package_type:str, package_name:str):
        """Gets a specific package in an organization.

To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization
        /orgs/{org}/packages/{package_type}/{package_name}
        
        arguments:
        org -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/packages/{package_type}/{package_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Package(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesDeletePackageForOrg(self, org:str, package_type:str, package_name:str):
        """Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.

To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
- If `package_type` is not `container`, your token must also include the `repo` scope.
- If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        
        https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization
        /orgs/{org}/packages/{package_type}/{package_name}
        
        arguments:
        org -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/packages/{package_type}/{package_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesRestorePackageForOrg(self, org:str, package_type:str, package_name:str):
        """Restores an entire package in an organization.

You can restore a deleted package under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
- If `package_type` is not `container`, your token must also include the `repo` scope.
- If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
        
        https://docs.github.com/rest/reference/packages#restore-a-package-for-an-organization
        /orgs/{org}/packages/{package_type}/{package_name}/restore
        
        arguments:
        org -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        token -- package token
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/packages/{package_type}/{package_name}/restore", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PackagesGetAllPackageVersionsForPackageOwnedByOrg(self, org:str, package_type:str, package_name:str,page=1, per_page=30, state='active'):
        """Returns all package versions for a package owned by an organization.

To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-an-organization
        /orgs/{org}/packages/{package_type}/{package_name}/versions
        
        arguments:
        org -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        state -- The state of the package, either active or deleted.
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        if state is not None:
            data['state'] = state
        
        
        r = requests.get(f"{self._url}/orgs/{org}/packages/{package_type}/{package_name}/versions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PackageVersion(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesGetPackageVersionForOrganization(self, org:str, package_type:str, package_name:str, package_version_id:int):
        """Gets a specific package version in an organization.

You must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-a-package-version-for-an-organization
        /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
        
        arguments:
        org -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        package_version_id -- Unique identifier of the package version.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PackageVersion(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesDeletePackageVersionForOrg(self, org:str, package_type:str, package_name:str, package_version_id:int):
        """Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.

To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
- If `package_type` is not `container`, your token must also include the `repo` scope.
- If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
        
        https://docs.github.com/rest/reference/packages#delete-a-package-version-for-an-organization
        /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
        
        arguments:
        org -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        package_version_id -- Unique identifier of the package version.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesRestorePackageVersionForOrg(self, org:str, package_type:str, package_name:str, package_version_id:int):
        """Restores a specific package version in an organization.

You can restore a deleted package under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
- If `package_type` is not `container`, your token must also include the `repo` scope.
- If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
        
        https://docs.github.com/rest/reference/packages#restore-a-package-version-for-an-organization
        /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
        
        arguments:
        org -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        package_version_id -- Unique identifier of the package version.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PackagesGetPackageForAuthenticatedUser(self, package_type:str, package_name:str):
        """Gets a specific package for a package owned by the authenticated user.

To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user
        /user/packages/{package_type}/{package_name}
        
        arguments:
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/packages/{package_type}/{package_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Package(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesDeletePackageForAuthenticatedUser(self, package_type:str, package_name:str):
        """Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.

To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#delete-a-package-for-the-authenticated-user
        /user/packages/{package_type}/{package_name}
        
        arguments:
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/packages/{package_type}/{package_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesRestorePackageForAuthenticatedUser(self, package_type:str, package_name:str):
        """Restores a package owned by the authenticated user.

You can restore a deleted package under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#restore-a-package-for-the-authenticated-user
        /user/packages/{package_type}/{package_name}/restore
        
        arguments:
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        token -- package token
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/user/packages/{package_type}/{package_name}/restore", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(self, package_type:str, package_name:str,page=1, per_page=30, state='active'):
        """Returns all package versions for a package owned by the authenticated user.

To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user
        /user/packages/{package_type}/{package_name}/versions
        
        arguments:
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        state -- The state of the package, either active or deleted.
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        if state is not None:
            data['state'] = state
        
        
        r = requests.get(f"{self._url}/user/packages/{package_type}/{package_name}/versions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PackageVersion(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesGetPackageVersionForAuthenticatedUser(self, package_type:str, package_name:str, package_version_id:int):
        """Gets a specific package version for a package owned by the authenticated user.

To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user
        /user/packages/{package_type}/{package_name}/versions/{package_version_id}
        
        arguments:
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        package_version_id -- Unique identifier of the package version.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/packages/{package_type}/{package_name}/versions/{package_version_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PackageVersion(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesDeletePackageVersionForAuthenticatedUser(self, package_type:str, package_name:str, package_version_id:int):
        """Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.

To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#delete-a-package-version-for-the-authenticated-user
        /user/packages/{package_type}/{package_name}/versions/{package_version_id}
        
        arguments:
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        package_version_id -- Unique identifier of the package version.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/packages/{package_type}/{package_name}/versions/{package_version_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesRestorePackageVersionForAuthenticatedUser(self, package_type:str, package_name:str, package_version_id:int):
        """Restores a package version owned by the authenticated user.

You can restore a deleted package version under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.

To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user
        /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
        
        arguments:
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        package_version_id -- Unique identifier of the package version.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PackagesGetPackageForUser(self, username:str, package_type:str, package_name:str):
        """Gets a specific package metadata for a public package owned by a user.

To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-a-package-for-a-user
        /users/{username}/packages/{package_type}/{package_name}
        
        arguments:
        username -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}/packages/{package_type}/{package_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Package(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesGetAllPackageVersionsForPackageOwnedByUser(self, username:str, package_type:str, package_name:str):
        """Returns all package versions for a public package owned by a specified user.

To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-a-user
        /users/{username}/packages/{package_type}/{package_name}/versions
        
        arguments:
        username -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}/packages/{package_type}/{package_name}/versions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PackageVersion(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PackagesGetPackageVersionForUser(self, username:str, package_type:str, package_name:str, package_version_id:int):
        """Gets a specific package version for a public package owned by a specified user.

At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
If `package_type` is not `container`, your token must also include the `repo` scope.
        
        https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user
        /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
        
        arguments:
        username -- 
        package_type -- The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
        package_name -- The name of the package.
        package_version_id -- Unique identifier of the package version.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PackageVersion(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsListForOrg(self, org:str,state='open', per_page=30, page=1):
        """Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        
        https://docs.github.com/rest/reference/projects#list-organization-projects
        /orgs/{org}/projects
        
        arguments:
        org -- 
        state -- Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if state is not None:
            data['state'] = state
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/projects", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Project(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsCreateForOrg(self, org:str,name:str, body:str=None):
        """Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        
        https://docs.github.com/rest/reference/projects#create-an-organization-project
        /orgs/{org}/projects
        
        arguments:
        org -- 
        name -- The name of the project.
        body -- The description of the project.
        

        """
    
        data = {
        'name': name,
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/projects", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Project(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsGetCard(self, card_id:int):
        """
        
        https://docs.github.com/rest/reference/projects#get-a-project-card
        /projects/columns/cards/{card_id}
        
        arguments:
        card_id -- card_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/projects/columns/cards/{card_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ProjectCard(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsUpdateCard(self, card_id:int,note:str=None, archived:bool=None):
        """
        
        https://docs.github.com/rest/reference/projects#update-a-project-card
        /projects/columns/cards/{card_id}
        
        arguments:
        card_id -- card_id parameter
        note -- The project card's note
        archived -- Whether or not the card is archived
        

        """
    
        data = {
        'note': note,
        'archived': archived,
        
        }
        
        
        r = requests.patch(f"{self._url}/projects/columns/cards/{card_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ProjectCard(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsDeleteCard(self, card_id:int):
        """
        
        https://docs.github.com/rest/reference/projects#delete-a-project-card
        /projects/columns/cards/{card_id}
        
        arguments:
        card_id -- card_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/projects/columns/cards/{card_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return ProjectsDeleteCardForbidden(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsMoveCard(self, card_id:int,position:str, column_id:int=None):
        """
        
        https://docs.github.com/rest/reference/projects#move-a-project-card
        /projects/columns/cards/{card_id}/moves
        
        arguments:
        card_id -- card_id parameter
        position -- The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
        column_id -- The unique identifier of the column the card should be moved to
        

        """
    
        data = {
        'position': position,
        'column_id': column_id,
        
        }
        
        
        r = requests.post(f"{self._url}/projects/columns/cards/{card_id}/moves", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ProjectsMoveCardSuccess(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return ProjectsMoveCardForbidden(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return ProjectsMoveCard503(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsGetColumn(self, column_id:int):
        """
        
        https://docs.github.com/rest/reference/projects#get-a-project-column
        /projects/columns/{column_id}
        
        arguments:
        column_id -- column_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/projects/columns/{column_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ProjectColumn(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsUpdateColumn(self, column_id:int,name:str):
        """
        
        https://docs.github.com/rest/reference/projects#update-a-project-column
        /projects/columns/{column_id}
        
        arguments:
        column_id -- column_id parameter
        name -- Name of the project column
        

        """
    
        data = {
        'name': name,
        
        }
        
        
        r = requests.patch(f"{self._url}/projects/columns/{column_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ProjectColumn(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsDeleteColumn(self, column_id:int):
        """
        
        https://docs.github.com/rest/reference/projects#delete-a-project-column
        /projects/columns/{column_id}
        
        arguments:
        column_id -- column_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/projects/columns/{column_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsListCards(self, column_id:int,archived_state='not_archived', per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/projects#list-project-cards
        /projects/columns/{column_id}/cards
        
        arguments:
        column_id -- column_id parameter
        archived_state -- Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if archived_state is not None:
            data['archived_state'] = archived_state
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/projects/columns/{column_id}/cards", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and ProjectCard(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsCreateCard(self, column_id:int,object:object):
        """
        
        https://docs.github.com/rest/reference/projects#create-a-project-card
        /projects/columns/{column_id}/cards
        
        arguments:
        column_id -- column_id parameter
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.post(f"{self._url}/projects/columns/{column_id}/cards", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ProjectCard(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return r.json()
            
        if r.status_code == 503:
            return ProjectsCreateCard503(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsMoveColumn(self, column_id:int,position:str):
        """
        
        https://docs.github.com/rest/reference/projects#move-a-project-column
        /projects/columns/{column_id}/moves
        
        arguments:
        column_id -- column_id parameter
        position -- The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
        

        """
    
        data = {
        'position': position,
        
        }
        
        
        r = requests.post(f"{self._url}/projects/columns/{column_id}/moves", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ProjectsMoveColumnSuccess(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsGet(self, project_id:int):
        """Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        
        https://docs.github.com/rest/reference/projects#get-a-project
        /projects/{project_id}
        
        arguments:
        project_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/projects/{project_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Project(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsUpdate(self, project_id:int,name:str=None, body:str=None, state:str=None, organization_permission:str=None, private:bool=None):
        """Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        
        https://docs.github.com/rest/reference/projects#update-a-project
        /projects/{project_id}
        
        arguments:
        project_id -- 
        name -- Name of the project
        body -- Body of the project
        state -- State of the project; either 'open' or 'closed'
        organization_permission -- The baseline permission that all organization members have on this project
        private -- Whether or not this project can be seen by everyone.
        

        """
    
        data = {
        'name': name,
        'body': body,
        'state': state,
        'organization_permission': organization_permission,
        'private': private,
        
        }
        
        
        r = requests.patch(f"{self._url}/projects/{project_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Project(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return ProjectsUpdateForbidden(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsDelete(self, project_id:int):
        """Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
        
        https://docs.github.com/rest/reference/projects#delete-a-project
        /projects/{project_id}
        
        arguments:
        project_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/projects/{project_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return ProjectsDeleteForbidden(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsListCollaborators(self, project_id:int,affiliation='all', per_page=30, page=1):
        """Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
        
        https://docs.github.com/rest/reference/projects#list-project-collaborators
        /projects/{project_id}/collaborators
        
        arguments:
        project_id -- 
        affiliation -- Filters the collaborators by their affiliation. Can be one of:  
\* `outside`: Outside collaborators of a project that are not a member of the project's organization.  
\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  
\* `all`: All collaborators the authenticated user can see.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if affiliation is not None:
            data['affiliation'] = affiliation
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/projects/{project_id}/collaborators", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsAddCollaborator(self, project_id:int, username:str,permission:str='write'):
        """Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
        
        https://docs.github.com/rest/reference/projects#add-project-collaborator
        /projects/{project_id}/collaborators/{username}
        
        arguments:
        project_id -- 
        username -- 
        permission -- The permission to grant the collaborator.
        

        """
    
        data = {
        'permission': permission,
        
        }
        
        
        r = requests.put(f"{self._url}/projects/{project_id}/collaborators/{username}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsRemoveCollaborator(self, project_id:int, username:str):
        """Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
        
        https://docs.github.com/rest/reference/projects#remove-project-collaborator
        /projects/{project_id}/collaborators/{username}
        
        arguments:
        project_id -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/projects/{project_id}/collaborators/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsGetPermissionForUser(self, project_id:int, username:str):
        """Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
        
        https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user
        /projects/{project_id}/collaborators/{username}/permission
        
        arguments:
        project_id -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/projects/{project_id}/collaborators/{username}/permission", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return RepositoryCollaboratorPermission(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsListColumns(self, project_id:int,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/projects#list-project-columns
        /projects/{project_id}/columns
        
        arguments:
        project_id -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/projects/{project_id}/columns", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and ProjectColumn(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsCreateColumn(self, project_id:int,name:str):
        """
        
        https://docs.github.com/rest/reference/projects#create-a-project-column
        /projects/{project_id}/columns
        
        arguments:
        project_id -- 
        name -- Name of the project column
        

        """
    
        data = {
        'name': name,
        
        }
        
        
        r = requests.post(f"{self._url}/projects/{project_id}/columns", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ProjectColumn(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsListForRepo(self, owner:str, repo:str,state='open', per_page=30, page=1):
        """Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        
        https://docs.github.com/rest/reference/projects#list-repository-projects
        /repos/{owner}/{repo}/projects
        
        arguments:
        owner -- 
        repo -- 
        state -- Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if state is not None:
            data['state'] = state
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/projects", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Project(**entry) for entry in r.json() ]
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ProjectsCreateForRepo(self, owner:str, repo:str,name:str, body:str=None):
        """Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
        
        https://docs.github.com/rest/reference/projects#create-a-repository-project
        /repos/{owner}/{repo}/projects
        
        arguments:
        owner -- 
        repo -- 
        name -- The name of the project.
        body -- The description of the project.
        

        """
    
        data = {
        'name': name,
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/projects", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Project(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsCreateForAuthenticatedUser(self, name:str, body:str=None):
        """
        
        https://docs.github.com/rest/reference/projects#create-a-user-project
        /user/projects
        
        arguments:
        name -- Name of the project
        body -- Body of the project
        

        """
    
        data = {
        'name': name,
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/user/projects", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Project(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ProjectsListForUser(self, username:str,state='open', per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/projects#list-user-projects
        /users/{username}/projects
        
        arguments:
        username -- 
        state -- Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if state is not None:
            data['state'] = state
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/projects", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Project(**entry) for entry in r.json() ]
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListForOrg(self, org:str,type='None', sort='created', direction='None', per_page=30, page=1):
        """Lists repositories for the specified organization.
        
        https://docs.github.com/rest/reference/repos#list-organization-repositories
        /orgs/{org}/repos
        
        arguments:
        org -- 
        type -- Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token.
        sort -- Can be one of `created`, `updated`, `pushed`, `full_name`.
        direction -- Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if type is not None:
            data['type'] = type
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/repos", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateInOrg(self, org:str,name:str, description:str=None, homepage:str=None, private:bool=False, visibility:str=None, has_issues:bool=True, has_projects:bool=True, has_wiki:bool=True, is_template:bool=False, team_id:int=None, auto_init:bool=False, gitignore_template:str=None, license_template:str=None, allow_squash_merge:bool=True, allow_merge_commit:bool=True, allow_rebase_merge:bool=True, allow_auto_merge:bool=False, delete_branch_on_merge:bool=False):
        """Creates a new repository in the specified organization. The authenticated user must be a member of the organization.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository
        
        https://docs.github.com/rest/reference/repos#create-an-organization-repository
        /orgs/{org}/repos
        
        arguments:
        org -- 
        name -- The name of the repository.
        description -- A short description of the repository.
        homepage -- A URL with more information about the repository.
        private -- Whether the repository is private.
        visibility -- Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.  
The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
        has_issues -- Either `true` to enable issues for this repository or `false` to disable them.
        has_projects -- Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
        has_wiki -- Either `true` to enable the wiki for this repository or `false` to disable it.
        is_template -- Either `true` to make this repo available as a template repository or `false` to prevent it.
        team_id -- The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
        auto_init -- Pass `true` to create an initial commit with empty README.
        gitignore_template -- Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
        license_template -- Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
        allow_squash_merge -- Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
        allow_merge_commit -- Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
        allow_rebase_merge -- Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
        allow_auto_merge -- Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
        delete_branch_on_merge -- Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
        

        """
    
        data = {
        'name': name,
        'description': description,
        'homepage': homepage,
        'private': private,
        'visibility': visibility,
        'has_issues': has_issues,
        'has_projects': has_projects,
        'has_wiki': has_wiki,
        'is_template': is_template,
        'team_id': team_id,
        'auto_init': auto_init,
        'gitignore_template': gitignore_template,
        'license_template': license_template,
        'allow_squash_merge': allow_squash_merge,
        'allow_merge_commit': allow_merge_commit,
        'allow_rebase_merge': allow_rebase_merge,
        'allow_auto_merge': allow_auto_merge,
        'delete_branch_on_merge': delete_branch_on_merge,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/repos", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Repository(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGet(self, owner:str, repo:str):
        """When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.

The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
        
        https://docs.github.com/rest/reference/repos#get-a-repository
        /repos/{owner}/{repo}
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return FullRepository(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 301:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdate(self, owner:str, repo:str,name:str=None, description:str=None, homepage:str=None, private:bool=False, visibility:str=None, security_and_analysis:dict=None, has_issues:bool=True, has_projects:bool=True, has_wiki:bool=True, is_template:bool=False, default_branch:str=None, allow_squash_merge:bool=True, allow_merge_commit:bool=True, allow_rebase_merge:bool=True, allow_auto_merge:bool=False, delete_branch_on_merge:bool=False, archived:bool=False):
        """**Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
        
        https://docs.github.com/rest/reference/repos/#update-a-repository
        /repos/{owner}/{repo}
        
        arguments:
        owner -- 
        repo -- 
        name -- The name of the repository.
        description -- A short description of the repository.
        homepage -- A URL with more information about the repository.
        private -- Either `true` to make the repository private or `false` to make it public. Default: `false`.  
**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
        visibility -- Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.
        security_and_analysis -- Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis": {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
        has_issues -- Either `true` to enable issues for this repository or `false` to disable them.
        has_projects -- Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
        has_wiki -- Either `true` to enable the wiki for this repository or `false` to disable it.
        is_template -- Either `true` to make this repo available as a template repository or `false` to prevent it.
        default_branch -- Updates the default branch for this repository.
        allow_squash_merge -- Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
        allow_merge_commit -- Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
        allow_rebase_merge -- Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
        allow_auto_merge -- Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
        delete_branch_on_merge -- Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
        archived -- `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
        

        """
    
        data = {
        'name': name,
        'description': description,
        'homepage': homepage,
        'private': private,
        'visibility': visibility,
        'security_and_analysis': security_and_analysis,
        'has_issues': has_issues,
        'has_projects': has_projects,
        'has_wiki': has_wiki,
        'is_template': is_template,
        'default_branch': default_branch,
        'allow_squash_merge': allow_squash_merge,
        'allow_merge_commit': allow_merge_commit,
        'allow_rebase_merge': allow_rebase_merge,
        'allow_auto_merge': allow_auto_merge,
        'delete_branch_on_merge': delete_branch_on_merge,
        'archived': archived,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return FullRepository(**r.json())
            
        if r.status_code == 307:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDelete(self, owner:str, repo:str):
        """Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.

If an organization owner has configured the organization to prevent members from deleting organization-owned
repositories, you will get a `403 Forbidden` response.
        
        https://docs.github.com/rest/reference/repos#delete-a-repository
        /repos/{owner}/{repo}
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return ReposDeleteForbidden(**r.json())
            
        if r.status_code == 307:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListAutolinks(self, owner:str, repo:str,page=1):
        """This returns a list of autolinks configured for the given repository.

Information about autolinks are only available to repository administrators.
        
        https://docs.github.com/v3/repos#list-autolinks
        /repos/{owner}/{repo}/autolinks
        
        arguments:
        owner -- 
        repo -- 
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/autolinks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and AutolinkReference(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateAutolink(self, owner:str, repo:str,url_template:str, key_prefix:str):
        """Users with admin access to the repository can create an autolink.
        
        https://docs.github.com/v3/repos#create-an-autolink
        /repos/{owner}/{repo}/autolinks
        
        arguments:
        owner -- 
        repo -- 
        url_template -- The URL must contain <num> for the reference number.
        key_prefix -- The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.
        

        """
    
        data = {
        'url_template': url_template,
        'key_prefix': key_prefix,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/autolinks", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return AutolinkReference(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetAutolink(self, owner:str, repo:str, autolink_id:int):
        """This returns a single autolink reference by ID that was configured for the given repository.

Information about autolinks are only available to repository administrators.
        
        https://docs.github.com/v3/repos#get-autolink
        /repos/{owner}/{repo}/autolinks/{autolink_id}
        
        arguments:
        owner -- 
        repo -- 
        autolink_id -- autolink_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/autolinks/{autolink_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return AutolinkReference(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposDeleteAutolink(self, owner:str, repo:str, autolink_id:int):
        """This deletes a single autolink reference by ID that was configured for the given repository.

Information about autolinks are only available to repository administrators.
        
        https://docs.github.com/v3/repos#delete-autolink
        /repos/{owner}/{repo}/autolinks/{autolink_id}
        
        arguments:
        owner -- 
        repo -- 
        autolink_id -- autolink_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/autolinks/{autolink_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposEnableAutomatedSecurityFixes(self, owner:str, repo:str):
        """Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
        
        https://docs.github.com/rest/reference/repos#enable-automated-security-fixes
        /repos/{owner}/{repo}/automated-security-fixes
        
        arguments:
        owner -- 
        repo -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/automated-security-fixes", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ReposDisableAutomatedSecurityFixes(self, owner:str, repo:str):
        """Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
        
        https://docs.github.com/rest/reference/repos#disable-automated-security-fixes
        /repos/{owner}/{repo}/automated-security-fixes
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/automated-security-fixes", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListBranches(self, owner:str, repo:str,protected=None, per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/repos#list-branches
        /repos/{owner}/{repo}/branches
        
        arguments:
        owner -- 
        repo -- 
        protected -- Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if protected is not None:
            data['protected'] = protected
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and ShortBranch(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetBranch(self, owner:str, repo:str, branch:str):
        """
        
        https://docs.github.com/rest/reference/repos#get-a-branch
        /repos/{owner}/{repo}/branches/{branch}
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return BranchWithProtection(**r.json())
            
        if r.status_code == 301:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetBranchProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#get-branch-protection
        /repos/{owner}/{repo}/branches/{branch}/protection
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return BranchProtection(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdateBranchProtection(self, owner:str, repo:str, branch:str,restrictions:dict, required_pull_request_reviews:dict, enforce_admins:bool, required_status_checks:dict, required_linear_history:bool=None, allow_force_pushes:bool=None, allow_deletions:bool=None, required_conversation_resolution:bool=None):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Protecting a branch requires admin or owner permissions to the repository.

**Note**: Passing new arrays of `users` and `teams` replaces their previous values.

**Note**: The list of users, apps, and teams in total is limited to 100 items.
        
        https://docs.github.com/rest/reference/repos#update-branch-protection
        /repos/{owner}/{repo}/branches/{branch}/protection
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        restrictions -- Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
        required_pull_request_reviews -- Require at least one approving review on a pull request, before merging. Set to `null` to disable.
        enforce_admins -- Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
        required_status_checks -- Require status checks to pass before merging. Set to `null` to disable.
        required_linear_history -- Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
        allow_force_pushes -- Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
        allow_deletions -- Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
        required_conversation_resolution -- Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
        

        """
    
        data = {
        'restrictions': restrictions,
        'required_pull_request_reviews': required_pull_request_reviews,
        'enforce_admins': enforce_admins,
        'required_status_checks': required_status_checks,
        'required_linear_history': required_linear_history,
        'allow_force_pushes': allow_force_pushes,
        'allow_deletions': allow_deletions,
        'required_conversation_resolution': required_conversation_resolution,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ProtectedBranch(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteBranchProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#delete-branch-protection
        /repos/{owner}/{repo}/branches/{branch}/protection
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetAdminBranchProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#get-admin-branch-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ProtectedBranchAdminEnforced(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposSetAdminBranchProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
        
        https://docs.github.com/rest/reference/repos#set-admin-branch-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ProtectedBranchAdminEnforced(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteAdminBranchProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
        
        https://docs.github.com/rest/reference/repos#delete-admin-branch-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetPullRequestReviewProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#get-pull-request-review-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ProtectedBranchPullRequestReview(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdatePullRequestReviewProtection(self, owner:str, repo:str, branch:str,dismissal_restrictions:dict=None, dismiss_stale_reviews:bool=None, require_code_owner_reviews:bool=None, required_approving_review_count:int=None):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.

**Note**: Passing new arrays of `users` and `teams` replaces their previous values.
        
        https://docs.github.com/rest/reference/repos#update-pull-request-review-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        dismissal_restrictions -- Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
        dismiss_stale_reviews -- Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
        require_code_owner_reviews -- Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.
        required_approving_review_count -- Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.
        

        """
    
        data = {
        'dismissal_restrictions': dismissal_restrictions,
        'dismiss_stale_reviews': dismiss_stale_reviews,
        'require_code_owner_reviews': require_code_owner_reviews,
        'required_approving_review_count': required_approving_review_count,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ProtectedBranchPullRequestReview(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeletePullRequestReviewProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#delete-pull-request-review-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetCommitSignatureProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.

**Note**: You must enable branch protection to require signed commits.
        
        https://docs.github.com/rest/reference/repos#get-commit-signature-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ProtectedBranchAdminEnforced(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateCommitSignatureProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
        
        https://docs.github.com/rest/reference/repos#create-commit-signature-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ProtectedBranchAdminEnforced(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteCommitSignatureProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
        
        https://docs.github.com/rest/reference/repos#delete-commit-signature-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetStatusChecksProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#get-status-checks-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return StatusCheckPolicy(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdateStatusCheckProtection(self, owner:str, repo:str, branch:str,strict:bool=None, contexts:list=None):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
        
        https://docs.github.com/rest/reference/repos#update-status-check-potection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        strict -- Require branches to be up to date before merging.
        contexts -- The list of status checks to require in order to merge into this branch
        

        """
    
        data = {
        'strict': strict,
        'contexts': contexts,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return StatusCheckPolicy(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposRemoveStatusCheckProtection(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#remove-status-check-protection
        /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetAllStatusCheckContexts(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#get-all-status-check-contexts
        /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposAddStatusCheckContexts(self, owner:str, repo:str, branch:str,object:object):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#add-status-check-contexts
        /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposSetStatusCheckContexts(self, owner:str, repo:str, branch:str,object:object):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#set-status-check-contexts
        /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposRemoveStatusCheckContexts(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/repos#remove-status-check-contexts
        /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetAccessRestrictions(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists who has access to this protected branch.

**Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
        
        https://docs.github.com/rest/reference/repos#get-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return BranchRestrictionPolicy(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposDeleteAccessRestrictions(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Disables the ability to restrict who can push to this branch.
        
        https://docs.github.com/rest/reference/repos#delete-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetAppsWithAccessToProtectedBranch(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
        
        https://docs.github.com/rest/reference/repos#list-apps-with-access-to-the-protected-branch
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and GithubApp(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposAddAppAccessRestrictions(self, owner:str, repo:str, branch:str,object:object):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#add-app-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and GithubApp(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposSetAppAccessRestrictions(self, owner:str, repo:str, branch:str,object:object):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#set-app-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and GithubApp(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposRemoveAppAccessRestrictions(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#remove-app-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and GithubApp(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetTeamsWithAccessToProtectedBranch(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the teams who have push access to this branch. The list includes child teams.
        
        https://docs.github.com/rest/reference/repos#list-teams-with-access-to-the-protected-branch
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposAddTeamAccessRestrictions(self, owner:str, repo:str, branch:str,object:object):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified teams push access for this branch. You can also give push access to child teams.

| Type    | Description                                                                                                                                |
| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#add-team-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposSetTeamAccessRestrictions(self, owner:str, repo:str, branch:str,object:object):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.

| Type    | Description                                                                                                                                |
| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#set-team-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposRemoveTeamAccessRestrictions(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of a team to push to this branch. You can also remove push access for child teams.

| Type    | Description                                                                                                                                         |
| ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#remove-team-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetUsersWithAccessToProtectedBranch(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the people who have push access to this branch.
        
        https://docs.github.com/rest/reference/repos#list-users-with-access-to-the-protected-branch
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposAddUserAccessRestrictions(self, owner:str, repo:str, branch:str,object:object):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified people push access for this branch.

| Type    | Description                                                                                                                   |
| ------- | ----------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#add-user-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposSetUserAccessRestrictions(self, owner:str, repo:str, branch:str,object:object):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.

| Type    | Description                                                                                                                   |
| ------- | ----------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#set-user-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposRemoveUserAccessRestrictions(self, owner:str, repo:str, branch:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of a user to push to this branch.

| Type    | Description                                                                                                                                   |
| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
        
        https://docs.github.com/rest/reference/repos#remove-user-access-restrictions
        /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposRenameBranch(self, owner:str, repo:str, branch:str,new_name:str):
        """Renames a branch in a repository.

**Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".

The permissions required to use this endpoint depends on whether you are renaming the default branch.

To rename a non-default branch:

* Users must have push access.
* GitHub Apps must have the `contents:write` repository permission.

To rename the default branch:

* Users must have admin or owner permissions.
* GitHub Apps must have the `administration:write` repository permission.
        
        https://docs.github.com/rest/reference/repos#rename-a-branch
        /repos/{owner}/{repo}/branches/{branch}/rename
        
        arguments:
        owner -- 
        repo -- 
        branch -- The name of the branch.
        new_name -- The new name of the branch.
        

        """
    
        data = {
        'new_name': new_name,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/branches/{branch}/rename", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return BranchWithProtection(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposListCollaborators(self, owner:str, repo:str,affiliation='all', per_page=30, page=1):
        """For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.

Team members will include the members of child teams.
        
        https://docs.github.com/rest/reference/repos#list-repository-collaborators
        /repos/{owner}/{repo}/collaborators
        
        arguments:
        owner -- 
        repo -- 
        affiliation -- Filter collaborators returned by their affiliation. Can be one of:  
\* `outside`: All outside collaborators of an organization-owned repository.  
\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  
\* `all`: All collaborators the authenticated user can see.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if affiliation is not None:
            data['affiliation'] = affiliation
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/collaborators", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Collaborator(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCheckCollaborator(self, owner:str, repo:str, username:str):
        """For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.

Team members will include the members of child teams.
        
        https://docs.github.com/rest/reference/repos#check-if-a-user-is-a-repository-collaborator
        /repos/{owner}/{repo}/collaborators/{username}
        
        arguments:
        owner -- 
        repo -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/collaborators/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposAddCollaborator(self, owner:str, repo:str, username:str,permission:str='push', permissions:str=None):
        """This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."

The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).

**Rate limits**

You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
        
        https://docs.github.com/rest/reference/repos#add-a-repository-collaborator
        /repos/{owner}/{repo}/collaborators/{username}
        
        arguments:
        owner -- 
        repo -- 
        username -- 
        permission -- The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  
\* `pull` - can pull, but not push to or administer this repository.  
\* `push` - can pull and push, but not administer this repository.  
\* `admin` - can pull, push and administer this repository.  
\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  
\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
        permissions -- 
        

        """
    
        data = {
        'permission': permission,
        'permissions': permissions,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/collaborators/{username}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return RepositoryInvitation(**r.json())
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposRemoveCollaborator(self, owner:str, repo:str, username:str):
        """
        
        https://docs.github.com/rest/reference/repos#remove-a-repository-collaborator
        /repos/{owner}/{repo}/collaborators/{username}
        
        arguments:
        owner -- 
        repo -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/collaborators/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetCollaboratorPermissionLevel(self, owner:str, repo:str, username:str):
        """Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
        
        https://docs.github.com/rest/reference/repos#get-repository-permissions-for-a-user
        /repos/{owner}/{repo}/collaborators/{username}/permission
        
        arguments:
        owner -- 
        repo -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/collaborators/{username}/permission", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return RepositoryCollaboratorPermission(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListCommitCommentsForRepo(self, owner:str, repo:str,per_page=30, page=1):
        """Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).

Comments are ordered by ascending ID.
        
        https://docs.github.com/rest/reference/repos#list-commit-comments-for-a-repository
        /repos/{owner}/{repo}/comments
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CommitComment(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetCommitComment(self, owner:str, repo:str, comment_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#get-a-commit-comment
        /repos/{owner}/{repo}/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/comments/{comment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CommitComment(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdateCommitComment(self, owner:str, repo:str, comment_id:int,body:str):
        """
        
        https://docs.github.com/rest/reference/repos#update-a-commit-comment
        /repos/{owner}/{repo}/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        body -- The contents of the comment
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/comments/{comment_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return CommitComment(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteCommitComment(self, owner:str, repo:str, comment_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#delete-a-commit-comment
        /repos/{owner}/{repo}/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/comments/{comment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListCommits(self, owner:str, repo:str,sha=None, path=None, author=None, since=None, until=None, per_page=30, page=1):
        """**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
        
        https://docs.github.com/rest/reference/repos#list-commits
        /repos/{owner}/{repo}/commits
        
        arguments:
        owner -- 
        repo -- 
        sha -- SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
        path -- Only commits containing this file path will be returned.
        author -- GitHub login or email address by which to filter by commit author.
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        until -- Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sha is not None:
            data['sha'] = sha
        if path is not None:
            data['path'] = path
        if author is not None:
            data['author'] = author
        if since is not None:
            data['since'] = since
        if until is not None:
            data['until'] = until
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Commit(**entry) for entry in r.json() ]
            
        if r.status_code == 500:
            return BasicError(**r.json())
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 409:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListBranchesForHeadCommit(self, owner:str, repo:str, commit_sha:str):
        """Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
        
        https://docs.github.com/rest/reference/repos#list-branches-for-head-commit
        /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
        
        arguments:
        owner -- 
        repo -- 
        commit_sha -- commit_sha parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and BranchShort(**entry) for entry in r.json() ]
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListCommentsForCommit(self, owner:str, repo:str, commit_sha:str,per_page=30, page=1):
        """Use the `:commit_sha` to specify the commit that will have its comments listed.
        
        https://docs.github.com/rest/reference/repos#list-commit-comments
        /repos/{owner}/{repo}/commits/{commit_sha}/comments
        
        arguments:
        owner -- 
        repo -- 
        commit_sha -- commit_sha parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits/{commit_sha}/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CommitComment(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateCommitComment(self, owner:str, repo:str, commit_sha:str,body:str, path:str=None, position:int=None, line:int=None):
        """Create a comment for a commit using its `:commit_sha`.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/repos#create-a-commit-comment
        /repos/{owner}/{repo}/commits/{commit_sha}/comments
        
        arguments:
        owner -- 
        repo -- 
        commit_sha -- commit_sha parameter
        body -- The contents of the comment.
        path -- Relative path of the file to comment on.
        position -- Line index in the diff to comment on.
        line -- **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
        

        """
    
        data = {
        'body': body,
        'path': path,
        'position': position,
        'line': line,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/commits/{commit_sha}/comments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return CommitComment(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposListPullRequestsAssociatedWithCommit(self, owner:str, repo:str, commit_sha:str,per_page=30, page=1):
        """Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
        
        https://docs.github.com/rest/reference/repos#list-pull-requests-associated-with-a-commit
        /repos/{owner}/{repo}/commits/{commit_sha}/pulls
        
        arguments:
        owner -- 
        repo -- 
        commit_sha -- commit_sha parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits/{commit_sha}/pulls", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PullRequestSimple(**entry) for entry in r.json() ]
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetCommit(self, owner:str, repo:str, ref:str,page=1, per_page=30):
        """Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.

**Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.

You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.

To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
        
        https://docs.github.com/rest/reference/repos#get-a-commit
        /repos/{owner}/{repo}/commits/{ref}
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits/{ref}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Commit(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 500:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetCombinedStatusForRef(self, owner:str, repo:str, ref:str,per_page=30, page=1):
        """Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.

The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.

Additionally, a combined `state` is returned. The `state` is one of:

*   **failure** if any of the contexts report as `error` or `failure`
*   **pending** if there are no statuses or a context is `pending`
*   **success** if the latest status for all contexts is `success`
        
        https://docs.github.com/rest/reference/repos#get-the-combined-status-for-a-specific-reference
        /repos/{owner}/{repo}/commits/{ref}/status
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits/{ref}/status", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CombinedCommitStatus(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListCommitStatusesForRef(self, owner:str, repo:str, ref:str,per_page=30, page=1):
        """Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.

This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
        
        https://docs.github.com/rest/reference/repos#list-commit-statuses-for-a-reference
        /repos/{owner}/{repo}/commits/{ref}/statuses
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits/{ref}/statuses", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Status(**entry) for entry in r.json() ]
            
        if r.status_code == 301:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetCommunityProfileMetrics(self, owner:str, repo:str):
        """This endpoint will return all community profile metrics, including an
overall health score, repository description, the presence of documentation, detected
code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
README, and CONTRIBUTING files.

The `health_percentage` score is defined as a percentage of how many of
these four documents are present: README, CONTRIBUTING, LICENSE, and
CODE_OF_CONDUCT. For example, if all four documents are present, then
the `health_percentage` is `100`. If only one is present, then the
`health_percentage` is `25`.

`content_reports_enabled` is only returned for organization-owned repositories.
        
        https://docs.github.com/rest/reference/repos#get-community-profile-metrics
        /repos/{owner}/{repo}/community/profile
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/community/profile", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CommunityProfile(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCompareCommits(self, owner:str, repo:str, basehead:str,page=1, per_page=30):
        """The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.

The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.

The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.

**Working with large comparisons**

To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."

When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
        
        https://docs.github.com/rest/reference/repos#compare-two-commits
        /repos/{owner}/{repo}/compare/{basehead}
        
        arguments:
        owner -- 
        repo -- 
        basehead -- The base branch and head branch to compare. This parameter expects the format `{base}...{head}`.
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/compare/{basehead}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CommitComparison(**r.json())
            
        if r.status_code == 500:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetContent(self, owner:str, repo:str, path:str,ref=None):
        """Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
`:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories. 

Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
object format.

**Note**:
*   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
API](https://docs.github.com/rest/reference/git#get-a-tree).
*   This API supports files up to 1 megabyte in size.

#### If the content is a directory
The response will be an array of objects, one object for each item in the directory.
When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
_should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
In the next major version of the API, the type will be returned as "submodule".

#### If the content is a symlink 
If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object 
describing the symlink itself.

#### If the content is a submodule
The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
the submodule at that specific commit.

If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
github.com URLs (`html_url` and `_links["html"]`) will have null values.
        
        https://docs.github.com/rest/reference/repos#get-repository-content
        /repos/{owner}/{repo}/contents/{path}
        
        arguments:
        owner -- 
        repo -- 
        path -- path parameter
        ref -- The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
        
        """
        
        data = {}
        if ref is not None:
            data['ref'] = ref
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/contents/{path}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 302:
            return Found(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateOrUpdateFileContents(self, owner:str, repo:str, path:str,content:str, message:str, sha:str=None, branch:str=None, committer:dict=None, author:dict=None):
        """Creates a new file or replaces an existing file in a repository.
        
        https://docs.github.com/rest/reference/repos#create-or-update-file-contents
        /repos/{owner}/{repo}/contents/{path}
        
        arguments:
        owner -- 
        repo -- 
        path -- path parameter
        content -- The new file content, using Base64 encoding.
        message -- The commit message.
        sha -- **Required if you are updating a file**. The blob SHA of the file being replaced.
        branch -- The branch name. Default: the repository’s default branch (usually `master`)
        committer -- The person that committed the file. Default: the authenticated user.
        author -- The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
        

        """
    
        data = {
        'content': content,
        'message': message,
        'sha': sha,
        'branch': branch,
        'committer': committer,
        'author': author,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/contents/{path}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return FileCommit(**r.json())
            
        if r.status_code == 201:
            return FileCommit(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 409:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteFile(self, owner:str, repo:str, path:str):
        """Deletes a file in a repository.

You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.

The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.

You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
        
        https://docs.github.com/rest/reference/repos#delete-a-file
        /repos/{owner}/{repo}/contents/{path}
        
        arguments:
        owner -- 
        repo -- 
        path -- path parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/contents/{path}", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return FileCommit(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 409:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListContributors(self, owner:str, repo:str,anon=None, per_page=30, page=1):
        """Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.

GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
        
        https://docs.github.com/rest/reference/repos#list-repository-contributors
        /repos/{owner}/{repo}/contributors
        
        arguments:
        owner -- 
        repo -- 
        anon -- Set to `1` or `true` to include anonymous contributors in results.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if anon is not None:
            data['anon'] = anon
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/contributors", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Contributor(**entry) for entry in r.json() ]
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListDeployments(self, owner:str, repo:str,sha=None, ref=None, task=None, environment=None, per_page=30, page=1):
        """Simple filtering of deployments is available via query parameters:
        
        https://docs.github.com/rest/reference/repos#list-deployments
        /repos/{owner}/{repo}/deployments
        
        arguments:
        owner -- 
        repo -- 
        sha -- The SHA recorded at creation time.
        ref -- The name of the ref. This can be a branch, tag, or SHA.
        task -- The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
        environment -- The name of the environment that was deployed to (e.g., `staging` or `production`).
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sha is not None:
            data['sha'] = sha
        if ref is not None:
            data['ref'] = ref
        if task is not None:
            data['task'] = task
        if environment is not None:
            data['environment'] = environment
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/deployments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Deployment(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateDeployment(self, owner:str, repo:str,ref:str, task:str='deploy', auto_merge:bool=True, required_contexts:list=None, payload=None, environment:str='production', description:str='', transient_environment:bool=False, production_environment:bool=None):
        """Deployments offer a few configurable parameters with certain defaults.

The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
before we merge a pull request.

The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
makes it easier to track which environments have requested deployments. The default environment is `production`.

The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
return a failure response.

By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
not require any contexts or create any commit statuses, the deployment will always succeed.

The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
field that will be passed on when a deployment event is dispatched.

The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
application with debugging enabled.

Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.

#### Merged branch response
You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
a deployment. This auto-merge happens when:
*   Auto-merge option is enabled in the repository
*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
*   There are no merge conflicts

If there are no new commits in the base branch, a new request to create a deployment should give a successful
response.

#### Merge conflict response
This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.

#### Failed commit status checks
This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
        
        https://docs.github.com/rest/reference/repos#create-a-deployment
        /repos/{owner}/{repo}/deployments
        
        arguments:
        owner -- 
        repo -- 
        ref -- The ref to deploy. This can be a branch, tag, or SHA.
        task -- Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
        auto_merge -- Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
        required_contexts -- The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
        payload -- 
        environment -- Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
        description -- Short description of the deployment.
        transient_environment -- Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`  
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
        production_environment -- Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.  
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
        

        """
    
        data = {
        'ref': ref,
        'task': task,
        'auto_merge': auto_merge,
        'required_contexts': required_contexts,
        'payload': payload,
        'environment': environment,
        'description': description,
        'transient_environment': transient_environment,
        'production_environment': production_environment,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/deployments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Deployment(**r.json())
            
        if r.status_code == 202:
            return ReposCreateDeployment202(**r.json())
            
        if r.status_code == 409:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetDeployment(self, owner:str, repo:str, deployment_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#get-a-deployment
        /repos/{owner}/{repo}/deployments/{deployment_id}
        
        arguments:
        owner -- 
        repo -- 
        deployment_id -- deployment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/deployments/{deployment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Deployment(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposDeleteDeployment(self, owner:str, repo:str, deployment_id:int):
        """To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.

To set a deployment as inactive, you must:

*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
*   Mark the active deployment as inactive by adding any non-successful deployment status.

For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
        
        https://docs.github.com/rest/reference/repos#delete-a-deployment
        /repos/{owner}/{repo}/deployments/{deployment_id}
        
        arguments:
        owner -- 
        repo -- 
        deployment_id -- deployment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/deployments/{deployment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListDeploymentStatuses(self, owner:str, repo:str, deployment_id:int,per_page=30, page=1):
        """Users with pull access can view deployment statuses for a deployment:
        
        https://docs.github.com/rest/reference/repos#list-deployment-statuses
        /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
        
        arguments:
        owner -- 
        repo -- 
        deployment_id -- deployment_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and DeploymentStatus(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateDeploymentStatus(self, owner:str, repo:str, deployment_id:int,state:str, target_url:str='', log_url:str='', description:str='', environment:str=None, environment_url:str='', auto_inactive:bool=None):
        """Users with `push` access can create deployment statuses for a given deployment.

GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
        
        https://docs.github.com/rest/reference/repos#create-a-deployment-status
        /repos/{owner}/{repo}/deployments/{deployment_id}/statuses
        
        arguments:
        owner -- 
        repo -- 
        deployment_id -- deployment_id parameter
        state -- The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
        target_url -- The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
        log_url -- The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`  
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
        description -- A short description of the status. The maximum description length is 140 characters.
        environment -- Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
        environment_url -- Sets the URL for accessing your environment. Default: `""`  
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
        auto_inactive -- Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`  
**Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.  
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
        

        """
    
        data = {
        'state': state,
        'target_url': target_url,
        'log_url': log_url,
        'description': description,
        'environment': environment,
        'environment_url': environment_url,
        'auto_inactive': auto_inactive,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return DeploymentStatus(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetDeploymentStatus(self, owner:str, repo:str, deployment_id:int, status_id:int):
        """Users with pull access can view a deployment status for a deployment:
        
        https://docs.github.com/rest/reference/repos#get-a-deployment-status
        /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
        
        arguments:
        owner -- 
        repo -- 
        deployment_id -- deployment_id parameter
        status_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return DeploymentStatus(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateDispatchEvent(self, owner:str, repo:str,event_type:str, client_payload:object=None):
        """You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."

The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.

This endpoint requires write access to the repository by providing either:

  - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
  - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.

This input example shows how you can use the `client_payload` as a test to debug your workflow.
        
        https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event
        /repos/{owner}/{repo}/dispatches
        
        arguments:
        owner -- 
        repo -- 
        event_type -- A custom webhook event name.
        client_payload -- JSON payload with extra information about the webhook event that your action or worklow may use.
        

        """
    
        data = {
        'event_type': event_type,
        'client_payload': client_payload,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/dispatches", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetAllEnvironments(self, owner:str, repo:str):
        """Get all environments for a repository.

Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/repos#get-all-environments
        /repos/{owner}/{repo}/environments
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/environments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ReposGetAllEnvironmentsSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetEnvironment(self, owner:str, repo:str, environment_name:str):
        """Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/repos#get-an-environment
        /repos/{owner}/{repo}/environments/{environment_name}
        
        arguments:
        owner -- 
        repo -- 
        environment_name -- The name of the environment
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/environments/{environment_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Environment(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateOrUpdateEnvironment(self, owner:str, repo:str, environment_name:str,wait_timer:int=None, reviewers:list=None, deployment_branch_policy:dict=None):
        """Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."

**Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."

**Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."

You must authenticate using an access token with the repo scope to use this endpoint.
        
        https://docs.github.com/rest/reference/repos#create-or-update-an-environment
        /repos/{owner}/{repo}/environments/{environment_name}
        
        arguments:
        owner -- 
        repo -- 
        environment_name -- The name of the environment
        wait_timer -- 
        reviewers -- The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
        deployment_branch_policy -- 
        

        """
    
        data = {
        'wait_timer': wait_timer,
        'reviewers': reviewers,
        'deployment_branch_policy': deployment_branch_policy,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/environments/{environment_name}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Environment(**r.json())
            
        if r.status_code == 422:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteAnEnvironment(self, owner:str, repo:str, environment_name:str):
        """You must authenticate using an access token with the repo scope to use this endpoint.
        
        https://docs.github.com/rest/reference/repos#delete-an-environment
        /repos/{owner}/{repo}/environments/{environment_name}
        
        arguments:
        owner -- 
        repo -- 
        environment_name -- The name of the environment
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/environments/{environment_name}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListForks(self, owner:str, repo:str,sort='newest', per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/repos#list-forks
        /repos/{owner}/{repo}/forks
        
        arguments:
        owner -- 
        repo -- 
        sort -- The sort order. Can be either `newest`, `oldest`, or `stargazers`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sort is not None:
            data['sort'] = sort
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/forks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateFork(self, owner:str, repo:str,organization:str=None):
        """Create a fork for the authenticated user.

**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=rest-api).
        
        https://docs.github.com/rest/reference/repos#create-a-fork
        /repos/{owner}/{repo}/forks
        
        arguments:
        owner -- 
        repo -- 
        organization -- Optional parameter to specify the organization name if forking into an organization.
        

        """
    
        data = {
        'organization': organization,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/forks", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return FullRepository(**r.json())
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposListWebhooks(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/repos#list-repository-webhooks
        /repos/{owner}/{repo}/hooks
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/hooks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Webhook(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateWebhook(self, owner:str, repo:str,name:str=None, config:dict=None, events:list=['push'], active:bool=True):
        """Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
share the same `config` as long as those webhooks do not have any `events` that overlap.
        
        https://docs.github.com/rest/reference/repos#create-a-repository-webhook
        /repos/{owner}/{repo}/hooks
        
        arguments:
        owner -- 
        repo -- 
        name -- Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
        config -- Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
        events -- Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
        active -- Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
        

        """
    
        data = {
        'name': name,
        'config': config,
        'events': events,
        'active': active,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/hooks", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Webhook(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetWebhook(self, owner:str, repo:str, hook_id:int):
        """Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
        
        https://docs.github.com/rest/reference/repos#get-a-repository-webhook
        /repos/{owner}/{repo}/hooks/{hook_id}
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Webhook(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdateWebhook(self, owner:str, repo:str, hook_id:int,config:dict=None, events:list=['push'], add_events:list=None, remove_events:list=None, active:bool=True):
        """Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
        
        https://docs.github.com/rest/reference/repos#update-a-repository-webhook
        /repos/{owner}/{repo}/hooks/{hook_id}
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        config -- Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
        events -- Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
        add_events -- Determines a list of events to be added to the list of events that the Hook triggers for.
        remove_events -- Determines a list of events to be removed from the list of events that the Hook triggers for.
        active -- Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
        

        """
    
        data = {
        'config': config,
        'events': events,
        'add_events': add_events,
        'remove_events': remove_events,
        'active': active,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Webhook(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteWebhook(self, owner:str, repo:str, hook_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#delete-a-repository-webhook
        /repos/{owner}/{repo}/hooks/{hook_id}
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetWebhookConfigForRepo(self, owner:str, repo:str, hook_id:int):
        """Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."

Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
        
        https://docs.github.com/rest/reference/repos#get-a-webhook-configuration-for-a-repository
        /repos/{owner}/{repo}/hooks/{hook_id}/config
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}/config", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WebhookConfiguration(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdateWebhookConfigForRepo(self, owner:str, repo:str, hook_id:int,url:str=None, content_type:str=None, secret:str=None, insecure_ssl=None):
        """Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."

Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
        
        https://docs.github.com/rest/reference/repos#update-a-webhook-configuration-for-a-repository
        /repos/{owner}/{repo}/hooks/{hook_id}/config
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        url -- 
        content_type -- 
        secret -- 
        insecure_ssl -- 
        

        """
    
        data = {
        'url': url,
        'content_type': content_type,
        'secret': secret,
        'insecure_ssl': insecure_ssl,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}/config", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return WebhookConfiguration(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposListWebhookDeliveries(self, owner:str, repo:str, hook_id:int,per_page=30, cursor=None):
        """Returns a list of webhook deliveries for a webhook configured in a repository.
        
        https://docs.github.com/rest/reference/repos#list-deliveries-for-a-repository-webhook
        /repos/{owner}/{repo}/hooks/{hook_id}/deliveries
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        per_page -- Results per page (max 100)
        cursor -- Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if cursor is not None:
            data['cursor'] = cursor
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}/deliveries", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleWebhookDelivery(**entry) for entry in r.json() ]
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetWebhookDelivery(self, owner:str, repo:str, hook_id:int, delivery_id:int):
        """Returns a delivery for a webhook configured in a repository.
        
        https://docs.github.com/rest/reference/repos#get-a-delivery-for-a-repository-webhook
        /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        delivery_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return WebhookDelivery(**r.json())
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposRedeliverWebhookDelivery(self, owner:str, repo:str, hook_id:int, delivery_id:int):
        """Redeliver a webhook delivery for a webhook configured in a repository.
        
        https://docs.github.com/rest/reference/repos#redeliver-a-delivery-for-a-repository-webhook
        /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        delivery_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return r.json()
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposPingWebhook(self, owner:str, repo:str, hook_id:int):
        """This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
        
        https://docs.github.com/rest/reference/repos#ping-a-repository-webhook
        /repos/{owner}/{repo}/hooks/{hook_id}/pings
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}/pings", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposTestPushWebhook(self, owner:str, repo:str, hook_id:int):
        """This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.

**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
        
        https://docs.github.com/rest/reference/repos#test-the-push-repository-webhook
        /repos/{owner}/{repo}/hooks/{hook_id}/tests
        
        arguments:
        owner -- 
        repo -- 
        hook_id -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/hooks/{hook_id}/tests", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposListInvitations(self, owner:str, repo:str,per_page=30, page=1):
        """When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
        
        https://docs.github.com/rest/reference/repos#list-repository-invitations
        /repos/{owner}/{repo}/invitations
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/invitations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and RepositoryInvitation(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdateInvitation(self, owner:str, repo:str, invitation_id:int,permissions:str=None):
        """
        
        https://docs.github.com/rest/reference/repos#update-a-repository-invitation
        /repos/{owner}/{repo}/invitations/{invitation_id}
        
        arguments:
        owner -- 
        repo -- 
        invitation_id -- invitation_id parameter
        permissions -- The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
        

        """
    
        data = {
        'permissions': permissions,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/invitations/{invitation_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return RepositoryInvitation(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteInvitation(self, owner:str, repo:str, invitation_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#delete-a-repository-invitation
        /repos/{owner}/{repo}/invitations/{invitation_id}
        
        arguments:
        owner -- 
        repo -- 
        invitation_id -- invitation_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/invitations/{invitation_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListDeployKeys(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/repos#list-deploy-keys
        /repos/{owner}/{repo}/keys
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/keys", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and DeployKey(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateDeployKey(self, owner:str, repo:str,key:str, title:str=None, read_only:bool=None):
        """You can create a read-only deploy key.
        
        https://docs.github.com/rest/reference/repos#create-a-deploy-key
        /repos/{owner}/{repo}/keys
        
        arguments:
        owner -- 
        repo -- 
        key -- The contents of the key.
        title -- A name for the key.
        read_only -- If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
  
Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."
        

        """
    
        data = {
        'key': key,
        'title': title,
        'read_only': read_only,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/keys", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return DeployKey(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetDeployKey(self, owner:str, repo:str, key_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#get-a-deploy-key
        /repos/{owner}/{repo}/keys/{key_id}
        
        arguments:
        owner -- 
        repo -- 
        key_id -- key_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/keys/{key_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return DeployKey(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposDeleteDeployKey(self, owner:str, repo:str, key_id:int):
        """Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
        
        https://docs.github.com/rest/reference/repos#delete-a-deploy-key
        /repos/{owner}/{repo}/keys/{key_id}
        
        arguments:
        owner -- 
        repo -- 
        key_id -- key_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/keys/{key_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListLanguages(self, owner:str, repo:str):
        """Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
        
        https://docs.github.com/rest/reference/repos#list-repository-languages
        /repos/{owner}/{repo}/languages
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/languages", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        
        raise UnexpectedResult(r.status_code)

    def ReposMerge(self, owner:str, repo:str,head:str, base:str, commit_message:str=None):
        """
        
        https://docs.github.com/rest/reference/repos#merge-a-branch
        /repos/{owner}/{repo}/merges
        
        arguments:
        owner -- 
        repo -- 
        head -- The head to merge. This can be a branch name or a commit SHA1.
        base -- The name of the base branch that the head will be merged into.
        commit_message -- Commit message to use for the merge commit. If omitted, a default message will be used.
        

        """
    
        data = {
        'head': head,
        'base': base,
        'commit_message': commit_message,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/merges", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Commit(**r.json())
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 409:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetPages(self, owner:str, repo:str):
        """
        
        https://docs.github.com/rest/reference/repos#get-a-github-pages-site
        /repos/{owner}/{repo}/pages
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pages", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GithubPages(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreatePagesSite(self, owner:str, repo:str,source:dict):
        """Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
        
        https://docs.github.com/rest/reference/repos#create-a-github-pages-site
        /repos/{owner}/{repo}/pages
        
        arguments:
        owner -- 
        repo -- 
        source -- The source branch and directory used to publish your Pages site.
        

        """
    
        data = {
        'source': source,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pages", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GithubPages(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 409:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposUpdateInformationAboutPagesSite(self, owner:str, repo:str,cname:str=None, https_enforced:bool=None, public:bool=None, source=None):
        """Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
        
        https://docs.github.com/rest/reference/repos#update-information-about-a-github-pages-site
        /repos/{owner}/{repo}/pages
        
        arguments:
        owner -- 
        repo -- 
        cname -- Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)."
        https_enforced -- Specify whether HTTPS should be enforced for the repository.
        public -- Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
        source -- 
        

        """
    
        data = {
        'cname': cname,
        'https_enforced': https_enforced,
        'public': public,
        'source': source,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/pages", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 400:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeletePagesSite(self, owner:str, repo:str):
        """
        
        https://docs.github.com/rest/reference/repos#delete-a-github-pages-site
        /repos/{owner}/{repo}/pages
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/pages", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListPagesBuilds(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/repos#list-github-pages-builds
        /repos/{owner}/{repo}/pages/builds
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pages/builds", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PageBuild(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposRequestPagesBuild(self, owner:str, repo:str):
        """You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.

Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
        
        https://docs.github.com/rest/reference/repos#request-a-github-pages-build
        /repos/{owner}/{repo}/pages/builds
        
        arguments:
        owner -- 
        repo -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pages/builds", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return PageBuildStatus(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetLatestPagesBuild(self, owner:str, repo:str):
        """
        
        https://docs.github.com/rest/reference/repos#get-latest-pages-build
        /repos/{owner}/{repo}/pages/builds/latest
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pages/builds/latest", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PageBuild(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetPagesBuild(self, owner:str, repo:str, build_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#get-github-pages-build
        /repos/{owner}/{repo}/pages/builds/{build_id}
        
        arguments:
        owner -- 
        repo -- 
        build_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pages/builds/{build_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PageBuild(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetPagesHealthCheck(self, owner:str, repo:str):
        """Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.

The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.

Users must have admin or owner permissions. GitHub Apps must have the `pages:write` and `administration:write` permission to use this endpoint.
        
        https://docs.github.com/rest/reference/repos#get-a-dns-health-check-for-github-pages
        /repos/{owner}/{repo}/pages/health
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pages/health", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PagesHealthCheckStatus(**r.json())
            
        if r.status_code == 202:
            return EmptyObject(**r.json())
            
        if r.status_code == 400:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetReadme(self, owner:str, repo:str,ref=None):
        """Gets the preferred README for a repository.

READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
        
        https://docs.github.com/rest/reference/repos#get-a-repository-readme
        /repos/{owner}/{repo}/readme
        
        arguments:
        owner -- 
        repo -- 
        ref -- The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
        
        """
        
        data = {}
        if ref is not None:
            data['ref'] = ref
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/readme", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ContentFile(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetReadmeInDirectory(self, owner:str, repo:str, dir:str,ref=None):
        """Gets the README from a repository directory.

READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
        
        https://docs.github.com/rest/reference/repos#get-a-repository-directory-readme
        /repos/{owner}/{repo}/readme/{dir}
        
        arguments:
        owner -- 
        repo -- 
        dir -- The alternate path to look for a README file
        ref -- The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
        
        """
        
        data = {}
        if ref is not None:
            data['ref'] = ref
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/readme/{dir}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ContentFile(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListReleases(self, owner:str, repo:str,per_page=30, page=1):
        """This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).

Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
        
        https://docs.github.com/rest/reference/repos#list-releases
        /repos/{owner}/{repo}/releases
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/releases", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Release(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateRelease(self, owner:str, repo:str,tag_name:str, target_commitish:str=None, name:str=None, body:str=None, draft:bool=False, prerelease:bool=False, discussion_category_name:str=None):
        """Users with push access to the repository can create a release.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/repos#create-a-release
        /repos/{owner}/{repo}/releases
        
        arguments:
        owner -- 
        repo -- 
        tag_name -- The name of the tag.
        target_commitish -- Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
        name -- The name of the release.
        body -- Text describing the contents of the tag.
        draft -- `true` to create a draft (unpublished) release, `false` to create a published one.
        prerelease -- `true` to identify the release as a prerelease. `false` to identify the release as a full release.
        discussion_category_name -- If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
        

        """
    
        data = {
        'tag_name': tag_name,
        'target_commitish': target_commitish,
        'name': name,
        'body': body,
        'draft': draft,
        'prerelease': prerelease,
        'discussion_category_name': discussion_category_name,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/releases", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Release(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetReleaseAsset(self, owner:str, repo:str, asset_id:int):
        """To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
        
        https://docs.github.com/rest/reference/repos#get-a-release-asset
        /repos/{owner}/{repo}/releases/assets/{asset_id}
        
        arguments:
        owner -- 
        repo -- 
        asset_id -- asset_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/releases/assets/{asset_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ReleaseAsset(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 302:
            return Found(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdateReleaseAsset(self, owner:str, repo:str, asset_id:int,name:str=None, label:str=None, state:str=None):
        """Users with push access to the repository can edit a release asset.
        
        https://docs.github.com/rest/reference/repos#update-a-release-asset
        /repos/{owner}/{repo}/releases/assets/{asset_id}
        
        arguments:
        owner -- 
        repo -- 
        asset_id -- asset_id parameter
        name -- The file name of the asset.
        label -- An alternate short description of the asset. Used in place of the filename.
        state -- 
        

        """
    
        data = {
        'name': name,
        'label': label,
        'state': state,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/releases/assets/{asset_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ReleaseAsset(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteReleaseAsset(self, owner:str, repo:str, asset_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#delete-a-release-asset
        /repos/{owner}/{repo}/releases/assets/{asset_id}
        
        arguments:
        owner -- 
        repo -- 
        asset_id -- asset_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/releases/assets/{asset_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetLatestRelease(self, owner:str, repo:str):
        """View the latest published full release for the repository.

The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
        
        https://docs.github.com/rest/reference/repos#get-the-latest-release
        /repos/{owner}/{repo}/releases/latest
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/releases/latest", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Release(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetReleaseByTag(self, owner:str, repo:str, tag:str):
        """Get a published release with the specified tag.
        
        https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name
        /repos/{owner}/{repo}/releases/tags/{tag}
        
        arguments:
        owner -- 
        repo -- 
        tag -- tag parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/releases/tags/{tag}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Release(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetRelease(self, owner:str, repo:str, release_id:int):
        """**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
        
        https://docs.github.com/rest/reference/repos#get-a-release
        /repos/{owner}/{repo}/releases/{release_id}
        
        arguments:
        owner -- 
        repo -- 
        release_id -- release_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/releases/{release_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Release(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUpdateRelease(self, owner:str, repo:str, release_id:int,tag_name:str=None, target_commitish:str=None, name:str=None, body:str=None, draft:bool=None, prerelease:bool=None, discussion_category_name:str=None):
        """Users with push access to the repository can edit a release.
        
        https://docs.github.com/rest/reference/repos#update-a-release
        /repos/{owner}/{repo}/releases/{release_id}
        
        arguments:
        owner -- 
        repo -- 
        release_id -- release_id parameter
        tag_name -- The name of the tag.
        target_commitish -- Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
        name -- The name of the release.
        body -- Text describing the contents of the tag.
        draft -- `true` makes the release a draft, and `false` publishes the release.
        prerelease -- `true` to identify the release as a prerelease, `false` to identify the release as a full release.
        discussion_category_name -- If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
        

        """
    
        data = {
        'tag_name': tag_name,
        'target_commitish': target_commitish,
        'name': name,
        'body': body,
        'draft': draft,
        'prerelease': prerelease,
        'discussion_category_name': discussion_category_name,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/releases/{release_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Release(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeleteRelease(self, owner:str, repo:str, release_id:int):
        """Users with push access to the repository can delete a release.
        
        https://docs.github.com/rest/reference/repos#delete-a-release
        /repos/{owner}/{repo}/releases/{release_id}
        
        arguments:
        owner -- 
        repo -- 
        release_id -- release_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/releases/{release_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListReleaseAssets(self, owner:str, repo:str, release_id:int,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/repos#list-release-assets
        /repos/{owner}/{repo}/releases/{release_id}/assets
        
        arguments:
        owner -- 
        repo -- 
        release_id -- release_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/releases/{release_id}/assets", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and ReleaseAsset(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposUploadReleaseAsset(self, owner:str, repo:str, release_id:int,data:bytes):
        """This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.

You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.

Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 

`application/zip`

GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
you'll still need to pass your authentication to be able to upload an asset.

When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.

**Notes:**
*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=rest-api).
*   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
        
        https://docs.github.com/rest/reference/repos#upload-a-release-asset
        /repos/{owner}/{repo}/releases/{release_id}/assets
        
        arguments:
        owner -- 
        repo -- 
        release_id -- release_id parameter
        name -- 
        label -- 
        data -- 
        

        """
    
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/releases/{release_id}/assets", 
                          data=data,
                          headers=self._headers({'Content-Type':  '*/*'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ReleaseAsset(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetCodeFrequencyStats(self, owner:str, repo:str):
        """Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
        
        https://docs.github.com/rest/reference/repos#get-the-weekly-commit-activity
        /repos/{owner}/{repo}/stats/code_frequency
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/stats/code_frequency", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and [ entry2 for entry2 in entry ] for entry in r.json() ]
            
        if r.status_code == 202:
            return r.json()
            
        if r.status_code == 204:
            return NoContent(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetCommitActivityStats(self, owner:str, repo:str):
        """Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
        
        https://docs.github.com/rest/reference/repos#get-the-last-year-of-commit-activity
        /repos/{owner}/{repo}/stats/commit_activity
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/stats/commit_activity", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CommitActivity(**entry) for entry in r.json() ]
            
        if r.status_code == 202:
            return r.json()
            
        if r.status_code == 204:
            return NoContent(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetContributorsStats(self, owner:str, repo:str):
        """
Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:

*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
*   `a` - Number of additions
*   `d` - Number of deletions
*   `c` - Number of commits
        
        https://docs.github.com/rest/reference/repos#get-all-contributor-commit-activity
        /repos/{owner}/{repo}/stats/contributors
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/stats/contributors", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and ContributorActivity(**entry) for entry in r.json() ]
            
        if r.status_code == 202:
            return r.json()
            
        if r.status_code == 204:
            return NoContent(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetParticipationStats(self, owner:str, repo:str):
        """Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.

The array order is oldest week (index 0) to most recent week.
        
        https://docs.github.com/rest/reference/repos#get-the-weekly-commit-count
        /repos/{owner}/{repo}/stats/participation
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/stats/participation", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ParticipationStats(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetPunchCardStats(self, owner:str, repo:str):
        """Each array contains the day number, hour number, and number of commits:

*   `0-6`: Sunday - Saturday
*   `0-23`: Hour of day
*   Number of commits

For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
        
        https://docs.github.com/rest/reference/repos#get-the-hourly-commit-count-for-each-day
        /repos/{owner}/{repo}/stats/punch_card
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/stats/punch_card", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and [ entry2 for entry2 in entry ] for entry in r.json() ]
            
        if r.status_code == 204:
            return NoContent(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateCommitStatus(self, owner:str, repo:str, sha:str,state:str, target_url:str=None, description:str=None, context:str='default'):
        """Users with push access in a repository can create commit statuses for a given SHA.

Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
        
        https://docs.github.com/rest/reference/repos#create-a-commit-status
        /repos/{owner}/{repo}/statuses/{sha}
        
        arguments:
        owner -- 
        repo -- 
        sha -- 
        state -- The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
        target_url -- The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
`http://ci.example.com/user/repo/build/sha`
        description -- A short description of the status.
        context -- A string label to differentiate this status from the status of other systems. This field is case-insensitive.
        

        """
    
        data = {
        'state': state,
        'target_url': target_url,
        'description': description,
        'context': context,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/statuses/{sha}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Status(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposListTags(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/repos#list-repository-tags
        /repos/{owner}/{repo}/tags
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/tags", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Tag(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposDownloadTarballArchive(self, owner:str, repo:str, ref:str):
        """Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
the `Location` header to make a second `GET` request.
**Note**: For private repositories, these links are temporary and expire after five minutes.
        
        https://docs.github.com/rest/reference/repos#download-a-repository-archive
        /repos/{owner}/{repo}/tarball/{ref}
        
        arguments:
        owner -- 
        repo -- 
        ref -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/tarball/{ref}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListTeams(self, owner:str, repo:str,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/repos#list-repository-teams
        /repos/{owner}/{repo}/teams
        
        arguments:
        owner -- 
        repo -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/teams", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetAllTopics(self, owner:str, repo:str,page=1, per_page=30):
        """
        
        https://docs.github.com/rest/reference/repos#get-all-repository-topics
        /repos/{owner}/{repo}/topics
        
        arguments:
        owner -- 
        repo -- 
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/topics", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Topic(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposReplaceAllTopics(self, owner:str, repo:str,names:list):
        """
        
        https://docs.github.com/rest/reference/repos#replace-all-repository-topics
        /repos/{owner}/{repo}/topics
        
        arguments:
        owner -- 
        repo -- 
        names -- An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
        

        """
    
        data = {
        'names': names,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/topics", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Topic(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposGetClones(self, owner:str, repo:str,per='day'):
        """Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
        
        https://docs.github.com/rest/reference/repos#get-repository-clones
        /repos/{owner}/{repo}/traffic/clones
        
        arguments:
        owner -- 
        repo -- 
        per -- Must be one of: `day`, `week`.
        
        """
        
        data = {}
        if per is not None:
            data['per'] = per
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/traffic/clones", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CloneTraffic(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetTopPaths(self, owner:str, repo:str):
        """Get the top 10 popular contents over the last 14 days.
        
        https://docs.github.com/rest/reference/repos#get-top-referral-paths
        /repos/{owner}/{repo}/traffic/popular/paths
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/traffic/popular/paths", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and ContentTraffic(**entry) for entry in r.json() ]
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetTopReferrers(self, owner:str, repo:str):
        """Get the top 10 referrers over the last 14 days.
        
        https://docs.github.com/rest/reference/repos#get-top-referral-sources
        /repos/{owner}/{repo}/traffic/popular/referrers
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/traffic/popular/referrers", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and ReferrerTraffic(**entry) for entry in r.json() ]
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposGetViews(self, owner:str, repo:str,per='day'):
        """Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
        
        https://docs.github.com/rest/reference/repos#get-page-views
        /repos/{owner}/{repo}/traffic/views
        
        arguments:
        owner -- 
        repo -- 
        per -- Must be one of: `day`, `week`.
        
        """
        
        data = {}
        if per is not None:
            data['per'] = per
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/traffic/views", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ViewTraffic(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposTransfer(self, owner:str, repo:str,new_owner:str, team_ids:list=None):
        """A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
        
        https://docs.github.com/rest/reference/repos#transfer-a-repository
        /repos/{owner}/{repo}/transfer
        
        arguments:
        owner -- 
        repo -- 
        new_owner -- The username or organization name the repository will be transferred to.
        team_ids -- ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
        

        """
    
        data = {
        'new_owner': new_owner,
        'team_ids': team_ids,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/transfer", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return MinimalRepository(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposCheckVulnerabilityAlerts(self, owner:str, repo:str):
        """Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
        
        https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository
        /repos/{owner}/{repo}/vulnerability-alerts
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/vulnerability-alerts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposEnableVulnerabilityAlerts(self, owner:str, repo:str):
        """Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
        
        https://docs.github.com/rest/reference/repos#enable-vulnerability-alerts
        /repos/{owner}/{repo}/vulnerability-alerts
        
        arguments:
        owner -- 
        repo -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/vulnerability-alerts", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def ReposDisableVulnerabilityAlerts(self, owner:str, repo:str):
        """Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
        
        https://docs.github.com/rest/reference/repos#disable-vulnerability-alerts
        /repos/{owner}/{repo}/vulnerability-alerts
        
        arguments:
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/vulnerability-alerts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposDownloadZipballArchive(self, owner:str, repo:str, ref:str):
        """Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
the `Location` header to make a second `GET` request.
**Note**: For private repositories, these links are temporary and expire after five minutes.
        
        https://docs.github.com/rest/reference/repos#download-a-repository-archive
        /repos/{owner}/{repo}/zipball/{ref}
        
        arguments:
        owner -- 
        repo -- 
        ref -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/zipball/{ref}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 302:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateUsingTemplate(self, template_owner:str, template_repo:str,name:str, owner:str=None, description:str=None, include_all_branches:bool=False, private:bool=False):
        """Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository
        
        https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template
        /repos/{template_owner}/{template_repo}/generate
        
        arguments:
        template_owner -- 
        template_repo -- 
        name -- The name of the new repository.
        owner -- The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
        description -- A short description of the new repository.
        include_all_branches -- Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
        private -- Either `true` to create a new private repository or `false` to create a new public one.
        

        """
    
        data = {
        'name': name,
        'owner': owner,
        'description': description,
        'include_all_branches': include_all_branches,
        'private': private,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{template_owner}/{template_repo}/generate", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Repository(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposListPublic(self, since=None):
        """Lists all public repositories in the order that they were created.

Note:
- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
        
        https://docs.github.com/rest/reference/repos#list-public-repositories
        /repositories
        
        arguments:
        since -- A repository ID. Only return repositories with an ID greater than this ID.
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        
        
        r = requests.get(f"{self._url}/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListForAuthenticatedUser(self, visibility='all', affiliation=None, type='all', sort='full_name', direction='None', per_page=30, page=1, since=None, before=None):
        """Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
        
        https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user
        /user/repos
        
        arguments:
        visibility -- Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`.
        affiliation -- Comma-separated list of values. Can include:  
\* `owner`: Repositories that are owned by the authenticated user.  
\* `collaborator`: Repositories that the user has been added to as a collaborator.  
\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
        type -- Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`  
  
Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
        sort -- Can be one of `created`, `updated`, `pushed`, `full_name`.
        direction -- Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        before -- Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        
        """
        
        data = {}
        if visibility is not None:
            data['visibility'] = visibility
        if affiliation is not None:
            data['affiliation'] = affiliation
        if type is not None:
            data['type'] = type
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        if since is not None:
            data['since'] = since
        if before is not None:
            data['before'] = before
        
        
        r = requests.get(f"{self._url}/user/repos", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Repository(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposCreateForAuthenticatedUser(self, name:str, description:str=None, homepage:str=None, private:bool=False, has_issues:bool=True, has_projects:bool=True, has_wiki:bool=True, team_id:int=None, auto_init:bool=False, gitignore_template:str=None, license_template:str=None, allow_squash_merge:bool=True, allow_merge_commit:bool=True, allow_rebase_merge:bool=True, allow_auto_merge:bool=False, delete_branch_on_merge:bool=False, has_downloads:bool=True, is_template:bool=False):
        """Creates a new repository for the authenticated user.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository.
        
        https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user
        /user/repos
        
        arguments:
        name -- The name of the repository.
        description -- A short description of the repository.
        homepage -- A URL with more information about the repository.
        private -- Whether the repository is private.
        has_issues -- Whether issues are enabled.
        has_projects -- Whether projects are enabled.
        has_wiki -- Whether the wiki is enabled.
        team_id -- The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
        auto_init -- Whether the repository is initialized with a minimal README.
        gitignore_template -- The desired language or platform to apply to the .gitignore.
        license_template -- The license keyword of the open source license for this repository.
        allow_squash_merge -- Whether to allow squash merges for pull requests.
        allow_merge_commit -- Whether to allow merge commits for pull requests.
        allow_rebase_merge -- Whether to allow rebase merges for pull requests.
        allow_auto_merge -- Whether to allow Auto-merge to be used on pull requests.
        delete_branch_on_merge -- Whether to delete head branches when pull requests are merged
        has_downloads -- Whether downloads are enabled.
        is_template -- Whether this repository acts as a template that can be used to generate new repositories.
        

        """
    
        data = {
        'name': name,
        'description': description,
        'homepage': homepage,
        'private': private,
        'has_issues': has_issues,
        'has_projects': has_projects,
        'has_wiki': has_wiki,
        'team_id': team_id,
        'auto_init': auto_init,
        'gitignore_template': gitignore_template,
        'license_template': license_template,
        'allow_squash_merge': allow_squash_merge,
        'allow_merge_commit': allow_merge_commit,
        'allow_rebase_merge': allow_rebase_merge,
        'allow_auto_merge': allow_auto_merge,
        'delete_branch_on_merge': delete_branch_on_merge,
        'has_downloads': has_downloads,
        'is_template': is_template,
        
        }
        
        
        r = requests.post(f"{self._url}/user/repos", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Repository(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 400:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposListInvitationsForAuthenticatedUser(self, per_page=30, page=1):
        """When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
        
        https://docs.github.com/rest/reference/repos#list-repository-invitations-for-the-authenticated-user
        /user/repository_invitations
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/repository_invitations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and RepositoryInvitation(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposAcceptInvitation(self, invitation_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#accept-a-repository-invitation
        /user/repository_invitations/{invitation_id}
        
        arguments:
        invitation_id -- invitation_id parameter
        

        """
    
        data = {
        
        }
        
        
        r = requests.patch(f"{self._url}/user/repository_invitations/{invitation_id}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 409:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReposDeclineInvitation(self, invitation_id:int):
        """
        
        https://docs.github.com/rest/reference/repos#decline-a-repository-invitation
        /user/repository_invitations/{invitation_id}
        
        arguments:
        invitation_id -- invitation_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/repository_invitations/{invitation_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 409:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReposListForUser(self, username:str,type='owner', sort='full_name', direction='None', per_page=30, page=1):
        """Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
        
        https://docs.github.com/rest/reference/repos#list-repositories-for-a-user
        /users/{username}/repos
        
        arguments:
        username -- 
        type -- Can be one of `all`, `owner`, `member`.
        sort -- Can be one of `created`, `updated`, `pushed`, `full_name`.
        direction -- Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if type is not None:
            data['type'] = type
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/repos", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListIdpGroupsForOrg(self, org:str,page:str, per_page=30):
        """Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."

The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
        
        https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization
        /orgs/{org}/team-sync/groups
        
        arguments:
        org -- 
        page -- Page token
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/team-sync/groups", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Groupmapping(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsList(self, org:str,per_page=30, page=1):
        """Lists all teams in an organization that are visible to the authenticated user.
        
        https://docs.github.com/rest/reference/teams#list-teams
        /orgs/{org}/teams
        
        arguments:
        org -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCreate(self, org:str,name:str, description:str=None, maintainers:list=None, repo_names:list=None, privacy:str=None, permission:str='pull', parent_team_id:int=None):
        """To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."

When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
        
        https://docs.github.com/rest/reference/teams#create-a-team
        /orgs/{org}/teams
        
        arguments:
        org -- 
        name -- The name of the team.
        description -- The description of the team.
        maintainers -- List GitHub IDs for organization members who will become team maintainers.
        repo_names -- The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
        privacy -- The level of privacy this team should have. The options are:  
**For a non-nested team:**  
\* `secret` - only visible to organization owners and members of this team.  
\* `closed` - visible to all members of this organization.  
Default: `secret`  
**For a parent or child team:**  
\* `closed` - visible to all members of this organization.  
Default for child team: `closed`
        permission -- **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
\* `pull` - team members can pull, but not push to or administer newly-added repositories.  
\* `push` - team members can pull and push, but not administer newly-added repositories.  
\* `admin` - team members can pull, push and administer newly-added repositories.
        parent_team_id -- The ID of a team to set as the parent team.
        

        """
    
        data = {
        'name': name,
        'description': description,
        'maintainers': maintainers,
        'repo_names': repo_names,
        'privacy': privacy,
        'permission': permission,
        'parent_team_id': parent_team_id,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/teams", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return FullTeam(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsGetByName(self, org:str, team_slug:str):
        """Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
        
        https://docs.github.com/rest/reference/teams#get-a-team-by-name
        /orgs/{org}/teams/{team_slug}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return FullTeam(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsUpdateInOrg(self, org:str, team_slug:str,name:str=None, description:str=None, privacy:str=None, permission:str='pull', parent_team_id:int=None):
        """To edit a team, the authenticated user must either be an organization owner or a team maintainer.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
        
        https://docs.github.com/rest/reference/teams#update-a-team
        /orgs/{org}/teams/{team_slug}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        name -- The name of the team.
        description -- The description of the team.
        privacy -- The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
**For a non-nested team:**  
\* `secret` - only visible to organization owners and members of this team.  
\* `closed` - visible to all members of this organization.  
**For a parent or child team:**  
\* `closed` - visible to all members of this organization.
        permission -- **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
\* `pull` - team members can pull, but not push to or administer newly-added repositories.  
\* `push` - team members can pull and push, but not administer newly-added repositories.  
\* `admin` - team members can pull, push and administer newly-added repositories.
        parent_team_id -- The ID of a team to set as the parent team.
        

        """
    
        data = {
        'name': name,
        'description': description,
        'privacy': privacy,
        'permission': permission,
        'parent_team_id': parent_team_id,
        
        }
        
        
        r = requests.patch(f"{self._url}/orgs/{org}/teams/{team_slug}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return FullTeam(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsDeleteInOrg(self, org:str, team_slug:str):
        """To delete a team, the authenticated user must be an organization owner or team maintainer.

If you are an organization owner, deleting a parent team will delete all of its child teams as well.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
        
        https://docs.github.com/rest/reference/teams#delete-a-team
        /orgs/{org}/teams/{team_slug}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/teams/{team_slug}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListDiscussionsInOrg(self, org:str, team_slug:str,direction='desc', per_page=30, page=1, pinned=None):
        """List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
        
        https://docs.github.com/rest/reference/teams#list-discussions
        /orgs/{org}/teams/{team_slug}/discussions
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        direction -- One of `asc` (ascending) or `desc` (descending).
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        pinned -- Pinned discussions only filter
        
        """
        
        data = {}
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        if pinned is not None:
            data['pinned'] = pinned
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and TeamDiscussion(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCreateDiscussionInOrg(self, org:str, team_slug:str,body:str, title:str, private:bool=False):
        """Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
        
        https://docs.github.com/rest/reference/teams#create-a-discussion
        /orgs/{org}/teams/{team_slug}/discussions
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        body -- The discussion post's body text.
        title -- The discussion post's title.
        private -- Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
        

        """
    
        data = {
        'body': body,
        'title': title,
        'private': private,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return TeamDiscussion(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsGetDiscussionInOrg(self, org:str, team_slug:str, discussion_number:int):
        """Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
        
        https://docs.github.com/rest/reference/teams#get-a-discussion
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamDiscussion(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsUpdateDiscussionInOrg(self, org:str, team_slug:str, discussion_number:int,title:str=None, body:str=None):
        """Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
        
        https://docs.github.com/rest/reference/teams#update-a-discussion
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        title -- The discussion post's title.
        body -- The discussion post's body text.
        

        """
    
        data = {
        'title': title,
        'body': body,
        
        }
        
        
        r = requests.patch(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return TeamDiscussion(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsDeleteDiscussionInOrg(self, org:str, team_slug:str, discussion_number:int):
        """Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
        
        https://docs.github.com/rest/reference/teams#delete-a-discussion
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListDiscussionCommentsInOrg(self, org:str, team_slug:str, discussion_number:int,direction='desc', per_page=30, page=1):
        """List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
        
        https://docs.github.com/rest/reference/teams#list-discussion-comments
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        direction -- One of `asc` (ascending) or `desc` (descending).
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and TeamDiscussionComment(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCreateDiscussionCommentInOrg(self, org:str, team_slug:str, discussion_number:int,body:str):
        """Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
        
        https://docs.github.com/rest/reference/teams#create-a-discussion-comment
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        body -- The discussion comment's body text.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return TeamDiscussionComment(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsGetDiscussionCommentInOrg(self, org:str, team_slug:str, discussion_number:int, comment_number:int):
        """Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
        
        https://docs.github.com/rest/reference/teams#get-a-discussion-comment
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        comment_number -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamDiscussionComment(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsUpdateDiscussionCommentInOrg(self, org:str, team_slug:str, discussion_number:int, comment_number:int,body:str):
        """Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
        
        https://docs.github.com/rest/reference/teams#update-a-discussion-comment
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        comment_number -- 
        body -- The discussion comment's body text.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.patch(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return TeamDiscussionComment(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsDeleteDiscussionCommentInOrg(self, org:str, team_slug:str, discussion_number:int, comment_number:int):
        """Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
        
        https://docs.github.com/rest/reference/teams#delete-a-discussion-comment
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        comment_number -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListPendingInvitationsInOrg(self, org:str, team_slug:str,per_page=30, page=1):
        """The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
        
        https://docs.github.com/rest/reference/teams#list-pending-team-invitations
        /orgs/{org}/teams/{team_slug}/invitations
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/invitations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrganizationInvitation(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListMembersInOrg(self, org:str, team_slug:str,role='all', per_page=30, page=1):
        """Team members will include the members of child teams.

To list members in a team, the team must be visible to the authenticated user.
        
        https://docs.github.com/rest/reference/teams#list-team-members
        /orgs/{org}/teams/{team_slug}/members
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        role -- Filters members returned by their role in the team. Can be one of:  
\* `member` - normal members of the team.  
\* `maintainer` - team maintainers.  
\* `all` - all members of the team.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if role is not None:
            data['role'] = role
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/members", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsGetMembershipForUserInOrg(self, org:str, team_slug:str, username:str):
        """Team members will include the members of child teams.

To get a user's membership with a team, the team must be visible to the authenticated user.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.

**Note:**
The response contains the `state` of the membership and the member's `role`.

The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
        
        https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user
        /orgs/{org}/teams/{team_slug}/memberships/{username}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/memberships/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamMembership(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsAddOrUpdateMembershipForUserInOrg(self, org:str, team_slug:str, username:str,role:str='member'):
        """Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.

If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
        
        https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user
        /orgs/{org}/teams/{team_slug}/memberships/{username}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        username -- 
        role -- The role that this user should have in the team. Can be one of:  
\* `member` - a normal member of the team.  
\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
        

        """
    
        data = {
        'role': role,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/teams/{team_slug}/memberships/{username}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return TeamMembership(**r.json())
            
        if r.status_code == 403:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def TeamsRemoveMembershipForUserInOrg(self, org:str, team_slug:str, username:str):
        """Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
        
        https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user
        /orgs/{org}/teams/{team_slug}/memberships/{username}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/teams/{team_slug}/memberships/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListProjectsInOrg(self, org:str, team_slug:str,per_page=30, page=1):
        """Lists the organization projects for a team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
        
        https://docs.github.com/rest/reference/teams#list-team-projects
        /orgs/{org}/teams/{team_slug}/projects
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/projects", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and TeamProject(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCheckPermissionsForProjectInOrg(self, org:str, team_slug:str, project_id:int):
        """Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
        
        https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project
        /orgs/{org}/teams/{team_slug}/projects/{project_id}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        project_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/projects/{project_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamProject(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsAddOrUpdateProjectPermissionsInOrg(self, org:str, team_slug:str, project_id:int,permission:str=None):
        """Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
        
        https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions
        /orgs/{org}/teams/{team_slug}/projects/{project_id}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        project_id -- 
        permission -- The permission to grant to the team for this project. Can be one of:  
\* `read` - team members can read, but not write to or administer this project.  
\* `write` - team members can read and write, but not administer this project.  
\* `admin` - team members can read, write and administer this project.  
Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        

        """
    
        data = {
        'permission': permission,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/teams/{team_slug}/projects/{project_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return TeamsAddOrUpdateProjectPermissionsInOrgForbidden(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsRemoveProjectInOrg(self, org:str, team_slug:str, project_id:int):
        """Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
        
        https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team
        /orgs/{org}/teams/{team_slug}/projects/{project_id}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        project_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/teams/{team_slug}/projects/{project_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListReposInOrg(self, org:str, team_slug:str,per_page=30, page=1):
        """Lists a team's repositories visible to the authenticated user.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
        
        https://docs.github.com/rest/reference/teams#list-team-repositories
        /orgs/{org}/teams/{team_slug}/repos
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/repos", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCheckPermissionsForRepoInOrg(self, org:str, team_slug:str, owner:str, repo:str):
        """Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.

You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.

If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
        
        https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository
        /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamRepository(**r.json())
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsAddOrUpdateRepoPermissionsInOrg(self, org:str, team_slug:str, owner:str, repo:str,permission:str=None):
        """To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.

For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
        
        https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions
        /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        owner -- 
        repo -- 
        permission -- The permission to grant the team on this repository. Can be one of:  
\* `pull` - team members can pull, but not push to or administer this repository.  
\* `push` - team members can pull and push, but not administer this repository.  
\* `admin` - team members can pull, push and administer this repository.  
\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  
\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  
  
If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
        

        """
    
        data = {
        'permission': permission,
        
        }
        
        
        r = requests.put(f"{self._url}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            

        raise UnexpectedResult(r.status_code)

    def TeamsRemoveRepoInOrg(self, org:str, team_slug:str, owner:str, repo:str):
        """If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
        
        https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team
        /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListIdpGroupsInOrg(self, org:str, team_slug:str):
        """Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

List IdP groups connected to a team on GitHub.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
        
        https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team
        /orgs/{org}/teams/{team_slug}/team-sync/group-mappings
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/team-sync/group-mappings", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Groupmapping(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCreateOrUpdateIdpGroupConnectionsInOrg(self, org:str, team_slug:str,groups:list=None):
        """Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
        
        https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections
        /orgs/{org}/teams/{team_slug}/team-sync/group-mappings
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        groups -- The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
        

        """
    
        data = {
        'groups': groups,
        
        }
        
        
        r = requests.patch(f"{self._url}/orgs/{org}/teams/{team_slug}/team-sync/group-mappings", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Groupmapping(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsListChildInOrg(self, org:str, team_slug:str,per_page=30, page=1):
        """Lists the child teams of the team specified by `{team_slug}`.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
        
        https://docs.github.com/rest/reference/teams#list-child-teams
        /orgs/{org}/teams/{team_slug}/teams
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/teams", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsGetLegacy(self, team_id:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
        
        https://docs.github.com/rest/reference/teams/#get-a-team-legacy
        /teams/{team_id}
        
        arguments:
        team_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/teams/{team_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return FullTeam(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsUpdateLegacy(self, team_id:int,name:str, description:str=None, privacy:str=None, permission:str='pull', parent_team_id:int=None):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.

To edit a team, the authenticated user must either be an organization owner or a team maintainer.

**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
        
        https://docs.github.com/rest/reference/teams/#update-a-team-legacy
        /teams/{team_id}
        
        arguments:
        team_id -- 
        name -- The name of the team.
        description -- The description of the team.
        privacy -- The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
**For a non-nested team:**  
\* `secret` - only visible to organization owners and members of this team.  
\* `closed` - visible to all members of this organization.  
**For a parent or child team:**  
\* `closed` - visible to all members of this organization.
        permission -- **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
\* `pull` - team members can pull, but not push to or administer newly-added repositories.  
\* `push` - team members can pull and push, but not administer newly-added repositories.  
\* `admin` - team members can pull, push and administer newly-added repositories.
        parent_team_id -- The ID of a team to set as the parent team.
        

        """
    
        data = {
        'name': name,
        'description': description,
        'privacy': privacy,
        'permission': permission,
        'parent_team_id': parent_team_id,
        
        }
        
        
        r = requests.patch(f"{self._url}/teams/{team_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return FullTeam(**r.json())
            
        if r.status_code == 201:
            return FullTeam(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsDeleteLegacy(self, team_id:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.

To delete a team, the authenticated user must be an organization owner or team maintainer.

If you are an organization owner, deleting a parent team will delete all of its child teams as well.
        
        https://docs.github.com/rest/reference/teams/#delete-a-team-legacy
        /teams/{team_id}
        
        arguments:
        team_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/teams/{team_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListDiscussionsLegacy(self, team_id:int,direction='desc', per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.

List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#list-discussions-legacy
        /teams/{team_id}/discussions
        
        arguments:
        team_id -- 
        direction -- One of `asc` (ascending) or `desc` (descending).
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/discussions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and TeamDiscussion(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCreateDiscussionLegacy(self, team_id:int,body:str, title:str, private:bool=False):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.

Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/teams#create-a-discussion-legacy
        /teams/{team_id}/discussions
        
        arguments:
        team_id -- 
        body -- The discussion post's body text.
        title -- The discussion post's title.
        private -- Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
        

        """
    
        data = {
        'body': body,
        'title': title,
        'private': private,
        
        }
        
        
        r = requests.post(f"{self._url}/teams/{team_id}/discussions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return TeamDiscussion(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsGetDiscussionLegacy(self, team_id:int, discussion_number:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.

Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#get-a-discussion-legacy
        /teams/{team_id}/discussions/{discussion_number}
        
        arguments:
        team_id -- 
        discussion_number -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/discussions/{discussion_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamDiscussion(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsUpdateDiscussionLegacy(self, team_id:int, discussion_number:int,title:str=None, body:str=None):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.

Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#update-a-discussion-legacy
        /teams/{team_id}/discussions/{discussion_number}
        
        arguments:
        team_id -- 
        discussion_number -- 
        title -- The discussion post's title.
        body -- The discussion post's body text.
        

        """
    
        data = {
        'title': title,
        'body': body,
        
        }
        
        
        r = requests.patch(f"{self._url}/teams/{team_id}/discussions/{discussion_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return TeamDiscussion(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsDeleteDiscussionLegacy(self, team_id:int, discussion_number:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.

Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy
        /teams/{team_id}/discussions/{discussion_number}
        
        arguments:
        team_id -- 
        discussion_number -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/teams/{team_id}/discussions/{discussion_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListDiscussionCommentsLegacy(self, team_id:int, discussion_number:int,direction='desc', per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.

List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy
        /teams/{team_id}/discussions/{discussion_number}/comments
        
        arguments:
        team_id -- 
        discussion_number -- 
        direction -- One of `asc` (ascending) or `desc` (descending).
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and TeamDiscussionComment(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCreateDiscussionCommentLegacy(self, team_id:int, discussion_number:int,body:str):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.

Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy
        /teams/{team_id}/discussions/{discussion_number}/comments
        
        arguments:
        team_id -- 
        discussion_number -- 
        body -- The discussion comment's body text.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/comments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return TeamDiscussionComment(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsGetDiscussionCommentLegacy(self, team_id:int, discussion_number:int, comment_number:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.

Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy
        /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
        
        arguments:
        team_id -- 
        discussion_number -- 
        comment_number -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamDiscussionComment(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsUpdateDiscussionCommentLegacy(self, team_id:int, discussion_number:int, comment_number:int,body:str):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.

Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#update-a-discussion-comment-legacy
        /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
        
        arguments:
        team_id -- 
        discussion_number -- 
        comment_number -- 
        body -- The discussion comment's body text.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.patch(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return TeamDiscussionComment(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsDeleteDiscussionCommentLegacy(self, team_id:int, discussion_number:int, comment_number:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.

Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy
        /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
        
        arguments:
        team_id -- 
        discussion_number -- 
        comment_number -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListPendingInvitationsLegacy(self, team_id:int,per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.

The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
        
        https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy
        /teams/{team_id}/invitations
        
        arguments:
        team_id -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/invitations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and OrganizationInvitation(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListMembersLegacy(self, team_id:int,role='all', per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.

Team members will include the members of child teams.
        
        https://docs.github.com/rest/reference/teams#list-team-members-legacy
        /teams/{team_id}/members
        
        arguments:
        team_id -- 
        role -- Filters members returned by their role in the team. Can be one of:  
\* `member` - normal members of the team.  
\* `maintainer` - team maintainers.  
\* `all` - all members of the team.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if role is not None:
            data['role'] = role
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/members", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsGetMemberLegacy(self, team_id:int, username:str):
        """The "Get team member" endpoint (described below) is deprecated.

We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.

To list members in a team, the team must be visible to the authenticated user.
        
        https://docs.github.com/rest/reference/teams#get-team-member-legacy
        /teams/{team_id}/members/{username}
        
        arguments:
        team_id -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/members/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsAddMemberLegacy(self, team_id:int, username:str):
        """The "Add team member" endpoint (described below) is deprecated.

We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        
        https://docs.github.com/rest/reference/teams#add-team-member-legacy
        /teams/{team_id}/members/{username}
        
        arguments:
        team_id -- 
        username -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/teams/{team_id}/members/{username}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsRemoveMemberLegacy(self, team_id:int, username:str):
        """The "Remove team member" endpoint (described below) is deprecated.

We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        
        https://docs.github.com/rest/reference/teams#remove-team-member-legacy
        /teams/{team_id}/members/{username}
        
        arguments:
        team_id -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/teams/{team_id}/members/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsGetMembershipForUserLegacy(self, team_id:int, username:str):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.

Team members will include the members of child teams.

To get a user's membership with a team, the team must be visible to the authenticated user.

**Note:**
The response contains the `state` of the membership and the member's `role`.

The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
        
        https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy
        /teams/{team_id}/memberships/{username}
        
        arguments:
        team_id -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/memberships/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamMembership(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsAddOrUpdateMembershipForUserLegacy(self, team_id:int, username:str,role:str='member'):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.

If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
        
        https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy
        /teams/{team_id}/memberships/{username}
        
        arguments:
        team_id -- 
        username -- 
        role -- The role that this user should have in the team. Can be one of:  
\* `member` - a normal member of the team.  
\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
        

        """
    
        data = {
        'role': role,
        
        }
        
        
        r = requests.put(f"{self._url}/teams/{team_id}/memberships/{username}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return TeamMembership(**r.json())
            
        if r.status_code == 403:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsRemoveMembershipForUserLegacy(self, team_id:int, username:str):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
        
        https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy
        /teams/{team_id}/memberships/{username}
        
        arguments:
        team_id -- 
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/teams/{team_id}/memberships/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListProjectsLegacy(self, team_id:int,per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.

Lists the organization projects for a team.
        
        https://docs.github.com/rest/reference/teams/#list-team-projects-legacy
        /teams/{team_id}/projects
        
        arguments:
        team_id -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/projects", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and TeamProject(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCheckPermissionsForProjectLegacy(self, team_id:int, project_id:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.

Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
        
        https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy
        /teams/{team_id}/projects/{project_id}
        
        arguments:
        team_id -- 
        project_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/projects/{project_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamProject(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsAddOrUpdateProjectPermissionsLegacy(self, team_id:int, project_id:int,permission:str=None):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.

Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
        
        https://docs.github.com/rest/reference/teams/#add-or-update-team-project-permissions-legacy
        /teams/{team_id}/projects/{project_id}
        
        arguments:
        team_id -- 
        project_id -- 
        permission -- The permission to grant to the team for this project. Can be one of:  
\* `read` - team members can read, but not write to or administer this project.  
\* `write` - team members can read and write, but not administer this project.  
\* `admin` - team members can read, write and administer this project.  
Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        

        """
    
        data = {
        'permission': permission,
        
        }
        
        
        r = requests.put(f"{self._url}/teams/{team_id}/projects/{project_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return TeamsAddOrUpdateProjectPermissionsLegacyForbidden(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsRemoveProjectLegacy(self, team_id:int, project_id:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.

Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
        
        https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy
        /teams/{team_id}/projects/{project_id}
        
        arguments:
        team_id -- 
        project_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/teams/{team_id}/projects/{project_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListReposLegacy(self, team_id:int,per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
        
        https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy
        /teams/{team_id}/repos
        
        arguments:
        team_id -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/repos", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and MinimalRepository(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCheckPermissionsForRepoLegacy(self, team_id:int, owner:str, repo:str):
        """**Note**: Repositories inherited through a parent team will also be checked.

**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.

You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
        
        https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy
        /teams/{team_id}/repos/{owner}/{repo}
        
        arguments:
        team_id -- 
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/repos/{owner}/{repo}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return TeamRepository(**r.json())
            
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsAddOrUpdateRepoPermissionsLegacy(self, team_id:int, owner:str, repo:str,permission:str=None):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.

To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
        
        https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions-legacy
        /teams/{team_id}/repos/{owner}/{repo}
        
        arguments:
        team_id -- 
        owner -- 
        repo -- 
        permission -- The permission to grant the team on this repository. Can be one of:  
\* `pull` - team members can pull, but not push to or administer this repository.  
\* `push` - team members can pull and push, but not administer this repository.  
\* `admin` - team members can pull, push and administer this repository.  
  
If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
        

        """
    
        data = {
        'permission': permission,
        
        }
        
        
        r = requests.put(f"{self._url}/teams/{team_id}/repos/{owner}/{repo}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsRemoveRepoLegacy(self, team_id:int, owner:str, repo:str):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.

If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
        
        https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team-legacy
        /teams/{team_id}/repos/{owner}/{repo}
        
        arguments:
        team_id -- 
        owner -- 
        repo -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/teams/{team_id}/repos/{owner}/{repo}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListIdpGroupsForLegacy(self, team_id:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

List IdP groups connected to a team on GitHub.
        
        https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy
        /teams/{team_id}/team-sync/group-mappings
        
        arguments:
        team_id -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/team-sync/group-mappings", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Groupmapping(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsCreateOrUpdateIdpGroupConnectionsLegacy(self, team_id:int,groups:list, synced_at:str=None):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
        
        https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections-legacy
        /teams/{team_id}/team-sync/group-mappings
        
        arguments:
        team_id -- 
        groups -- The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
        synced_at -- 
        

        """
    
        data = {
        'groups': groups,
        'synced_at': synced_at,
        
        }
        
        
        r = requests.patch(f"{self._url}/teams/{team_id}/team-sync/group-mappings", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Groupmapping(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def TeamsListChildLegacy(self, team_id:int,per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
        
        https://docs.github.com/rest/reference/teams/#list-child-teams-legacy
        /teams/{team_id}/teams
        
        arguments:
        team_id -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/teams", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Team(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def TeamsListForAuthenticatedUser(self, per_page=30, page=1):
        """List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
        
        https://docs.github.com/rest/reference/teams#list-teams-for-the-authenticated-user
        /user/teams
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/teams", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and FullTeam(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsListForTeamDiscussionCommentInOrg(self, org:str, team_slug:str, discussion_number:int, comment_number:int,content='None', per_page=30, page=1):
        """List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
        
        https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        comment_number -- 
        content -- Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if content is not None:
            data['content'] = content
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Reaction(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForTeamDiscussionCommentInOrg(self, org:str, team_slug:str, discussion_number:int, comment_number:int,content:str):
        """Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
        
        https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        comment_number -- 
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Reaction(**r.json())
            
        if r.status_code == 201:
            return Reaction(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReactionsDeleteForTeamDiscussionComment(self, org:str, team_slug:str, discussion_number:int, comment_number:int, reaction_id:int):
        """**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.

Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/reactions#delete-team-discussion-comment-reaction
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        comment_number -- 
        reaction_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsListForTeamDiscussionInOrg(self, org:str, team_slug:str, discussion_number:int,content='None', per_page=30, page=1):
        """List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
        
        https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        content -- Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if content is not None:
            data['content'] = content
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Reaction(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForTeamDiscussionInOrg(self, org:str, team_slug:str, discussion_number:int,content:str):
        """Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
        
        https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Reaction(**r.json())
            
        if r.status_code == 201:
            return Reaction(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReactionsDeleteForTeamDiscussion(self, org:str, team_slug:str, discussion_number:int, reaction_id:int):
        """**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.

Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/reactions#delete-team-discussion-reaction
        /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
        
        arguments:
        org -- 
        team_slug -- team_slug parameter
        discussion_number -- 
        reaction_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsDeleteLegacy(self, reaction_id:int):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).

OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
        
        https://docs.github.com/rest/reference/reactions/#delete-a-reaction-legacy
        /reactions/{reaction_id}
        
        arguments:
        reaction_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/reactions/{reaction_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsListForCommitComment(self, owner:str, repo:str, comment_id:int,content='None', per_page=30, page=1):
        """List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
        
        https://docs.github.com/rest/reference/reactions#list-reactions-for-a-commit-comment
        /repos/{owner}/{repo}/comments/{comment_id}/reactions
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        content -- Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if content is not None:
            data['content'] = content
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/comments/{comment_id}/reactions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Reaction(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForCommitComment(self, owner:str, repo:str, comment_id:int,content:str):
        """Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
        
        https://docs.github.com/rest/reference/reactions#create-reaction-for-a-commit-comment
        /repos/{owner}/{repo}/comments/{comment_id}/reactions
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/comments/{comment_id}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Reaction(**r.json())
            
        if r.status_code == 201:
            return Reaction(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReactionsDeleteForCommitComment(self, owner:str, repo:str, comment_id:int, reaction_id:int):
        """**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.

Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
        
        https://docs.github.com/rest/reference/reactions#delete-a-commit-comment-reaction
        /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        reaction_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsListForIssueComment(self, owner:str, repo:str, comment_id:int,content='None', per_page=30, page=1):
        """List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
        
        https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue-comment
        /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        content -- Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if content is not None:
            data['content'] = content
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Reaction(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForIssueComment(self, owner:str, repo:str, comment_id:int,content:str):
        """Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
        
        https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue-comment
        /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Reaction(**r.json())
            
        if r.status_code == 201:
            return Reaction(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReactionsDeleteForIssueComment(self, owner:str, repo:str, comment_id:int, reaction_id:int):
        """**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.

Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
        
        https://docs.github.com/rest/reference/reactions#delete-an-issue-comment-reaction
        /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        reaction_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsListForIssue(self, owner:str, repo:str, issue_number:int,content='None', per_page=30, page=1):
        """List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
        
        https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/reactions
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        content -- Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if content is not None:
            data['content'] = content
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/reactions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Reaction(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 410:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForIssue(self, owner:str, repo:str, issue_number:int,content:str):
        """Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
        
        https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue
        /repos/{owner}/{repo}/issues/{issue_number}/reactions
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Reaction(**r.json())
            
        if r.status_code == 201:
            return Reaction(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReactionsDeleteForIssue(self, owner:str, repo:str, issue_number:int, reaction_id:int):
        """**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.

Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
        
        https://docs.github.com/rest/reference/reactions#delete-an-issue-reaction
        /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
        
        arguments:
        owner -- 
        repo -- 
        issue_number -- issue_number parameter
        reaction_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsListForPullRequestReviewComment(self, owner:str, repo:str, comment_id:int,content='None', per_page=30, page=1):
        """List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
        
        https://docs.github.com/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment
        /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        content -- Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if content is not None:
            data['content'] = content
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Reaction(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForPullRequestReviewComment(self, owner:str, repo:str, comment_id:int,content:str):
        """Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
        
        https://docs.github.com/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment
        /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Reaction(**r.json())
            
        if r.status_code == 201:
            return Reaction(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReactionsDeleteForPullRequestComment(self, owner:str, repo:str, comment_id:int, reaction_id:int):
        """**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`

Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
        
        https://docs.github.com/rest/reference/reactions#delete-a-pull-request-comment-reaction
        /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        reaction_id -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForRelease(self, owner:str, repo:str, release_id:int,content:str):
        """Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
        
        https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-release
        /repos/{owner}/{repo}/releases/{release_id}/reactions
        
        arguments:
        owner -- 
        repo -- 
        release_id -- release_id parameter
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/releases/{release_id}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Reaction(**r.json())
            
        if r.status_code == 201:
            return Reaction(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReactionsListForTeamDiscussionCommentLegacy(self, team_id:int, discussion_number:int, comment_number:int,content='None', per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.

List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy
        /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
        
        arguments:
        team_id -- 
        discussion_number -- 
        comment_number -- 
        content -- Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if content is not None:
            data['content'] = content
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Reaction(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForTeamDiscussionCommentLegacy(self, team_id:int, discussion_number:int, comment_number:int,content:str):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.

Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
        
        https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy
        /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
        
        arguments:
        team_id -- 
        discussion_number -- 
        comment_number -- 
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Reaction(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ReactionsListForTeamDiscussionLegacy(self, team_id:int, discussion_number:int,content='None', per_page=30, page=1):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.

List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy
        /teams/{team_id}/discussions/{discussion_number}/reactions
        
        arguments:
        team_id -- 
        discussion_number -- 
        content -- Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if content is not None:
            data['content'] = content
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/reactions", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Reaction(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ReactionsCreateForTeamDiscussionLegacy(self, team_id:int, discussion_number:int,content:str):
        """**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.

Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
        
        https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy
        /teams/{team_id}/discussions/{discussion_number}/reactions
        
        arguments:
        team_id -- 
        discussion_number -- 
        content -- The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
        

        """
    
        data = {
        'content': content,
        
        }
        
        
        r = requests.post(f"{self._url}/teams/{team_id}/discussions/{discussion_number}/reactions", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Reaction(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def RateLimitGet(self, ):
        """**Note:** Accessing this endpoint does not count against your REST API rate limit.

**Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
        
        https://docs.github.com/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user
        /rate_limit
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/rate_limit", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return RateLimitOverview(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ChecksCreate(self, owner:str, repo:str,head_sha:str, name:str, details_url:str=None, external_id:str=None, status:str='queued', started_at:datetime=None, conclusion:str=None, completed_at:datetime=None, output:dict=None, actions:list=None):
        """**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.

In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
        
        https://docs.github.com/rest/reference/checks#create-a-check-run
        /repos/{owner}/{repo}/check-runs
        
        arguments:
        owner -- 
        repo -- 
        head_sha -- The SHA of the commit.
        name -- The name of the check. For example, "code-coverage".
        details_url -- The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
        external_id -- A reference for the run on the integrator's system.
        status -- The current status. Can be one of `queued`, `in_progress`, or `completed`.
        started_at -- The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        conclusion -- **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.  
**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
        completed_at -- The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        output -- Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object) description.
        actions -- Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)." To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
        

        """
    
        data = {
        'head_sha': head_sha,
        'name': name,
        'details_url': details_url,
        'external_id': external_id,
        'status': status,
        'started_at': started_at,
        'conclusion': conclusion,
        'completed_at': completed_at,
        'output': output,
        'actions': actions,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/check-runs", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Checkrun(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ChecksGet(self, owner:str, repo:str, check_run_id:int):
        """**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        
        https://docs.github.com/rest/reference/checks#get-a-check-run
        /repos/{owner}/{repo}/check-runs/{check_run_id}
        
        arguments:
        owner -- 
        repo -- 
        check_run_id -- check_run_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/check-runs/{check_run_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Checkrun(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ChecksUpdate(self, owner:str, repo:str, check_run_id:int,name:str=None, details_url:str=None, external_id:str=None, started_at:datetime=None, status:str=None, conclusion:str=None, completed_at:datetime=None, output:dict=None, actions:list=None):
        """**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
        
        https://docs.github.com/rest/reference/checks#update-a-check-run
        /repos/{owner}/{repo}/check-runs/{check_run_id}
        
        arguments:
        owner -- 
        repo -- 
        check_run_id -- check_run_id parameter
        name -- The name of the check. For example, "code-coverage".
        details_url -- The URL of the integrator's site that has the full details of the check.
        external_id -- A reference for the run on the integrator's system.
        started_at -- This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        status -- The current status. Can be one of `queued`, `in_progress`, or `completed`.
        conclusion -- **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.  
**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
        completed_at -- The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        output -- Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object-1) description.
        actions -- Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
        

        """
    
        data = {
        'name': name,
        'details_url': details_url,
        'external_id': external_id,
        'started_at': started_at,
        'status': status,
        'conclusion': conclusion,
        'completed_at': completed_at,
        'output': output,
        'actions': actions,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/check-runs/{check_run_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Checkrun(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ChecksListAnnotations(self, owner:str, repo:str, check_run_id:int,per_page=30, page=1):
        """Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
        
        https://docs.github.com/rest/reference/checks#list-check-run-annotations
        /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
        
        arguments:
        owner -- 
        repo -- 
        check_run_id -- check_run_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CheckAnnotation(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def ChecksCreateSuite(self, owner:str, repo:str,head_sha:str):
        """**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
        
        https://docs.github.com/rest/reference/checks#create-a-check-suite
        /repos/{owner}/{repo}/check-suites
        
        arguments:
        owner -- 
        repo -- 
        head_sha -- The sha of the head commit.
        

        """
    
        data = {
        'head_sha': head_sha,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/check-suites", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return Checksuite(**r.json())
            
        if r.status_code == 201:
            return Checksuite(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ChecksSetSuitesPreferences(self, owner:str, repo:str,auto_trigger_checks:list=None):
        """Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
        
        https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites
        /repos/{owner}/{repo}/check-suites/preferences
        
        arguments:
        owner -- 
        repo -- 
        auto_trigger_checks -- Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
        

        """
    
        data = {
        'auto_trigger_checks': auto_trigger_checks,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/check-suites/preferences", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return CheckSuitePreference(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ChecksGetSuite(self, owner:str, repo:str, check_suite_id:int):
        """**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
        
        https://docs.github.com/rest/reference/checks#get-a-check-suite
        /repos/{owner}/{repo}/check-suites/{check_suite_id}
        
        arguments:
        owner -- 
        repo -- 
        check_suite_id -- check_suite_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/check-suites/{check_suite_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Checksuite(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ChecksListForSuite(self, owner:str, repo:str, check_suite_id:int,check_name=None, status='None', filter='latest', per_page=30, page=1):
        """**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        
        https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite
        /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
        
        arguments:
        owner -- 
        repo -- 
        check_suite_id -- check_suite_id parameter
        check_name -- Returns check runs with the specified `name`.
        status -- Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
        filter -- Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if check_name is not None:
            data['check_name'] = check_name
        if status is not None:
            data['status'] = status
        if filter is not None:
            data['filter'] = filter
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ChecksListForSuiteSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ChecksRerequestSuite(self, owner:str, repo:str, check_suite_id:int):
        """Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.

To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
        
        https://docs.github.com/rest/reference/checks#rerequest-a-check-suite
        /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
        
        arguments:
        owner -- 
        repo -- 
        check_suite_id -- check_suite_id parameter
        

        """
    
        data = {
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ChecksRerequestSuiteSuccess(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ChecksListForRef(self, owner:str, repo:str, ref:str,check_name=None, status='None', filter='latest', per_page=30, page=1, app_id=None):
        """**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
        
        https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference
        /repos/{owner}/{repo}/commits/{ref}/check-runs
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        check_name -- Returns check runs with the specified `name`.
        status -- Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
        filter -- Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        app_id -- 
        
        """
        
        data = {}
        if check_name is not None:
            data['check_name'] = check_name
        if status is not None:
            data['status'] = status
        if filter is not None:
            data['filter'] = filter
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        if app_id is not None:
            data['app_id'] = app_id
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits/{ref}/check-runs", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ChecksListForRefSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ChecksListSuitesForRef(self, owner:str, repo:str, ref:str,app_id=None, check_name=None, per_page=30, page=1):
        """**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
        
        https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference
        /repos/{owner}/{repo}/commits/{ref}/check-suites
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        app_id -- Filters check suites by GitHub App `id`.
        check_name -- Returns check runs with the specified `name`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if app_id is not None:
            data['app_id'] = app_id
        if check_name is not None:
            data['check_name'] = check_name
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/commits/{ref}/check-suites", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ChecksListSuitesForRefSuccess(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodeScanningListAlertsForRepo(self, owner:str, repo:str,tool_name=None, tool_guid=None, page=1, per_page=30, ref=None, state=None):
        """Lists all open code scanning alerts for the default branch (usually `main`
or `master`). You must use an access token with the `security_events` scope to use
this endpoint. GitHub Apps must have the `security_events` read permission to use
this endpoint.

The response includes a `most_recent_instance` object.
This provides details of the most recent instance of this alert
for the default branch or for the specified Git reference
(if you used `ref` in the request).
        
        https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository
        /repos/{owner}/{repo}/code-scanning/alerts
        
        arguments:
        owner -- 
        repo -- 
        tool_name -- The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
        tool_guid -- The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        ref -- The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        state -- Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
        
        """
        
        data = {}
        if tool_name is not None:
            data['tool_name'] = tool_name
        if tool_guid is not None:
            data['tool_guid'] = tool_guid
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        if ref is not None:
            data['ref'] = ref
        if state is not None:
            data['state'] = state
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/code-scanning/alerts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CodeScanningAlertItems(**entry) for entry in r.json() ]
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodeScanningGetAlert(self, owner:str, repo:str, alert_number:None):
        """Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.

**Deprecation notice**:
The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
        
        https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-alert
        /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
        
        arguments:
        owner -- 
        repo -- 
        alert_number -- The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CodeScanningAlert(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodeScanningUpdateAlert(self, owner:str, repo:str, alert_number:None,state:str, dismissed_reason:str=None):
        """Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
        
        https://docs.github.com/rest/reference/code-scanning#update-a-code-scanning-alert
        /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
        
        arguments:
        owner -- 
        repo -- 
        alert_number -- The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        state -- 
        dismissed_reason -- 
        

        """
    
        data = {
        'state': state,
        'dismissed_reason': dismissed_reason,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return CodeScanningAlert(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def CodeScanningListAlertInstances(self, owner:str, repo:str, alert_number:None,page=1, per_page=30, ref=None):
        """Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
        
        https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert
        /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances
        
        arguments:
        owner -- 
        repo -- 
        alert_number -- The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        ref -- The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        
        """
        
        data = {}
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        if ref is not None:
            data['ref'] = ref
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CodeScanningAlertInstance(**entry) for entry in r.json() ]
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodeScanningListRecentAnalyses(self, owner:str, repo:str,tool_name=None, tool_guid=None, page=1, per_page=30, ref=None, sarif_id=None):
        """Lists the details of all code scanning analyses for a repository,
starting with the most recent.
The response is paginated and you can use the `page` and `per_page` parameters
to list the analyses you're interested in.
By default 30 analyses are listed per page.

The `rules_count` field in the response give the number of rules
that were run in the analysis.
For very old analyses this data is not available,
and `0` is returned in this field.

You must use an access token with the `security_events` scope to use this endpoint.
GitHub Apps must have the `security_events` read permission to use this endpoint.

**Deprecation notice**:
The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
        
        https://docs.github.com/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository
        /repos/{owner}/{repo}/code-scanning/analyses
        
        arguments:
        owner -- 
        repo -- 
        tool_name -- The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
        tool_guid -- The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        ref -- The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
        sarif_id -- Filter analyses belonging to the same SARIF upload.
        
        """
        
        data = {}
        if tool_name is not None:
            data['tool_name'] = tool_name
        if tool_guid is not None:
            data['tool_guid'] = tool_guid
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        if ref is not None:
            data['ref'] = ref
        if sarif_id is not None:
            data['sarif_id'] = sarif_id
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/code-scanning/analyses", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and CodeScanningAnalysis(**entry) for entry in r.json() ]
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodeScanningGetAnalysis(self, owner:str, repo:str, analysis_id:int):
        """Gets a specified code scanning analysis for a repository.
You must use an access token with the `security_events` scope to use this endpoint.
GitHub Apps must have the `security_events` read permission to use this endpoint.

The default JSON response contains fields that describe the analysis.
This includes the Git reference and commit SHA to which the analysis relates,
the datetime of the analysis, the name of the code scanning tool,
and the number of alerts.

The `rules_count` field in the default response give the number of rules
that were run in the analysis.
For very old analyses this data is not available,
and `0` is returned in this field.

If you use the Accept header `application/sarif+json`,
the response contains the analysis data that was uploaded.
This is formatted as
[SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).

**Deprecation notice**:
The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
        
        https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository
        /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
        
        arguments:
        owner -- 
        repo -- 
        analysis_id -- The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CodeScanningAnalysis(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodeScanningDeleteAnalysis(self, owner:str, repo:str, analysis_id:int,confirm_delete=None):
        """Deletes a specified code scanning analysis from a repository. For
private repositories, you must use an access token with the `repo` scope. For public repositories,
you must use an access token with `public_repo` and `repo:security_events` scopes.
GitHub Apps must have the `security_events` write permission to use this endpoint.

You can delete one analysis at a time.
To delete a series of analyses, start with the most recent analysis and work backwards.
Conceptually, the process is similar to the undo function in a text editor.

When you list the analyses for a repository,
one or more will be identified as deletable in the response:

```
"deletable": true
```

An analysis is deletable when it's the most recent in a set of analyses.
Typically, a repository will have multiple sets of analyses
for each enabled code scanning tool,
where a set is determined by a unique combination of analysis values:

* `ref`
* `tool`
* `analysis_key`
* `environment`

If you attempt to delete an analysis that is not the most recent in a set,
you'll get a 400 response with the message:

```
Analysis specified is not deletable.
```

The response from a successful `DELETE` operation provides you with
two alternative URLs for deleting the next analysis in the set
(see the example default response below).
Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
in the set. This is a useful option if you want to preserve at least one analysis
for the specified tool in your repository.
Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
in the 200 response is `null`.

As an example of the deletion process,
let's imagine that you added a workflow that configured a particular code scanning tool
to analyze the code in a repository. This tool has added 15 analyses:
10 on the default branch, and another 5 on a topic branch.
You therefore have two separate sets of analyses for this tool.
You've now decided that you want to remove all of the analyses for the tool.
To do this you must make 15 separate deletion requests.
To start, you must find the deletable analysis for one of the sets,
step through deleting the analyses in that set,
and then repeat the process for the second set.
The procedure therefore consists of a nested loop:

**Outer loop**:
* List the analyses for the repository, filtered by tool.
* Parse this list to find a deletable analysis. If found:

  **Inner loop**:
  * Delete the identified analysis.
  * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.

The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
        
        https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository
        /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
        
        arguments:
        owner -- 
        repo -- 
        analysis_id -- The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
        confirm_delete -- Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
        
        """
        
        data = {}
        if confirm_delete is not None:
            data['confirm_delete'] = confirm_delete
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return AnalysisDeletion(**r.json())
            
        if r.status_code == 400:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def CodeScanningUploadSarif(self, owner:str, repo:str,sarif:str, ref:str, commit_sha:str, checkout_uri:str=None, started_at:datetime=None, tool_name:str=None):
        """Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.

There are two places where you can upload code scanning results.
 - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
 - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."

You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:

```
gzip -c analysis-data.sarif | base64 -w0
```

SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.

The `202 Accepted`, response includes an `id` value.
You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
        
        https://docs.github.com/rest/reference/code-scanning#upload-a-sarif-file
        /repos/{owner}/{repo}/code-scanning/sarifs
        
        arguments:
        owner -- 
        repo -- 
        sarif -- 
        ref -- 
        commit_sha -- 
        checkout_uri -- The base directory used in the analysis, as it appears in the SARIF file.
This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
        started_at -- The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        tool_name -- The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
        

        """
    
        data = {
        'sarif': sarif,
        'ref': ref,
        'commit_sha': commit_sha,
        'checkout_uri': checkout_uri,
        'started_at': started_at,
        'tool_name': tool_name,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/code-scanning/sarifs", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return CodeScanningSarifsReceipt(**r.json())
            
        if r.status_code == 400:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 413:
            return HttpResponse(r.status_code)
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def CodeScanningGetSarif(self, owner:str, repo:str, sarif_id:str):
        """Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
        
        https://docs.github.com/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository
        /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}
        
        arguments:
        owner -- 
        repo -- 
        sarif_id -- The SARIF ID obtained after uploading.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return CodeScanningSarifsStatus(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GitCreateBlob(self, owner:str, repo:str,content:str, encoding:str='utf-8'):
        """
        
        https://docs.github.com/rest/reference/git#create-a-blob
        /repos/{owner}/{repo}/git/blobs
        
        arguments:
        owner -- 
        repo -- 
        content -- The new blob's content.
        encoding -- The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
        

        """
    
        data = {
        'content': content,
        'encoding': encoding,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/git/blobs", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ShortBlob(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 409:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GitGetBlob(self, owner:str, repo:str, file_sha:str):
        """The `content` in the response will always be Base64 encoded.

_Note_: This API supports blobs up to 100 megabytes in size.
        
        https://docs.github.com/rest/reference/git#get-a-blob
        /repos/{owner}/{repo}/git/blobs/{file_sha}
        
        arguments:
        owner -- 
        repo -- 
        file_sha -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/git/blobs/{file_sha}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Blob(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GitCreateCommit(self, owner:str, repo:str,tree:str, message:str, parents:list=None, author:dict=None, committer:dict=None, signature:str=None):
        """Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
        
        https://docs.github.com/rest/reference/git#create-a-commit
        /repos/{owner}/{repo}/git/commits
        
        arguments:
        owner -- 
        repo -- 
        tree -- The SHA of the tree object this commit points to
        message -- The commit message
        parents -- The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
        author -- Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
        committer -- Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
        signature -- The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
        

        """
    
        data = {
        'tree': tree,
        'message': message,
        'parents': parents,
        'author': author,
        'committer': committer,
        'signature': signature,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/git/commits", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GitCommit(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GitGetCommit(self, owner:str, repo:str, commit_sha:str):
        """Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
        
        https://docs.github.com/rest/reference/git#get-a-commit
        /repos/{owner}/{repo}/git/commits/{commit_sha}
        
        arguments:
        owner -- 
        repo -- 
        commit_sha -- commit_sha parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/git/commits/{commit_sha}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GitCommit(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GitListMatchingRefs(self, owner:str, repo:str, ref:str,per_page=30, page=1):
        """Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.

When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.

**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".

If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
        
        https://docs.github.com/rest/reference/git#list-matching-references
        /repos/{owner}/{repo}/git/matching-refs/{ref}
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/git/matching-refs/{ref}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and GitReference(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def GitGetRef(self, owner:str, repo:str, ref:str):
        """Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.

**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
        
        https://docs.github.com/rest/reference/git#get-a-reference
        /repos/{owner}/{repo}/git/ref/{ref}
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/git/ref/{ref}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GitReference(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GitCreateRef(self, owner:str, repo:str,sha:str, ref:str, key:str=None):
        """Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
        
        https://docs.github.com/rest/reference/git#create-a-reference
        /repos/{owner}/{repo}/git/refs
        
        arguments:
        owner -- 
        repo -- 
        sha -- The SHA1 value for this reference.
        ref -- The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
        key -- 
        

        """
    
        data = {
        'sha': sha,
        'ref': ref,
        'key': key,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/git/refs", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GitReference(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GitUpdateRef(self, owner:str, repo:str, ref:str,sha:str, force:bool=False):
        """
        
        https://docs.github.com/rest/reference/git#update-a-reference
        /repos/{owner}/{repo}/git/refs/{ref}
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        sha -- The SHA1 value to set this reference to
        force -- Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
        

        """
    
        data = {
        'sha': sha,
        'force': force,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/git/refs/{ref}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return GitReference(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GitDeleteRef(self, owner:str, repo:str, ref:str):
        """
        
        https://docs.github.com/rest/reference/git#delete-a-reference
        /repos/{owner}/{repo}/git/refs/{ref}
        
        arguments:
        owner -- 
        repo -- 
        ref -- ref parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/git/refs/{ref}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GitCreateTag(self, owner:str, repo:str,type:str, object:str, message:str, tag:str, tagger:dict=None):
        """Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
        
        https://docs.github.com/rest/reference/git#create-a-tag-object
        /repos/{owner}/{repo}/git/tags
        
        arguments:
        owner -- 
        repo -- 
        type -- The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
        object -- The SHA of the git object this is tagging.
        message -- The tag message.
        tag -- The tag's name. This is typically a version (e.g., "v0.0.1").
        tagger -- An object with information about the individual creating the tag.
        

        """
    
        data = {
        'type': type,
        'object': object,
        'message': message,
        'tag': tag,
        'tagger': tagger,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/git/tags", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GitTag(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GitGetTag(self, owner:str, repo:str, tag_sha:str):
        """**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
        
        https://docs.github.com/rest/reference/git#get-a-tag
        /repos/{owner}/{repo}/git/tags/{tag_sha}
        
        arguments:
        owner -- 
        repo -- 
        tag_sha -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/git/tags/{tag_sha}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GitTag(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def GitCreateTree(self, owner:str, repo:str,tree:list, base_tree:str=None):
        """The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.

If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
        
        https://docs.github.com/rest/reference/git#create-a-tree
        /repos/{owner}/{repo}/git/trees
        
        arguments:
        owner -- 
        repo -- 
        tree -- Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
        base_tree -- The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.

        

        """
    
        data = {
        'tree': tree,
        'base_tree': base_tree,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/git/trees", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GitTree(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def GitGetTree(self, owner:str, repo:str, tree_sha:str,recursive=None):
        """Returns a single tree using the SHA1 value for that tree.

If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
        
        https://docs.github.com/rest/reference/git#get-a-tree
        /repos/{owner}/{repo}/git/trees/{tree_sha}
        
        arguments:
        owner -- 
        repo -- 
        tree_sha -- 
        recursive -- Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
        
        """
        
        data = {}
        if recursive is not None:
            data['recursive'] = recursive
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/git/trees/{tree_sha}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GitTree(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsList(self, owner:str, repo:str,state='open', head=None, base=None, sort='created', direction='None', per_page=30, page=1):
        """Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
        
        https://docs.github.com/rest/reference/pulls#list-pull-requests
        /repos/{owner}/{repo}/pulls
        
        arguments:
        owner -- 
        repo -- 
        state -- Either `open`, `closed`, or `all` to filter by state.
        head -- Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
        base -- Filter pulls by base branch name. Example: `gh-pages`.
        sort -- What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
        direction -- The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if state is not None:
            data['state'] = state
        if head is not None:
            data['head'] = head
        if base is not None:
            data['base'] = base
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PullRequestSimple(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsCreate(self, owner:str, repo:str,base:str, head:str, title:str=None, body:str=None, maintainer_can_modify:bool=None, draft:bool=None, issue:int=None):
        """Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.

You can create a new pull request.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/pulls#create-a-pull-request
        /repos/{owner}/{repo}/pulls
        
        arguments:
        owner -- 
        repo -- 
        base -- The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
        head -- The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
        title -- The title of the new pull request.
        body -- The contents of the pull request.
        maintainer_can_modify -- Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
        draft -- Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
        issue -- 
        

        """
    
        data = {
        'base': base,
        'head': head,
        'title': title,
        'body': body,
        'maintainer_can_modify': maintainer_can_modify,
        'draft': draft,
        'issue': issue,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pulls", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return PullRequest(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsListReviewCommentsForRepo(self, owner:str, repo:str,sort='None', direction='None', since=None, per_page=30, page=1):
        """Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
        
        https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository
        /repos/{owner}/{repo}/pulls/comments
        
        arguments:
        owner -- 
        repo -- 
        sort -- 
        direction -- Can be either `asc` or `desc`. Ignored without `sort` parameter.
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PullRequestReviewComment(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def PullsGetReviewComment(self, owner:str, repo:str, comment_id:int):
        """Provides details for a review comment.
        
        https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request
        /repos/{owner}/{repo}/pulls/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/comments/{comment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PullRequestReviewComment(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsUpdateReviewComment(self, owner:str, repo:str, comment_id:int,body:str):
        """Enables you to edit a review comment.
        
        https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request
        /repos/{owner}/{repo}/pulls/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        body -- The text of the reply to the review comment.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/pulls/comments/{comment_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PullRequestReviewComment(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsDeleteReviewComment(self, owner:str, repo:str, comment_id:int):
        """Deletes a review comment.
        
        https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request
        /repos/{owner}/{repo}/pulls/comments/{comment_id}
        
        arguments:
        owner -- 
        repo -- 
        comment_id -- comment_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/pulls/comments/{comment_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsGet(self, owner:str, repo:str, pull_number:int):
        """Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists details of a pull request by providing its number.

When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".

The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.

The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:

*   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
*   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
*   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.

Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
        
        https://docs.github.com/rest/reference/pulls#get-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PullRequest(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 500:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsUpdate(self, owner:str, repo:str, pull_number:int,title:str=None, body:str=None, state:str=None, base:str=None, maintainer_can_modify:bool=None):
        """Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
        
        https://docs.github.com/rest/reference/pulls/#update-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        title -- The title of the pull request.
        body -- The contents of the pull request.
        state -- State of this Pull Request. Either `open` or `closed`.
        base -- The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
        maintainer_can_modify -- Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
        

        """
    
        data = {
        'title': title,
        'body': body,
        'state': state,
        'base': base,
        'maintainer_can_modify': maintainer_can_modify,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PullRequest(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsListReviewComments(self, owner:str, repo:str, pull_number:int,sort='created', direction='None', since=None, per_page=30, page=1):
        """Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
        
        https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/comments
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        sort -- One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
        direction -- Can be either `asc` or `desc`. Ignored without `sort` parameter.
        since -- Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if sort is not None:
            data['sort'] = sort
        if direction is not None:
            data['direction'] = direction
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PullRequestReviewComment(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def PullsCreateReviewComment(self, owner:str, repo:str, pull_number:int,body:str, commit_id:str=None, path:str=None, position:int=None, side:str=None, line:int=None, start_line:int=None, start_side:str=None, in_reply_to:int=None):
        """
Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.

You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).

**Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/comments
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        body -- The text of the review comment.
        commit_id -- The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
        path -- The relative path to the file that necessitates a comment.
        position -- **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
        side -- **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
        line -- **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
        start_line -- **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
        start_side -- **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
        in_reply_to -- 
        

        """
    
        data = {
        'body': body,
        'commit_id': commit_id,
        'path': path,
        'position': position,
        'side': side,
        'line': line,
        'start_line': start_line,
        'start_side': start_side,
        'in_reply_to': in_reply_to,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/comments", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return PullRequestReviewComment(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsCreateReplyForReviewComment(self, owner:str, repo:str, pull_number:int, comment_id:int,body:str):
        """Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/pulls#create-a-reply-for-a-review-comment
        /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        comment_id -- comment_id parameter
        body -- The text of the review comment.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return PullRequestReviewComment(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsListCommits(self, owner:str, repo:str, pull_number:int,per_page=30, page=1):
        """Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
        
        https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/commits
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/commits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Commit(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def PullsListFiles(self, owner:str, repo:str, pull_number:int,per_page=30, page=1):
        """**Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
        
        https://docs.github.com/rest/reference/pulls#list-pull-requests-files
        /repos/{owner}/{repo}/pulls/{pull_number}/files
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/files", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and DiffEntry(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 500:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsCheckIfMerged(self, owner:str, repo:str, pull_number:int):
        """
        
        https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged
        /repos/{owner}/{repo}/pulls/{pull_number}/merge
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/merge", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def PullsMerge(self, owner:str, repo:str, pull_number:int,commit_title:str=None, commit_message:str=None, sha:str=None, merge_method:str=None):
        """This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/pulls#merge-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/merge
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        commit_title -- Title for the automatic commit message.
        commit_message -- Extra detail to append to automatic commit message.
        sha -- SHA that pull request head must match to allow merge.
        merge_method -- Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
        

        """
    
        data = {
        'commit_title': commit_title,
        'commit_message': commit_message,
        'sha': sha,
        'merge_method': merge_method,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/merge", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PullRequestMergeResult(**r.json())
            
        if r.status_code == 405:
            return PullsMerge405(**r.json())
            
        if r.status_code == 409:
            return PullsMerge409(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsListRequestedReviewers(self, owner:str, repo:str, pull_number:int,per_page=30, page=1):
        """
        
        https://docs.github.com/rest/reference/pulls#list-requested-reviewers-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PullRequestReviewRequest(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsRequestReviewers(self, owner:str, repo:str, pull_number:int,reviewers:list=None, team_reviewers:list=None):
        """This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
        
        https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        reviewers -- An array of user `login`s that will be requested.
        team_reviewers -- An array of team `slug`s that will be requested.
        

        """
    
        data = {
        'reviewers': reviewers,
        'team_reviewers': team_reviewers,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return PullRequestSimple(**r.json())
            
        if r.status_code == 422:
            return HttpResponse(r.status_code)
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsRemoveRequestedReviewers(self, owner:str, repo:str, pull_number:int):
        """
        
        https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PullRequestSimple(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsListReviews(self, owner:str, repo:str, pull_number:int,per_page=30, page=1):
        """The list of reviews returns in chronological order.
        
        https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/reviews
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/reviews", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and PullRequestReview(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def PullsCreateReview(self, owner:str, repo:str, pull_number:int,commit_id:str=None, body:str=None, event:str=None, comments:list=None):
        """This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.

**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.

The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
        
        https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/reviews
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        commit_id -- The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
        body -- **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
        event -- The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
        comments -- Use the following table to specify the location, destination, and contents of the draft review comment.
        

        """
    
        data = {
        'commit_id': commit_id,
        'body': body,
        'event': event,
        'comments': comments,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/reviews", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PullRequestReview(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsGetReview(self, owner:str, repo:str, pull_number:int, review_id:int):
        """
        
        https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        review_id -- review_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PullRequestReview(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsUpdateReview(self, owner:str, repo:str, pull_number:int, review_id:int,body:str):
        """Update the review summary comment with new text.
        
        https://docs.github.com/rest/reference/pulls#update-a-review-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        review_id -- review_id parameter
        body -- The body text of the pull request review.
        

        """
    
        data = {
        'body': body,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PullRequestReview(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsDeletePendingReview(self, owner:str, repo:str, pull_number:int, review_id:int):
        """
        
        https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        review_id -- review_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return PullRequestReview(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsListCommentsForReview(self, owner:str, repo:str, pull_number:int, review_id:int,per_page=30, page=1):
        """List comments for a specific pull request review.
        
        https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review
        /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        review_id -- review_id parameter
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and LegacyReviewComment(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def PullsDismissReview(self, owner:str, repo:str, pull_number:int, review_id:int,message:str, event:str=None):
        """**Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
        
        https://docs.github.com/rest/reference/pulls#dismiss-a-review-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        review_id -- review_id parameter
        message -- The message for the pull request review dismissal
        event -- 
        

        """
    
        data = {
        'message': message,
        'event': event,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PullRequestReview(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsSubmitReview(self, owner:str, repo:str, pull_number:int, review_id:int,event:str, body:str=None):
        """
        
        https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request
        /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        review_id -- review_id parameter
        event -- The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
        body -- The body text of the pull request review
        

        """
    
        data = {
        'event': event,
        'body': body,
        
        }
        
        
        r = requests.post(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PullRequestReview(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationErrorSimple(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def PullsUpdateBranch(self, owner:str, repo:str, pull_number:int,expected_head_sha:str=None):
        """Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
        
        https://docs.github.com/rest/reference/pulls#update-a-pull-request-branch
        /repos/{owner}/{repo}/pulls/{pull_number}/update-branch
        
        arguments:
        owner -- 
        repo -- 
        pull_number -- 
        expected_head_sha -- The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
        

        """
    
        data = {
        'expected_head_sha': expected_head_sha,
        
        }
        
        
        r = requests.put(f"{self._url}/repos/{owner}/{repo}/pulls/{pull_number}/update-branch", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 202:
            return PullsUpdateBranch202(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def SecretScanningListAlertsForRepo(self, owner:str, repo:str,state='None', secret_type=None, page=1, per_page=30):
        """Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.

GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        
        https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository
        /repos/{owner}/{repo}/secret-scanning/alerts
        
        arguments:
        owner -- 
        repo -- 
        state -- Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
        secret_type -- A comma separated list of secret types to return. By default all secret types are returned. See "[About secret scanning for private repositories](https://docs.github.com/code-security/secret-security/about-secret-scanning#about-secret-scanning-for-private-repositories)" for a complete list of secret types (API slug).
        page -- Page number of the results to fetch.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if state is not None:
            data['state'] = state
        if secret_type is not None:
            data['secret_type'] = secret_type
        if page is not None:
            data['page'] = page
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/secret-scanning/alerts", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SecretScanningAlert(**entry) for entry in r.json() ]
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SecretScanningGetAlert(self, owner:str, repo:str, alert_number:None):
        """Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.

GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        
        https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert
        /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
        
        arguments:
        owner -- 
        repo -- 
        alert_number -- The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SecretScanningAlert(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SecretScanningUpdateAlert(self, owner:str, repo:str, alert_number:None,state:str, resolution:str=None):
        """Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.

GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
        
        https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert
        /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
        
        arguments:
        owner -- 
        repo -- 
        alert_number -- The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        state -- 
        resolution -- 
        

        """
    
        data = {
        'state': state,
        'resolution': resolution,
        
        }
        
        
        r = requests.patch(f"{self._url}/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return SecretScanningAlert(**r.json())
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        if r.status_code == 422:
            return HttpResponse(r.status_code)
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ScimListProvisionedIdentities(self, org:str,startIndex=None, count=None, filter=None):
        """Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.

When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
  - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
  - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.

The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:

1. The user is granted access by the IdP and is not a member of the GitHub organization.

1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.

1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
   - If the user signs in, their GitHub account is linked to this entry.
   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
        
        https://docs.github.com/rest/reference/scim#list-scim-provisioned-identities
        /scim/v2/organizations/{org}/Users
        
        arguments:
        org -- 
        startIndex -- Used for pagination: the index of the first result to return.
        count -- Used for pagination: the number of results to return.
        filter -- Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:

`?filter=userName%20eq%20\"Octocat\"`.

To filter results for the identity with the email `octocat@github.com`, you would use this query:

`?filter=emails%20eq%20\"octocat@github.com\"`.
        
        """
        
        data = {}
        if startIndex is not None:
            data['startIndex'] = startIndex
        if count is not None:
            data['count'] = count
        if filter is not None:
            data['filter'] = filter
        
        
        r = requests.get(f"{self._url}/scim/v2/organizations/{org}/Users", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ScimUserList(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return ScimError(**r.json())
            
        if r.status_code == 403:
            return ScimError(**r.json())
            
        if r.status_code == 400:
            return ScimError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ScimProvisionAndInviteUser(self, org:str,emails:list, name:dict, userName:str, displayName:str=None, schemas:list=None, externalId:str=None, groups:list=None, active:bool=None):
        """Provision organization membership for a user, and send an activation email to the email address.
        
        https://docs.github.com/rest/reference/scim#provision-and-invite-a-scim-user
        /scim/v2/organizations/{org}/Users
        
        arguments:
        org -- 
        emails -- user emails
        name -- 
        userName -- Configured by the admin. Could be an email, login, or username
        displayName -- The name of the user, suitable for display to end-users
        schemas -- 
        externalId -- 
        groups -- 
        active -- 
        

        """
    
        data = {
        'emails': emails,
        'name': name,
        'userName': userName,
        'displayName': displayName,
        'schemas': schemas,
        'externalId': externalId,
        'groups': groups,
        'active': active,
        
        }
        
        
        r = requests.post(f"{self._url}/scim/v2/organizations/{org}/Users", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return ScimUsers(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return ScimError(**r.json())
            
        if r.status_code == 403:
            return ScimError(**r.json())
            
        if r.status_code == 500:
            return ScimError(**r.json())
            
        if r.status_code == 409:
            return ScimError(**r.json())
            
        if r.status_code == 400:
            return ScimError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ScimGetProvisioningInformationForUser(self, org:str, scim_user_id:str):
        """
        
        https://docs.github.com/rest/reference/scim#get-scim-provisioning-information-for-a-user
        /scim/v2/organizations/{org}/Users/{scim_user_id}
        
        arguments:
        org -- 
        scim_user_id -- scim_user_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/scim/v2/organizations/{org}/Users/{scim_user_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return ScimUsers(**r.json())
            
        if r.status_code == 404:
            return ScimError(**r.json())
            
        if r.status_code == 403:
            return ScimError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def ScimSetInformationForProvisionedUser(self, org:str, scim_user_id:str,emails:list, name:dict, userName:str, schemas:list=None, displayName:str=None, externalId:str=None, groups:list=None, active:bool=None):
        """Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.

You must at least provide the required values for the user: `userName`, `name`, and `emails`.

**Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
        
        https://docs.github.com/rest/reference/scim#set-scim-information-for-a-provisioned-user
        /scim/v2/organizations/{org}/Users/{scim_user_id}
        
        arguments:
        org -- 
        scim_user_id -- scim_user_id parameter
        emails -- user emails
        name -- 
        userName -- Configured by the admin. Could be an email, login, or username
        schemas -- 
        displayName -- The name of the user, suitable for display to end-users
        externalId -- 
        groups -- 
        active -- 
        

        """
    
        data = {
        'emails': emails,
        'name': name,
        'userName': userName,
        'schemas': schemas,
        'displayName': displayName,
        'externalId': externalId,
        'groups': groups,
        'active': active,
        
        }
        
        
        r = requests.put(f"{self._url}/scim/v2/organizations/{org}/Users/{scim_user_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ScimUsers(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return ScimError(**r.json())
            
        if r.status_code == 403:
            return ScimError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ScimUpdateAttributeForUser(self, org:str, scim_user_id:str,Operations:list, schemas:list=None):
        """Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).

**Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.

**Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.

```
{
  "Operations":[{
    "op":"replace",
    "value":{
      "active":false
    }
  }]
}
```
        
        https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user
        /scim/v2/organizations/{org}/Users/{scim_user_id}
        
        arguments:
        org -- 
        scim_user_id -- scim_user_id parameter
        Operations -- Set of operations to be performed
        schemas -- 
        

        """
    
        data = {
        'Operations': Operations,
        'schemas': schemas,
        
        }
        
        
        r = requests.patch(f"{self._url}/scim/v2/organizations/{org}/Users/{scim_user_id}", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return ScimUsers(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return ScimError(**r.json())
            
        if r.status_code == 403:
            return ScimError(**r.json())
            
        if r.status_code == 400:
            return ScimError(**r.json())
            
        if r.status_code == 429:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def ScimDeleteUserFromOrg(self, org:str, scim_user_id:str):
        """
        
        https://docs.github.com/rest/reference/scim#delete-a-scim-user-from-an-organization
        /scim/v2/organizations/{org}/Users/{scim_user_id}
        
        arguments:
        org -- 
        scim_user_id -- scim_user_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/scim/v2/organizations/{org}/Users/{scim_user_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return ScimError(**r.json())
            
        if r.status_code == 403:
            return ScimError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SearchCode(self, q:str, sort='None', order='desc', per_page=30, page=1):
        """Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).

When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).

For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:

`q=addClass+in:file+language:js+repo:jquery/jquery`

This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.

#### Considerations for code search

Due to the complexity of searching code, there are a few restrictions on how searches are performed:

*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
*   Only files smaller than 384 KB are searchable.
*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
        
        https://docs.github.com/rest/reference/search#search-code
        /search/code
        
        arguments:
        q -- The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://help.github.com/articles/searching-code/)" for a detailed list of qualifiers.
        sort -- Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
        order -- Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if q is not None:
            data['q'] = q
        if sort is not None:
            data['sort'] = sort
        if order is not None:
            data['order'] = order
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/search/code", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SearchCodeSuccess(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SearchCommits(self, q:str, sort='None', order='desc', per_page=30, page=1):
        """Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).

When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
metadata](https://docs.github.com/rest/reference/search#text-match-metadata).

For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:

`q=repo:octocat/Spoon-Knife+css`
        
        https://docs.github.com/rest/reference/search#search-commits
        /search/commits
        
        arguments:
        q -- The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://help.github.com/articles/searching-commits/)" for a detailed list of qualifiers.
        sort -- Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
        order -- Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if q is not None:
            data['q'] = q
        if sort is not None:
            data['sort'] = sort
        if order is not None:
            data['order'] = order
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/search/commits", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SearchCommitsSuccess(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SearchIssuesAndPullRequests(self, q:str, sort='None', order='desc', per_page=30, page=1):
        """Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).

When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).

For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.

`q=windows+label:bug+language:python+state:open&sort=created&order=asc`

This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.

**Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
        
        https://docs.github.com/rest/reference/search#search-issues-and-pull-requests
        /search/issues
        
        arguments:
        q -- The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers.
        sort -- Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
        order -- Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if q is not None:
            data['q'] = q
        if sort is not None:
            data['sort'] = sort
        if order is not None:
            data['order'] = order
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/search/issues", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SearchIssuesAndPullRequestsSuccess(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SearchLabels(self, repository_id:int, q:str, sort='None', order='desc', per_page=30, page=1):
        """Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).

When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).

For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:

`q=bug+defect+enhancement&repository_id=64778136`

The labels that best match the query appear first in the search results.
        
        https://docs.github.com/rest/reference/search#search-labels
        /search/labels
        
        arguments:
        repository_id -- The id of the repository.
        q -- The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
        sort -- Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
        order -- Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if repository_id is not None:
            data['repository_id'] = repository_id
        if q is not None:
            data['q'] = q
        if sort is not None:
            data['sort'] = sort
        if order is not None:
            data['order'] = order
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/search/labels", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SearchLabelsSuccess(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SearchRepos(self, q:str, sort='None', order='desc', per_page=30, page=1):
        """Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).

When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).

For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:

`q=tetris+language:assembly&sort=stars&order=desc`

This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.

When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:

`q=topic:ruby+topic:rails`
        
        https://docs.github.com/rest/reference/search#search-repositories
        /search/repositories
        
        arguments:
        q -- The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
        sort -- Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
        order -- Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if q is not None:
            data['q'] = q
        if sort is not None:
            data['sort'] = sort
        if order is not None:
            data['order'] = order
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/search/repositories", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SearchReposSuccess(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SearchTopics(self, q:str, per_page=30, page=1):
        """Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.

When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).

For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:

`q=ruby+is:featured`

This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
        
        https://docs.github.com/rest/reference/search#search-topics
        /search/topics
        
        arguments:
        q -- The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if q is not None:
            data['q'] = q
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/search/topics", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SearchTopicsSuccess(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def SearchUsers(self, q:str, sort='None', order='desc', per_page=30, page=1):
        """Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).

When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).

For example, if you're looking for a list of popular users, you might try this query:

`q=tom+repos:%3E42+followers:%3E1000`

This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
        
        https://docs.github.com/rest/reference/search#search-users
        /search/users
        
        arguments:
        q -- The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://help.github.com/articles/searching-users/)" for a detailed list of qualifiers.
        sort -- Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
        order -- Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if q is not None:
            data['q'] = q
        if sort is not None:
            data['sort'] = sort
        if order is not None:
            data['order'] = order
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/search/users", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return SearchUsersSuccess(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 503:
            return Service_unavailable(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersGetAuthenticated(self, ):
        """If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.

If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
        
        https://docs.github.com/rest/reference/users#get-the-authenticated-user
        /user
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersUpdateAuthenticated(self, name:str=None, email:str=None, blog:str=None, twitter_username:str=None, company:str=None, location:str=None, hireable:bool=None, bio:str=None):
        """**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
        
        https://docs.github.com/rest/reference/users/#update-the-authenticated-user
        /user
        
        arguments:
        name -- The new name of the user.
        email -- The publicly visible email address of the user.
        blog -- The new blog URL of the user.
        twitter_username -- The new Twitter username of the user.
        company -- The new company of the user.
        location -- The new location of the user.
        hireable -- The new hiring availability of the user.
        bio -- The new short biography of the user.
        

        """
    
        data = {
        'name': name,
        'email': email,
        'blog': blog,
        'twitter_username': twitter_username,
        'company': company,
        'location': location,
        'hireable': hireable,
        'bio': bio,
        
        }
        
        
        r = requests.patch(f"{self._url}/user", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return PrivateUser(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def UsersListBlockedByAuthenticated(self, ):
        """List the users you've blocked on your personal account.
        
        https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user
        /user/blocks
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/blocks", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 415:
            return Preview_header_missing(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersCheckBlocked(self, username:str):
        """
        
        https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user
        /user/blocks/{username}
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/blocks/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersBlock(self, username:str):
        """
        
        https://docs.github.com/rest/reference/users#block-a-user
        /user/blocks/{username}
        
        arguments:
        username -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/user/blocks/{username}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def UsersUnblock(self, username:str):
        """
        
        https://docs.github.com/rest/reference/users#unblock-a-user
        /user/blocks/{username}
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/blocks/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersSetPrimaryEmailVisibilityForAuthenticated(self, visibility:str):
        """Sets the visibility for your primary email addresses.
        
        https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user
        /user/email/visibility
        
        arguments:
        visibility -- Denotes whether an email is publicly visible.
        

        """
    
        data = {
        'visibility': visibility,
        
        }
        
        
        r = requests.patch(f"{self._url}/user/email/visibility", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 200:
            return [ entry and Email(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def UsersListEmailsForAuthenticated(self, per_page=30, page=1):
        """Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
        
        https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user
        /user/emails
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/emails", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Email(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersAddEmailForAuthenticated(self, object:object):
        """This endpoint is accessible with the `user` scope.
        
        https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user
        /user/emails
        
        arguments:
        object -- 
        

        """
    
        data = {
        'object': object,
        
        }
        
        
        r = requests.post(f"{self._url}/user/emails", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return [ entry and Email(**entry) for entry in r.json() ]
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def UsersDeleteEmailForAuthenticated(self, ):
        """This endpoint is accessible with the `user` scope.
        
        https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user
        /user/emails
        
        arguments:
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/emails", 
                           params=data,
                           headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListFollowersForAuthenticatedUser(self, per_page=30, page=1):
        """Lists the people following the authenticated user.
        
        https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user
        /user/followers
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/followers", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListFollowedByAuthenticated(self, per_page=30, page=1):
        """Lists the people who the authenticated user follows.
        
        https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows
        /user/following
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/following", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersCheckPersonIsFollowedByAuthenticated(self, username:str):
        """
        
        https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user
        /user/following/{username}
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/following/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersFollow(self, username:str):
        """Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."

Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
        
        https://docs.github.com/rest/reference/users#follow-a-user
        /user/following/{username}
        
        arguments:
        username -- 
        

        """
    
        data = {
        
        }
        
        
        r = requests.put(f"{self._url}/user/following/{username}", 
                          json=data,
                          headers=self._headers())
        self._updateStats(r.headers)
                          
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def UsersUnfollow(self, username:str):
        """Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
        
        https://docs.github.com/rest/reference/users#unfollow-a-user
        /user/following/{username}
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/following/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListGpgKeysForAuthenticated(self, per_page=30, page=1):
        """Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user
        /user/gpg_keys
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/gpg_keys", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and GpgKey(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersCreateGpgKeyForAuthenticated(self, armored_public_key:str):
        """Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user
        /user/gpg_keys
        
        arguments:
        armored_public_key -- A GPG key in ASCII-armored format.
        

        """
    
        data = {
        'armored_public_key': armored_public_key,
        
        }
        
        
        r = requests.post(f"{self._url}/user/gpg_keys", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return GpgKey(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def UsersGetGpgKeyForAuthenticated(self, gpg_key_id:int):
        """View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user
        /user/gpg_keys/{gpg_key_id}
        
        arguments:
        gpg_key_id -- gpg_key_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/gpg_keys/{gpg_key_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return GpgKey(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersDeleteGpgKeyForAuthenticated(self, gpg_key_id:int):
        """Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user
        /user/gpg_keys/{gpg_key_id}
        
        arguments:
        gpg_key_id -- gpg_key_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/gpg_keys/{gpg_key_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListPublicSshKeysForAuthenticated(self, per_page=30, page=1):
        """Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user
        /user/keys
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/keys", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Key(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersCreatePublicSshKeyForAuthenticated(self, key:str, title:str=None):
        """Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user
        /user/keys
        
        arguments:
        key -- The public SSH key to add to your GitHub account.
        title -- A descriptive name for the new key.
        

        """
    
        data = {
        'key': key,
        'title': title,
        
        }
        
        
        r = requests.post(f"{self._url}/user/keys", 
                          json=data,
                          headers=self._headers({'Content-Type':  'application/json'}))
        self._updateStats(r.headers)
                          
        
        if r.status_code == 201:
            return Key(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            

        raise UnexpectedResult(r.status_code)

    def UsersGetPublicSshKeyForAuthenticated(self, key_id:int):
        """View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user
        /user/keys/{key_id}
        
        arguments:
        key_id -- key_id parameter
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/user/keys/{key_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Key(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersDeletePublicSshKeyForAuthenticated(self, key_id:int):
        """Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user
        /user/keys/{key_id}
        
        arguments:
        key_id -- key_id parameter
        
        """
        
        data = {}
        
        
        r = requests.delete(f"{self._url}/user/keys/{key_id}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListPublicEmailsForAuthenticated(self, per_page=30, page=1):
        """Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
        
        https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user
        /user/public_emails
        
        arguments:
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/user/public_emails", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and Email(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 403:
            return BasicError(**r.json())
            
        if r.status_code == 401:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersList(self, since=None, per_page=30):
        """Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.

Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
        
        https://docs.github.com/rest/reference/users#list-users
        /users
        
        arguments:
        since -- A user ID. Only return users with an ID greater than this ID.
        per_page -- Results per page (max 100)
        
        """
        
        data = {}
        if since is not None:
            data['since'] = since
        if per_page is not None:
            data['per_page'] = per_page
        
        
        r = requests.get(f"{self._url}/users", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        if r.status_code == 304:
            return NotModified(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersGetByUsername(self, username:str):
        """Provides publicly available information about someone with a GitHub account.

GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"

The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).

The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
        
        https://docs.github.com/rest/reference/users#get-a-user
        /users/{username}
        
        arguments:
        username -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return r.json()
            
        if r.status_code == 202:
            return r.json()
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListFollowersForUser(self, username:str,per_page=30, page=1):
        """Lists the people following the specified user.
        
        https://docs.github.com/rest/reference/users#list-followers-of-a-user
        /users/{username}/followers
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/followers", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListFollowingForUser(self, username:str,per_page=30, page=1):
        """Lists the people who the specified user follows.
        
        https://docs.github.com/rest/reference/users#list-the-people-a-user-follows
        /users/{username}/following
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/following", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and SimpleUser(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def UsersCheckFollowingForUser(self, username:str, target_user:str):
        """
        
        https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user
        /users/{username}/following/{target_user}
        
        arguments:
        username -- 
        target_user -- 
        
        """
        
        data = {}
        
        
        r = requests.get(f"{self._url}/users/{username}/following/{target_user}", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 204:
            return HttpResponse(r.status_code)
            
        if r.status_code == 404:
            return HttpResponse(r.status_code)
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListGpgKeysForUser(self, username:str,per_page=30, page=1):
        """Lists the GPG keys for a user. This information is accessible by anyone.
        
        https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user
        /users/{username}/gpg_keys
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/gpg_keys", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and GpgKey(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)

    def UsersGetContextForUser(self, username:str,subject_type='None', subject_id=None):
        """Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.

The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:

```shell
 curl -u username:token
  https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
```
        
        https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user
        /users/{username}/hovercard
        
        arguments:
        username -- 
        subject_type -- Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
        subject_id -- Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
        
        """
        
        data = {}
        if subject_type is not None:
            data['subject_type'] = subject_type
        if subject_id is not None:
            data['subject_id'] = subject_id
        
        
        r = requests.get(f"{self._url}/users/{username}/hovercard", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return Hovercard(**r.json())
            
        if r.status_code == 404:
            return BasicError(**r.json())
            
        if r.status_code == 422:
            return ValidationError(**r.json())
            
        
        raise UnexpectedResult(r.status_code)

    def UsersListPublicKeysForUser(self, username:str,per_page=30, page=1):
        """Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
        
        https://docs.github.com/rest/reference/users#list-public-keys-for-a-user
        /users/{username}/keys
        
        arguments:
        username -- 
        per_page -- Results per page (max 100)
        page -- Page number of the results to fetch.
        
        """
        
        data = {}
        if per_page is not None:
            data['per_page'] = per_page
        if page is not None:
            data['page'] = page
        
        
        r = requests.get(f"{self._url}/users/{username}/keys", 
                           params=data,
                           headers=self._headers())
        self._updateStats(r.headers)
    
        
        if r.status_code == 200:
            return [ entry and KeySimple(**entry) for entry in r.json() ]
            
        
        raise UnexpectedResult(r.status_code)